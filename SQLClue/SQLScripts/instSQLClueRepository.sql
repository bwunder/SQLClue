/*******************************************************************************
 Creates the SQLClue Configuration Archive data store.
  
 The self deleting stored proc SQLCfg.pRepositoryInit is executed after this 
 script to prepare the host SQL Server for monitoring. 

 Do not run this script using SSMS, use the SQLClue Console's 
  'Tools|SQL Configuration|Install' menu option to create the SQL Configuration 
 repository data store. The application verifies and completes all configuration 
 and security steps that must otherwise be done manually. The application also 
 maintains user settings that support the data store's state of deployment.

 The data store can be created in any database. An existing database can be 
 selected at the beginning of the installation's SQL connection dialog. Note 
 in the script the changes that will be made to the database. Compression, 
 partitioning and Transparent Data Encryption can be used if desired. 
*******************************************************************************/

EXEC sp_changedbowner 'sa';

GO

IF (SELECT [is_read_committed_snapshot_on] 
    FROM sys.databases
    WHERE [name] = DB_NAME()) = 0
 BEGIN 
  BEGIN TRY
   DECLARE @SET_READ_COMMITED_SNAPSHOT [NVARCHAR](400), @rc [INT];
   SET @SET_READ_COMMITED_SNAPSHOT = 'ALTER DATABASE [' + DB_NAME() + '] SET ALLOW_SNAPSHOT_ISOLATION ON; 
     ALTER DATABASE [' + DB_NAME() + '] SET READ_COMMITTED_SNAPSHOT ON;'
   EXEC @rc = sp_executesql @SET_READ_COMMITED_SNAPSHOT;
  END TRY
  BEGIN CATCH
    DECLARE @Msg [NVARCHAR](1024);  
    SET @Msg = ERROR_MESSAGE();
    RAISERROR('instSQLClueRepository.sql failed at SET READ_COMITTED_SNAPSHOT. Error Message: %s @rc:%d',20,1, @Msg, @rc) WITH LOG;
  END CATCH
 END
GO

IF NOT EXISTS (SELECT * FROM [sys].[schemas] WHERE [name] = 'SQLCfg')
 EXEC('CREATE SCHEMA [SQLCfg] AUTHORIZATION [dbo]')

GO           

IF IS_MEMBER('SQLCfgReportingRole') IS NULL
 CREATE ROLE [SQLCfgReportingRole] AUTHORIZATION [db_owner];

GO 

IF IS_MEMBER('SQLCfgServiceRole') IS NULL
 CREATE ROLE [SQLCfgServiceRole] AUTHORIZATION [db_owner];

EXEC [sys].[sp_addrolemember] 'SQLCfgReportingRole', 'SQLCfgServiceRole';

GO

IF IS_MEMBER('SQLCfgAdminRole') IS NULL
 CREATE ROLE [SQLCfgAdminRole] AUTHORIZATION [db_owner];
EXEC [sys].[sp_addrolemember] 'SQLCfgServiceRole', 'SQLCfgAdminRole';

GO

IF IS_MEMBER('SQLClueAdminRole') IS NULL
 CREATE ROLE [SQLClueAdminRole] AUTHORIZATION [db_owner];
EXEC [sys].[sp_addrolemember] 'SQLCfgAdminRole', 'SQLClueAdminRole';
EXEC [sys].[sp_addrolemember] 'db_datareader', 'SQLClueAdminRole';

GO

DECLARE @Login [NVARCHAR](128);
SET @Login = ORIGINAL_LOGIN();
IF IS_MEMBER('Public')=0
 EXEC [sys].[sp_grantdbaccess] @Login;
EXEC [sys].[sp_addrolemember] 'SQLClueAdminRole', @Login;

GO

If NOT EXISTS (SELECT * FROM [sys].[fulltext_catalogs] WHERE name = 'ftSQLConfigurationRepositoryCatalog')
 CREATE FULLTEXT CATALOG [ftSQLConfigurationRepositoryCatalog];

GO

If (SELECT [value] AS [IsCLREnabled] 
    FROM [sys].[configurations]
    WHERE [name] = 'clr enabled') = 0
 BEGIN
  EXEC [dbo].[sp_configure] 'clr enabled', 1;
  RECONFIGURE;
  -- no restart needed for SQL 2008, SQLClue not suppoted on 2005 anyway 
  IF ISNULL(PARSENAME ( CONVERT(NVARCHAR(128), SERVERPROPERTY('ProductVersion')) , 4 ), 0) < 10
  BEGIN
   RAISERROR('CLR Integration has been enabled on SQL instance [%s]. SQL Server 2005 requires a restart of the SQLClue host SQL Server service to active the configuration change.',20,1,@@SERVERNAME) WITH LOG; 
  END 
 END

GO
IF  NOT EXISTS (SELECT * FROM [sys].[assemblies] WHERE [name] = N'SQLClueCLR')
  EXEC sp_executesql N'CREATE ASSEMBLY [SQLClueCLR]
AUTHORIZATION [dbo]
FROM 
WITH PERMISSION_SET = SAFE';

GO
IF  NOT EXISTS (SELECT * FROM [sys].[assemblY_files] WHERE [name] = N'SQLClueCLR')
  EXEC sp_executesql N'ALTER ASSEMBLY [SQLClueCLR]
    DROP FILE ALL
    ADD FILE FROM 
	AS N''SQLClueCLR.pdb''';

GO

IF NOT EXISTS(SELECT * FROM [sys].[types] WHERE [name] = N'SQLCfgNode' And SCHEMA_NAME(schema_id) = 'SQLCfg')
 BEGIN
  EXEC sp_executesql N'CREATE TYPE [SQLCfg].[SQLCfgNode] EXTERNAL NAME [SQLClueCLR].[SQLCgfNode.SQLCfgNode]'

  EXEC sys.sp_addextendedproperty 
      @name=N'version'
    , @value=N'v1.5.1.1' 
    , @level0type=N'SCHEMA'
    , @level0name=N'SQLCfg'
    , @level1type=N'TYPE'
    , @level1name=N'SQLCfgNode';

  EXEC sys.sp_addextendedproperty 
      @name=N'AutoDeployed'
    , @value=N'no' 
    , @level0type=N'SCHEMA'
    , @level0name=N'SQLCfg'
    , @level1type=N'TYPE'
    , @level1name=N'SQLCfgNode';

  EXEC sys.sp_addextendedproperty 
      @name=N'SqlAssemblyFile'
    , @value=N'SQLCfgNode.vb' 
    , @level0type=N'SCHEMA'
    , @level0name=N'SQLCfg'
    , @level1type=N'TYPE'
    , @level1name=N'SQLCfgNode';

  EXEC sys.sp_addextendedproperty 
      @name=N'SqlAssemblyFileLine'
    , @value=13 
    , @level0type=N'SCHEMA'
    , @level0name=N'SQLCfg'
    , @level1type=N'TYPE'
    , @level1name=N'SQLCfgNode';
 
 END

GO

/*
Functions all work, but unless a property needs to be materialized in an index, they are not needed 
they are not fancy, most of the code is the <SQLFunction custom attribute decoration>.
all return the indicted property from the current node marked deterministic and precise
you cannot mark a computed column as PERSISTED if it simply references a property, instead use the result of the function 
*/

--IF  NOT EXISTS (SELECT * FROM [sys].[objects] 
--                WHERE [object_id] = OBJECT_ID(N'[SQLCfg].[GetCollection]') 
--                AND [type] in (N'FN', N'IF', N'TF', N'FS', N'FT'))
-- BEGIN
--  EXEC sp_executesql 
--N'CREATE FUNCTION [SQLCfg].[GetCollection](@Node [SQLCfg].[SQLCfgNode])
--RETURNS [nvarchar](128) WITH EXECUTE AS CALLER
--AS 
--EXTERNAL NAME [SQLClueCLR].[SQLCgfNode.UserDefinedFunctions].[GetCollection]'

--  EXEC sys.sp_addextendedproperty 
--     @name=N'AutoDeployed'
--   , @value=N'no' 
--   , @level0type=N'SCHEMA'
--   , @level0name=N'SQLCfg'
--   , @level1type=N'FUNCTION'
--   , @level1name=N'GetCollection'
 
--  EXEC sys.sp_addextendedproperty 
--     @name=N'SqlAssemblyFile'
--   , @value=N'SQLCfgNodeFunctions.vb' 
--   , @level0type=N'SCHEMA'
--   , @level0name=N'SQLCfg'
--   , @level1type=N'FUNCTION'
--   , @level1name=N'GetCollection'

--  EXEC sys.sp_addextendedproperty 
--     @name=N'SqlAssemblyFileLine'
--   , @value=18 
--   , @level0type=N'SCHEMA'
--   , @level0name=N'SQLCfg'
--   , @level1type=N'FUNCTION'
--   , @level1name=N'GetCollection'
-- END

GO

--IF NOT EXISTS (SELECT * FROM [sys].[objects] 
--               WHERE [object_id] = OBJECT_ID(N'[SQLCfg].[GetDatabase]') 
--               AND [type] in (N'FN', N'IF', N'TF', N'FS', N'FT'))
-- BEGIN
--  EXEC sp_executesql 
--N'CREATE FUNCTION [SQLCfg].[GetDatabase](@Node [SQLCfg].[SQLCfgNode])
--RETURNS [nvarchar](128) WITH EXECUTE AS CALLER
--AS 
--EXTERNAL NAME [SQLClueCLR].[SQLCgfNode.UserDefinedFunctions].[GetDatabase]'

--  EXEC sys.sp_addextendedproperty 
--     @name=N'AutoDeployed'
--   , @value=N'no' 
--   , @level0type=N'SCHEMA'
--   , @level0name=N'SQLCfg'
--   , @level1type=N'FUNCTION'
--   , @level1name=N'GetDatabase'

--  EXEC sys.sp_addextendedproperty 
--     @name=N'SqlAssemblyFile'
--   , @value=N'SQLCfgNodeFunctions.vb' 
--   , @level0type=N'SCHEMA'
--   , @level0name=N'SQLCfg'
--   , @level1type=N'FUNCTION'
--   , @level1name=N'GetDatabase'

--  EXEC sys.sp_addextendedproperty 
--     @name=N'SqlAssemblyFileLine'
--   , @value=18 
--   , @level0type=N'SCHEMA'
--   , @level0name=N'SQLCfg'
--   , @level1type=N'FUNCTION'
--   , @level1name=N'GetDatabase'

-- END

GO
--IF NOT EXISTS (SELECT * FROM [sys].[objects] 
--               WHERE [object_id] = OBJECT_ID(N'[SQLCfg].[GetInstance]') 
--               AND [type] in (N'FN', N'IF', N'TF', N'FS', N'FT'))
-- BEGIN
--  EXEC sp_executesql 
--N'CREATE FUNCTION [SQLCfg].[GetInstance](@Node [SQLCfg].[SQLCfgNode])
--RETURNS [nvarchar](128) WITH EXECUTE AS CALLER
--AS 
--EXTERNAL NAME [SQLClueCLR].[SQLCgfNode.UserDefinedFunctions].[GetInstance]'

--  EXEC sys.sp_addextendedproperty 
--     @name=N'AutoDeployed'
--   , @value=N'no' 
--   , @level0type=N'SCHEMA'
--   , @level0name=N'SQLCfg'
--   , @level1type=N'FUNCTION'
--   , @level1name=N'GetInstance'

--  EXEC sys.sp_addextendedproperty 
--     @name=N'SqlAssemblyFile'
--   , @value=N'SQLCfgNodeFunctions.vb' 
--   , @level0type=N'SCHEMA'
--   , @level0name=N'SQLCfg'
--   , @level1type=N'FUNCTION'
--   , @level1name=N'GetInstance'

--  EXEC sys.sp_addextendedproperty 
--     @name=N'SqlAssemblyFileLine'
--   , @value=18 
--   , @level0type=N'SCHEMA'
--   , @level0name=N'SQLCfg'
--   , @level1type=N'FUNCTION'
--   , @level1name=N'GetInstance'

-- END

GO

--IF NOT EXISTS (SELECT * FROM [sys].[objects] 
--               WHERE [object_id] = OBJECT_ID(N'[SQLCfg].[GetItem]') 
--               AND [type] in (N'FN', N'IF', N'TF', N'FS', N'FT'))
-- BEGIN
--  EXEC sp_executesql 
--N'CREATE FUNCTION [SQLCfg].[GetItem](@Node [SQLCfg].[SQLCfgNode])
--RETURNS [nvarchar](4000) WITH EXECUTE AS CALLER
--AS 
--EXTERNAL NAME [SQLClueCLR].[SQLCgfNode.UserDefinedFunctions].[GetItem]'

--  EXEC sys.sp_addextendedproperty 
--     @name=N'AutoDeployed'
--   , @value=N'no' 
--   , @level0type=N'SCHEMA'
--   , @level0name=N'SQLCfg'
--   , @level1type=N'FUNCTION'
--   , @level1name=N'GetItem'

--  EXEC sys.sp_addextendedproperty 
--     @name=N'SqlAssemblyFile'
--   , @value=N'SQLCfgNodeFunctions.vb' 
--   , @level0type=N'SCHEMA'
--   , @level0name=N'SQLCfg'
--   , @level1type=N'FUNCTION'
--   , @level1name=N'GetItem'

--  EXEC sys.sp_addextendedproperty 
--     @name=N'SqlAssemblyFileLine'
--   , @value=18 
--   , @level0type=N'SCHEMA'
--   , @level0name=N'SQLCfg'
--   , @level1type=N'FUNCTION'
--   , @level1name=N'GetItem'

-- END
 
GO

--IF NOT EXISTS (SELECT * FROM [sys].[objects] 
--               WHERE [object_id] = OBJECT_ID(N'[SQLCfg].[GetLength]') 
--               AND [type] in (N'FN', N'IF', N'TF', N'FS', N'FT'))
-- BEGIN
--  EXEC sp_executesql 
--N'CREATE FUNCTION [SQLCfg].[GetLength](@Node [SQLCfg].[SQLCfgNode])
--RETURNS [int] WITH EXECUTE AS CALLER
--AS 
--EXTERNAL NAME [SQLClueCLR].[SQLCgfNode.UserDefinedFunctions].[GetLength]'

--  EXEC sys.sp_addextendedproperty 
--     @name=N'AutoDeployed'
--   , @value=N'no' 
--   , @level0type=N'SCHEMA'
--   , @level0name=N'SQLCfg'
--   , @level1type=N'FUNCTION'
--   , @level1name=N'GetLength'

--  EXEC sys.sp_addextendedproperty 
--     @name=N'SqlAssemblyFile'
--   , @value=N'SQLCfgNodeFunctions.vb' 
--   , @level0type=N'SCHEMA'
--   , @level0name=N'SQLCfg'
--   , @level1type=N'FUNCTION'
--   , @level1name=N'GetLength'

--  EXEC sys.sp_addextendedproperty 
--     @name=N'SqlAssemblyFileLine'
--   , @value=18 
--   , @level0type=N'SCHEMA'
--   , @level0name=N'SQLCfg'
--   , @level1type=N'FUNCTION'
--   , @level1name=N'GetLength'

-- END

GO

--IF NOT EXISTS (SELECT * FROM [sys].[objects] 
--               WHERE [object_id] = OBJECT_ID(N'[SQLCfg].[GetPath]') 
--               AND [type] in (N'FN', N'IF', N'TF', N'FS', N'FT'))
-- BEGIN
--  EXEC sp_executesql 
--N'CREATE FUNCTION [SQLCfg].[GetPath](@Node [SQLCfg].[SQLCfgNode])
--RETURNS [nvarchar](128) WITH EXECUTE AS CALLER
--AS 
--EXTERNAL NAME [SQLClueCLR].[SQLCgfNode.UserDefinedFunctions].[GetPath]'

--  EXEC sys.sp_addextendedproperty 
--     @name=N'AutoDeployed'
--   , @value=N'no' 
--   , @level0type=N'SCHEMA'
--   , @level0name=N'SQLCfg'
--   , @level1type=N'FUNCTION'
--   , @level1name=N'GetPath'

--  EXEC sys.sp_addextendedproperty 
--     @name=N'SqlAssemblyFile'
--   , @value=N'SQLCfgNodeFunctions.vb' 
--   , @level0type=N'SCHEMA'
--   , @level0name=N'SQLCfg'
--   , @level1type=N'FUNCTION'
--   , @level1name=N'GetPath'

--  EXEC sys.sp_addextendedproperty 
--     @name=N'SqlAssemblyFileLine'
--   , @value=18 
--   , @level0type=N'SCHEMA'
--   , @level0name=N'SQLCfg'
--   , @level1type=N'FUNCTION'
--   , @level1name=N'GetPath'

-- END

GO

--IF NOT EXISTS (SELECT * FROM [sys].[objects] 
--               WHERE [object_id] = OBJECT_ID(N'[SQLCfg].[GetSubType]') 
--               AND [type] in (N'FN', N'IF', N'TF', N'FS', N'FT'))
-- BEGIN
--  EXEC sp_executesql 
--N'CREATE FUNCTION [SQLCfg].[GetSubType](@Node [SQLCfg].[SQLCfgNode])
--RETURNS [nvarchar](128) WITH EXECUTE AS CALLER
--AS 
--EXTERNAL NAME [SQLClueCLR].[SQLCgfNode.UserDefinedFunctions].[GetSubType]'

--  EXEC sys.sp_addextendedproperty 
--     @name=N'AutoDeployed'
--   , @value=N'no' 
--   , @level0type=N'SCHEMA'
--   , @level0name=N'SQLCfg'
--   , @level1type=N'FUNCTION'
--   , @level1name=N'GetSubType'

--  EXEC sys.sp_addextendedproperty 
--     @name=N'SqlAssemblyFile'
--   , @value=N'SQLCfgNodeFunctions.vb' 
--   , @level0type=N'SCHEMA'
--   , @level0name=N'SQLCfg'
--   , @level1type=N'FUNCTION'
--   , @level1name=N'GetSubType'

--  EXEC sys.sp_addextendedproperty 
--     @name=N'SqlAssemblyFileLine'
--   , @value=18 
--   , @level0type=N'SCHEMA'
--   , @level0name=N'SQLCfg'
--   , @level1type=N'FUNCTION'
--   , @level1name=N'GetSubType'

-- END

GO

IF OBJECT_ID('[SQLCfg].[tSQLCfg]','U') IS NULL
 CREATE TABLE [SQLCfg].[tSQLCfg] (
    [LicensedCompany] [NVARCHAR] (128) NOT NULL 
    CONSTRAINT [dft_tSQLCfg__LicensedCompany] 
    DEFAULT ('')
  , [LicensedUser] [NVARCHAR] (128) NOT NULL 
    CONSTRAINT [dft_tSQLCfg__LicensedUser] 
    DEFAULT ('')
  , [LicenseCode] [NVARCHAR] (128) NOT NULL 
    CONSTRAINT [dft_tSQLCfg__LicenseCode] 
    DEFAULT ('Unlicensed Trial Software')
  , [LicensedInstanceCount] [INT] NOT NULL 
    CONSTRAINT [dft_tSQLCfg__LicensedInstanceCount] 
    DEFAULT (3)
  , [LicenseDate] [NVARCHAR] (30) NOT NULL
    CONSTRAINT [dft_tSQLCfg_LicenseDate] 
    DEFAULT (CAST(CAST(CURRENT_TIMESTAMP AS [DATE]) AS [VARCHAR] (30)))
  , [RecCreatedDt] [DATETIME] NOT NULL 
    CONSTRAINT [dft_tSQLCfg_RecCreatedDt] 
    DEFAULT (CURRENT_TIMESTAMP)
  , [RecCreatedUser] [NVARCHAR] (128) NOT NULL 
    CONSTRAINT [dft_tSQLCfg_RecCreatedUser] 
    DEFAULT (ORIGINAL_LOGIN())
  , [RecUpdatedDt] [DATETIME] NOT NULL 
    CONSTRAINT [dft_tSQLCfg_RecUpdatedDt] 
    DEFAULT (CURRENT_TIMESTAMP)
  , [RecUpdatedUser] [NVARCHAR] (128) NOT NULL 
    CONSTRAINT [dft_tSQLCfg_RecUpdatedUser] 
    DEFAULT (ORIGINAL_LOGIN())
  , CONSTRAINT [pkc_tSQLCfg]
    PRIMARY KEY ([LicensedCompany], [LicensedUser], [LicenseCode]) );

GO

-- tSQLCfgConnection/tInstance is a horizontal partion (1:1)  
-- the entity context for tSQLCfgConnection is the connection 
-- for tInstance the context is the archive settings 
IF OBJECT_ID('[SQLCfg].[tConnection]','U') IS NULL
 CREATE TABLE [SQLCfg].[tConnection] (
    [InstanceName] [NVARCHAR] (128) NOT NULL 
  , [EncryptedConnection] [BIT] NOT NULL
    CONSTRAINT [dft_tConnection__EncryptedConnection] 
    DEFAULT (0)
  , [TrustServerCertificate] [BIT] NOT NULL
    CONSTRAINT [dft_tConnection__TrustServerCertificate] 
    DEFAULT (0)
  , [NetworkProtocol] [NVARCHAR] (128) NULL
  , [ConnectionTimeout] [INT] NOT NULL
    CONSTRAINT [dft_tConnection__ConnectionTimeout] 
    DEFAULT (10)
  , [LoginSecure] [BIT] NOT NULL
    CONSTRAINT [dft_tConnection__LoginSecure] 
    DEFAULT (1)
  , [LoginName] [NVARCHAR] (128) NULL
  , [EncryptedPassword] [VARBINARY] (256) NULL
  , [IsDeleted] [BIT] NOT NULL
    CONSTRAINT [dft_tConnection__IsDeleted] 
    DEFAULT (0)
  , [RecCreatedDt] [DATETIME] NOT NULL 
    CONSTRAINT [dft_tConnection_RecCreatedDt] 
    DEFAULT (CURRENT_TIMESTAMP)
  , [RecCreatedUser] [NVARCHAR] (128) NOT NULL 
    CONSTRAINT [dft_tConnection_RecCreatedUser] 
    DEFAULT (ORIGINAL_LOGIN())
  , [RecUpdatedDt] [DATETIME] NOT NULL 
    CONSTRAINT [dft_tConnection_RecUpdatedDt] 
    DEFAULT (CURRENT_TIMESTAMP)
  , [RecUpdatedUser] [NVARCHAR] (128) NOT NULL 
    CONSTRAINT [dft_tConnection_RecUpdatedUser] 
    DEFAULT (ORIGINAL_LOGIN())
  , CONSTRAINT [pkn_tConnection__Name] 
    PRIMARY KEY CLUSTERED ([InstanceName]) );

GO

IF OBJECT_ID('[SQLCfg].[tInstance]','U') IS NULL
 CREATE TABLE [SQLCfg].[tInstance] (
    [Name] [NVARCHAR] (128) NOT NULL 
  , [ActiveDirectory] [BIT] NOT NULL 
    CONSTRAINT [dft_tInstance_ActiveDirectory] 
    DEFAULT (1)
  , [Audits] [BIT] NOT NULL 
    CONSTRAINT [dft_tInstance_Audits] 
    DEFAULT (1)
  , [BackupDevices] [BIT] NOT NULL 
    CONSTRAINT [dft_tInstance_BackupDevices] 
    DEFAULT (1)
  , [Configuration] [BIT] NOT NULL 
    CONSTRAINT [dft_tInstance_Configuration] 
    DEFAULT (1)
  , [Credentials] [BIT] NOT NULL 
    CONSTRAINT [dft_tInstance_Credentials] 
    DEFAULT (1)
  , [CryptographicProviders] [BIT] NOT NULL 
    CONSTRAINT [dft_tInstance_CryptographicProviders] 
    DEFAULT (1)
  , [Databases] [BIT] NOT NULL 
    CONSTRAINT [dft_tInstance_Databases] 
    DEFAULT (1)   
  , [EndPoints] [BIT] NOT NULL 
    CONSTRAINT [dft_tInstance_EndPoints] 
    DEFAULT (1)
  , [FullTextService] [BIT] NOT NULL 
    CONSTRAINT [dft_tInstance_FullTextService] 
    DEFAULT (1)
  , [Information] [BIT] NOT NULL 
    CONSTRAINT [dft_tInstance_Information] 
    DEFAULT (1)
  , [JobServer] [BIT] NOT NULL 
    CONSTRAINT [dft_tInstance_JobServer] 
    DEFAULT (1)
  , [LinkedServers] [BIT] NOT NULL 
    CONSTRAINT [dft_tInstance_LinkedServers] 
    DEFAULT (1)
  , [Logins] [BIT] NOT NULL 
    CONSTRAINT [dft_tInstance_Logins] 
    DEFAULT (1)
  , [Mail] [BIT] NOT NULL 
    CONSTRAINT [dft_tInstance_Mail] 
    DEFAULT (1)
  , [ProxyAccount] [BIT] NOT NULL 
    CONSTRAINT [dft_tInstance_ProxyAccount] 
    DEFAULT (1)
  , [ResourceGovernor] [BIT] NOT NULL 
    CONSTRAINT [dft_tInstance_ResourceGovernor] 
    DEFAULT (1)
  , [Roles] [BIT] NOT NULL 
    CONSTRAINT [dft_tInstance_Roles] 
    DEFAULT (1)
  , [ServerAuditSpecifications] [BIT] NOT NULL 
    CONSTRAINT [dft_tInstance_ServerAuditSpecifications] 
    DEFAULT (1)
  , [Settings] [BIT] NOT NULL 
    CONSTRAINT [dft_tInstance_Settings] 
    DEFAULT (1)
  , [Triggers] [BIT] NOT NULL 
    CONSTRAINT [dft_tInstance_Triggers] 
    DEFAULT (1)
  , [UserDefinedMessages] [BIT] NOT NULL 
    CONSTRAINT [dft_tInstance_UserDefinedMessages] 
    DEFAULT (1)
  , [RecCreatedDt] [DATETIME] NOT NULL 
    CONSTRAINT [dft_tInstance_RecCreatedDt] 
    DEFAULT (CURRENT_TIMESTAMP)
  , [RecCreatedUser] [NVARCHAR] (128) NOT NULL 
    CONSTRAINT [dft_tInstance_RecCreatedUser] 
    DEFAULT (ORIGINAL_LOGIN())
  , [RecUpdatedDt] [DATETIME] NOT NULL
    CONSTRAINT [dft_tInstance_RecUpdatedDt] 
    DEFAULT (CURRENT_TIMESTAMP)
  , [RecUpdatedUser] [NVARCHAR] (128) NOT NULL 
    CONSTRAINT [dft_tInstance_RecUpdatedUser] 
    DEFAULT (ORIGINAL_LOGIN())
  , CONSTRAINT [pk_tInstance__Name] 
    PRIMARY KEY  CLUSTERED ([Name]) 
  , CONSTRAINT [fk_tInstance__Name__to__tConnection__InstanceName] 
    FOREIGN KEY    ([Name]) 
    REFERENCES [SQLCfg].[tConnection] ([InstanceName]) 
    ON DELETE NO ACTION );

GO

IF OBJECT_ID('[SQLCfg].[tJobServer]','U') IS NULL
 CREATE TABLE [SQLCfg].[tJobServer] (
    [InstanceName] [NVARCHAR] (128) NOT NULL 
  , [Alerts] [BIT] NOT NULL 
    CONSTRAINT [dft_tJobServer_Alerts] 
    DEFAULT (1)
  , [AlertSystem] [BIT] NOT NULL 
    CONSTRAINT [dft_tJobServer_AlertSystem] 
    DEFAULT (1)
  , [Jobs] [BIT] NOT NULL 
    CONSTRAINT [dft_tJobServer_Jobs] 
    DEFAULT (1)
  , [Operators] [BIT] NOT NULL 
    CONSTRAINT [dft_tJobServer_Operators] 
    DEFAULT (1)
  , [ProxyAccounts] [BIT] NOT NULL 
    CONSTRAINT [dft_tJobServer_ProxyAccounts] 
    DEFAULT (1)
  , [TargetServers] [BIT] NOT NULL 
    CONSTRAINT [dft_tJobServer_TargetServers] 
    DEFAULT (1)
  , [RecCreatedDt] [DATETIME] NOT NULL 
    CONSTRAINT [dft_tJobServer_RecCreatedDt] 
    DEFAULT (CURRENT_TIMESTAMP)
  , [RecCreatedUser] [NVARCHAR] (128) NOT NULL 
    CONSTRAINT [dft_tJobServer_RecCreatedUser] 
    DEFAULT (ORIGINAL_LOGIN())
  , [RecUpdatedDt] [DATETIME] NOT NULL 
    CONSTRAINT [dft_tJobServer_RecUpdatedDt] 
    DEFAULT (CURRENT_TIMESTAMP)
  , [RecUpdatedUser] [NVARCHAR] (128) NOT NULL 
    CONSTRAINT [dft_tJobServer_RecUpdatedUser] 
    DEFAULT (ORIGINAL_LOGIN())
  , CONSTRAINT [pk_tJobServer__Name] 
    PRIMARY KEY  CLUSTERED ([InstanceName]) 
  , CONSTRAINT [fk_tJobServer__to__tInstance__Name] 
    FOREIGN KEY ([InstanceName]) 
    REFERENCES [SQLCfg].[tInstance] ([Name]) 
    ON DELETE NO ACTION );

GO

IF OBJECT_ID('[SQLCfg].[tDb]','U') IS NULL
 CREATE TABLE [SQLCfg].[tDb] (
    [Name] [NVARCHAR] (128) NOT NULL
  , [InstanceName] [NVARCHAR] (128) NOT NULL 
  , [ActiveDirectory] [BIT] NOT NULL 
    CONSTRAINT [dft_tDb_ActiveDiretory] 
    DEFAULT (1)
  , [ApplicationRoles] [BIT] NOT NULL 
    CONSTRAINT [dft_tDb_ApplicationRoles] 
    DEFAULT (1)
  , [Assemblies] [BIT] NOT NULL 
    CONSTRAINT [dft_tDb_Assemblies] 
    DEFAULT (1)
  , [AsymmetricKeys] [BIT] NOT NULL 
    CONSTRAINT [dft_tDb_AsymmetricKeys] 
    DEFAULT (1)
  , [Certificates] [BIT] NOT NULL 
    CONSTRAINT [dft_tDb_Certificates] 
    DEFAULT (1)
  , [DatabaseAuditSpecifications] [BIT] NOT NULL 
    CONSTRAINT [dft_tInstance_DatabaseAuditSpecifications] 
    DEFAULT (1)
  , [DatabaseOptions] [BIT] NOT NULL 
    CONSTRAINT [dft_tDb_DatabaseOptions] 
    DEFAULT (1)
  , [Defaults] [BIT] NOT NULL 
    CONSTRAINT [dft_tDb_Defaults] 
    DEFAULT (1)
  , [FullTextCatalogs] [BIT] NOT NULL 
    CONSTRAINT [dft_tDb_FullTextCatalogs] 
    DEFAULT (1)
  , [FullTextStopLists] [BIT] NOT NULL 
    CONSTRAINT [dft_tDb_FullTextStopLists] 
    DEFAULT (1)
  , [PartitionFunctions] [BIT] NOT NULL 
    CONSTRAINT [dft_tDb_PartitionFunctions] 
    DEFAULT (1)
  , [PartitionSchemes] [BIT] NOT NULL 
    CONSTRAINT [dft_tDb_PartitionSchemes] 
    DEFAULT (1)
  , [PlanGuides] [BIT] NOT NULL 
    CONSTRAINT [dft_tDb_PlanGuides] 
    DEFAULT (1)
  , [Roles] [BIT] NOT NULL 
    CONSTRAINT [dft_tDb_Roles] 
    DEFAULT (1)
  , [Rules] [BIT] NOT NULL 
    CONSTRAINT [dft_tDb_Rules] 
    DEFAULT (1)
  , [Schemas] [BIT] NOT NULL 
    CONSTRAINT [dft_tDb_Schemas] 
    DEFAULT (1)
  , [ServiceBroker] [BIT] NOT NULL 
    CONSTRAINT [dft_tDb_ServiceBroker] 
    DEFAULT (1)
  , [StoredProcedures] [BIT] NOT NULL 
    CONSTRAINT [dft_tDb_StoredProcedures] 
    DEFAULT (1)
  , [SymmetricKeys] [BIT] NOT NULL 
    CONSTRAINT [dft_tDb_SymmetricKeys] 
    DEFAULT (1)
  , [Synonyms] [BIT] NOT NULL 
    CONSTRAINT [dft_tDb_Synonyms] 
    DEFAULT (1)
  , [Tables] [BIT] NOT NULL 
    CONSTRAINT [dft_tDb_Tables] 
    DEFAULT (1)
  , [Triggers] [BIT] NOT NULL 
    CONSTRAINT [dft_tDb_Triggers] 
    DEFAULT (1)
  , [UserDefinedAggregates] [BIT] NOT NULL 
    CONSTRAINT [dft_tDb_UserDefinedAggregates] 
    DEFAULT (1)
  , [UserDefinedDataTypes] [BIT] NOT NULL 
    CONSTRAINT [dft_tDb_UserDefinedDataTypes] 
    DEFAULT (1)
  , [UserDefinedFunctions] [BIT] NOT NULL 
    CONSTRAINT [dft_tDb_UserDefinedFunctions] 
    DEFAULT (1)
  , [UserDefinedTableTypes] [BIT] NOT NULL 
    CONSTRAINT [dft_tDb_UserDefinedTableTypes] 
    DEFAULT (1)
  , [UserDefinedTypes] [BIT] NOT NULL 
    CONSTRAINT [dft_tDb_UserDefinedTypes] 
    DEFAULT (1)
  , [Users] [BIT] NOT NULL 
    CONSTRAINT [dft_tDb_Users] 
    DEFAULT (1)
  , [Views] [BIT] NOT NULL 
    CONSTRAINT [dft_tDb_Views] 
    DEFAULT (1)
  , [XMLSchemaCollections] [BIT] NOT NULL 
    CONSTRAINT [dft_tDb_XMLSchemaCollections] 
    DEFAULT (1)
  , [RecCreatedDt] [DATETIME] NOT NULL 
    CONSTRAINT [dft_tDb_RecCreatedDt] 
    DEFAULT (CURRENT_TIMESTAMP)
  , [RecCreatedUser] [NVARCHAR] (128) NOT NULL 
    CONSTRAINT [dft_tDb_RecCreatedUser] 
    DEFAULT (ORIGINAL_LOGIN())
  , [RecUpdatedDt] [DATETIME] NOT NULL 
    CONSTRAINT [dft_tDb_RecUpdatedDt] 
    DEFAULT (CURRENT_TIMESTAMP)
  , [RecUpdatedUser] [NVARCHAR] (128) NOT NULL 
    CONSTRAINT [dft_tDb_RecUpdatedUser] 
    DEFAULT (ORIGINAL_LOGIN())
  , CONSTRAINT [pk_tDb__InstanceName__Name] 
    PRIMARY KEY CLUSTERED ([InstanceName], [Name])
  , CONSTRAINT [fk_tDb__Instance__to__tInstance__Name] 
    FOREIGN KEY ([InstanceName]) 
    REFERENCES [SQLCfg].[tInstance] ([Name]) 
    ON DELETE NO ACTION );

GO

IF OBJECT_ID('[SQLCfg].[tServiceBroker]','U') IS NULL
 CREATE TABLE [SQLCfg].[tServiceBroker] (
    [DatabaseName] [NVARCHAR] (128) NOT NULL
  , [InstanceName] [NVARCHAR] (128) NOT NULL 
  , [MessageTypes] [BIT] NOT NULL 
    CONSTRAINT [dft_tServiceBroker_MessageTypes] 
    DEFAULT (1)
  , [Priorities] [BIT] NOT NULL 
    CONSTRAINT [dft_tServiceBroker_Priorities] 
    DEFAULT (1)
  , [Queues] [BIT] NOT NULL 
    CONSTRAINT [dft_tServiceBroker_Queues] 
    DEFAULT (1)
  , [RemoteServiceBindings] [BIT] NOT NULL 
    CONSTRAINT [dft_tServiceBroker_RemoteServiceBindings] 
    DEFAULT (1)
  , [Routes] [BIT] NOT NULL 
    CONSTRAINT [dft_tServiceBroker_Routes] 
    DEFAULT (1)
  , [ServiceContracts] [BIT] NOT NULL 
    CONSTRAINT [dft_tServiceBroker_ServiceContracts] 
    DEFAULT (1)
  , [Services] [BIT] NOT NULL 
    CONSTRAINT [dft_tServiceBroker_Services] 
    DEFAULT (1)
  , [RecCreatedDt] [DATETIME] NOT NULL 
    CONSTRAINT [dft_tServiceBroker_RecCreatedDt] 
    DEFAULT (CURRENT_TIMESTAMP)
  , [RecCreatedUser] [NVARCHAR] (128) NOT NULL 
    CONSTRAINT [dft_tServiceBroker_RecCreatedUser] 
    DEFAULT (ORIGINAL_LOGIN())
  , [RecUpdatedDt] [DATETIME] NOT NULL 
    CONSTRAINT [dft_tServiceBroker_RecUpdatedDt] 
    DEFAULT (CURRENT_TIMESTAMP)
  , [RecUpdatedUser] [NVARCHAR] (128) NOT NULL 
    CONSTRAINT [dft_tServiceBroker_RecUpdatedUser] 
    DEFAULT (ORIGINAL_LOGIN())
  , CONSTRAINT [pk_tServiceBroker__InstanceName__DatabaseName] 
    PRIMARY KEY  CLUSTERED ([InstanceName], [DatabaseName]) 
  , CONSTRAINT [fk_tServiceBroker__to__tDB__InstanceName__DBName] 
    FOREIGN KEY ([InstanceName], [DatabaseName]) 
    REFERENCES [SQLCfg].[tDb] ([InstanceName],[Name]) 
    ON DELETE NO ACTION );

GO
-- NO DRI here
-- will have to crack the node to verify that the entry has a valid reference
-- unclustered UKey will make last version lookup faster  
IF OBJECT_ID('[SQLCfg].[tChange]','U') IS NULL
 BEGIN
  CREATE TABLE [SQLCfg].[tChange] (
     [Id] [INT] IDENTITY (1, 1) NOT NULL 
   , [Node]  [SQLCfg].[SQLCfgNode] NOT NULL
   , [Version] [INT] NULL 
   , [Action] [NVARCHAR] (30) NOT NULL
   , [EventData] [XML] SPARSE NULL  
   , [Definition] [NVARCHAR] (MAX) NULL
   , [DefinitionDt] [DATETIME] SPARSE NULL
   , [RecCreatedDt] [DATETIME] NOT NULL 
     CONSTRAINT [dft_tChange__RecCreatedDt] 
     DEFAULT (CURRENT_TIMESTAMP)
   , CONSTRAINT [pkc_tChange__Id] 
     PRIMARY KEY CLUSTERED ([Id]));

  CREATE NONCLUSTERED INDEX [ixn_tChange_Node_i]
  ON [SQLCfg].[tChange] ([Node])
  INCLUDE ([Version], [Id])

  CREATE UNIQUE NONCLUSTERED INDEX [ixn_tChange_Version_i]  
  ON [SQLCfg].[tChange] ([Version], [Node])
  INCLUDE ([Id], [Action])
  
  CREATE NONCLUSTERED INDEX [ixn_tChange_RecCreatedDt_i]
  ON [SQLCfg].[tChange] ([RecCreatedDt])
  INCLUDE ([Node],[Action])
  
 END

GO

IF NOT EXISTS (SELECT * FROM [sys].[fulltext_indexes] 
               WHERE [object_id] = OBJECT_ID('[SQLCfg].[tChange]')) 
 BEGIN
  IF PARSENAME(CONVERT(NVARCHAR(20), SERVERPROPERTY('ProductVersion')),4) < 10
    EXEC sp_executesql N'CREATE FULLTEXT INDEX ON [SQLCfg].[tChange]
     ([EventData], [Definition] LANGUAGE 0X0 )
    KEY INDEX [pkc_tChange__Id] ON [ftSQLConfigurationRepositoryCatalog]
    WITH CHANGE_TRACKING AUTO;'                    
  ELSE
    EXEC sp_executesql N'CREATE FULLTEXT INDEX ON [SQLCfg].[tChange]
     ([EventData], [Definition] LANGUAGE 0X0 )
    KEY INDEX [pkc_tChange__Id] ON [ftSQLConfigurationRepositoryCatalog]
    WITH (CHANGE_TRACKING AUTO, STOPLIST = SYSTEM);'                    
 END
GO

IF (SELECT [value] FROM [sys].[configurations] WHERE [name] = 'show advanced options') = 0
 BEGIN
  EXEC [dbo].[sp_configure] 'show advanced options', 1;
  RECONFIGURE;
  PRINT 'RECONFIGURE has been run.';
 END

-- FREETEXT performance helper but rank can be outdated - if it matters
IF (SELECT value FROM [sys].[configurations] WHERE [name] = 'precompute rank') = 0
 BEGIN
  EXEC [dbo].[sp_configure] 'precompute rank', 1;
  RECONFIGURE;
  PRINT 'RECONFIGURE has been run.';
 END

-- CONTAINS optimization to prevent lots-0-nioseword warnings/errors 
IF (SELECT value FROM [sys].[configurations] WHERE [name] = 'transform noise words') = 0
 BEGIN
  EXEC [dbo].[sp_configure] 'transform noise words', 1;
  RECONFIGURE;
  PRINT 'RECONFIGURE has been run.';
 END

GO

/* 
   A connection is expected to have one schedule under normal conditions. Only 
   one schedule per instance can use event notifications (enforced by trigger). 
   May also be desirable to periodically verify that someone has not bypassed 
   the event notification mechanism but doing a full archive of the server.
*/
 
IF OBJECT_ID('[SQLCfg].[tSchedule]','U') IS NULL
 BEGIN
  CREATE TABLE [SQLCfg].[tSchedule] (
     [Id] [INT] IDENTITY (1, 1) NOT NULL 
   , [InstanceName] [NVARCHAR] (128) NOT NULL
   , [Interval] [INT] NOT NULL
   , [IntervalType] [NVARCHAR] (10) NOT NULL
   , [IntervalBaseDt] [DATETIME]
   , [UseEventNotifications] [BIT] NOT NULL 
     CONSTRAINT [dft_tInstance__UseEventNotifications] 
     DEFAULT (1)
   , [IsActive] [BIT] 
     CONSTRAINT [dft_tSchedule__IsActive]
     DEFAULT (1) 
   , [RecCreatedDt] [DATETIME] NOT NULL 
     CONSTRAINT [dft_tSchedule_RecCreatedDt] 
     DEFAULT (CURRENT_TIMESTAMP)
   , [RecCreatedUser] [NVARCHAR] (128) NOT NULL 
     CONSTRAINT [dft_tSchedule_RecCreatedUser] 
     DEFAULT (ORIGINAL_LOGIN())
   , [RecUpdatedDt] [DATETIME] NOT NULL 
     CONSTRAINT [dft_tSchedule_RecUpdatedDt] 
     DEFAULT (CURRENT_TIMESTAMP)
   , [RecUpdatedUser] [NVARCHAR] (128) NOT NULL 
     CONSTRAINT [dft_tSchedule_RecUpdatedUser] 
     DEFAULT (ORIGINAL_LOGIN())
   , CONSTRAINT [pkn_tSchedule__Id] 
     PRIMARY KEY NONCLUSTERED ([Id])  
   , CONSTRAINT [fk_tSchedule__InstanceName__to__tConnection__InstanceName] 
     FOREIGN KEY    ([InstanceName]) 
     REFERENCES [SQLCfg].[tConnection] ([InstanceName]) 
     ON DELETE NO ACTION );
  END 

GO 
IF OBJECT_ID('[SQLCfg].[tSchedule]','U') IS NOT NULL
AND OBJECT_ID('[SQLCfg].[vArchive]') IS NULL
 BEGIN
  DECLARE @str as [NVARCHAR] (4000) 
  SET @str = '/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
*******************************************************************************
**    Date           Author             Description of Change
**    11/10/2009     bw                 remove QueryBaseline references 
**              
*******************************************************************************/

CREATE VIEW [SQLCfg].[vArchive]
AS
SELECT [Id] AS [ArchiveId] 
 , [InstanceName] 
 , [Interval]
 , [IntervalType]
 , [IntervalBaseDt] AS [NextRunDt]
 , CASE WHEN [UseEventNotifications] = 1 THEN ''True''
        ELSE ''False'' END AS [UseEventNotifications] 
 , [IsActive] AS [IsScheduleActive] 
FROM [SQLCfg].[tSchedule]'
  EXEC sp_executesql @str   
 END
GO

IF OBJECT_ID('[SQLCfg].[tLabel]','U') IS NULL
 CREATE TABLE [SQLCfg].[tLabel] (
    [Id] [INT] IDENTITY (1, 1) NOT NULL 
  , [IncludeChildren] [BIT]
    CONSTRAINT [dft_tLabel__IncludeChildren] 
    DEFAULT (1)
  , [Label] [NVARCHAR] (128) NOT NULL  
  , [Notes] [NVARCHAR] (MAX) NULL  
  , [ExpiredDt] [DATETIME] NULL 
  , [RecCreatedDt] [DATETIME] NOT NULL 
    CONSTRAINT [dft_tLabel__RecCreatedDt] 
    DEFAULT (CURRENT_TIMESTAMP)
  , [RecCreatedUser] [NVARCHAR] (128) NOT NULL 
    CONSTRAINT [dft_tLabel_RecUpdatedUser] 
    DEFAULT (ORIGINAL_LOGIN())
  , CONSTRAINT [pkn_tLabel__Id] 
    PRIMARY KEY ([Id]) );

GO

IF OBJECT_ID('[SQLCfg].[tArchiveLog]','U') IS NULL
 BEGIN
  CREATE TABLE [SQLCfg].[tArchiveLog] (
     [Id] [INT] IDENTITY (1, 1) NOT NULL 
   , [ScheduleId] [INT] NOT NULL
   , [InstanceName] [NVARCHAR] (128) NOT NULL
   , [NbrDDLEventsProcessed] [INT] NULL
   , [NbrItemsProcessed] [INT] NULL
   , [NbrItemsAdded] [INT] NULL
   , [NbrItemsChanged] [INT] NULL
   , [NbrItemsDeleted] [INT] NULL
   , [ArchiveError] [VARCHAR] (MAX) SPARSE NULL
   , [ScheduledStartDt] [DATETIME]  NULL -- null likely means ran from UI  
   , [ActualStartDt] [DATETIME] NOT NULL 
   , [ActualEndDt] [DATETIME] NOT NULL 
     CONSTRAINT [dft_tArchiveLog__ActualEndDt] 
     DEFAULT (CURRENT_TIMESTAMP)
   , [RecCreatedUser] [NVARCHAR] (128) NOT NULL 
     CONSTRAINT [dft_tArchiveLog_RecCreatedUser] 
     DEFAULT (ORIGINAL_LOGIN())
   , CONSTRAINT [pkn_tArchiveLog__Id] 
     PRIMARY KEY ([Id]) );
    
  CREATE NONCLUSTERED INDEX ixn_tArchiveLog_ScheduledStartDt  
  ON [SQLCfg].[tArchiveLog] (ScheduledStartDt)
     
  CREATE NONCLUSTERED INDEX ixn_tArchiveLog_ActualStartDt  
  ON [SQLCfg].[tArchiveLog] (ActualStartDt)
     
 END     

GO

IF OBJECT_ID('[SQLCfg].[tChangeLabel]','U') IS NULL
 CREATE TABLE [SQLCfg].[tChangeLabel] (
    [LabelId] [INT] NOT NULL 
  , [ChangeId]  [INT] NOT NULL
  , CONSTRAINT pkc_tChangeLabel__LabelId__ChangeId
    PRIMARY KEY ([LabelId], [ChangeId])
  , CONSTRAINT [fk_tChangeLabel__LabelId__to__tLabel]
    FOREIGN KEY ([LabelId]) REFERENCES [SQLCfg].[tLabel](Id)
  , CONSTRAINT [fk_tChangeLabel__ChangeId__to__tChange]
    FOREIGN KEY ([ChangeId]) REFERENCES [SQLCfg].[tChange]([Id]) );
   
GO

IF OBJECT_ID('[SQLCfg].[tSQLErrorLog]','U') IS NULL
 CREATE TABLE [SQLCfg].[tSQLErrorLog] (
    [Id] [INT] IDENTITY (1, 1) NOT NULL 
  , [UserName] [NVARCHAR] (256)  NULL
  , [DBName] [NVARCHAR] (128)  NULL
  , [ErrorNumber] [INT]  NULL
  , [ErrorSeverity] [INT]  NULL
  , [ErrorState] [INT]  NULL
  , [ErrorProcedure] [NVARCHAR] (126) NULL
  , [ErrorLine] [INT]  NULL
  , [ErrorMessage] [NVARCHAR] (2048) NULL
  , [TextData] [NVARCHAR] (MAX) NULL 
  , [Notes] [NVARCHAR] (MAX) SPARSE NULL  
  , [RecCreatedDt] [DATETIME] NOT NULL 
    CONSTRAINT [dft_tSQLErrorLog__RecCreatedDt] 
    DEFAULT (CURRENT_TIMESTAMP)
  , CONSTRAINT [pkc_tSQLErrorLog__Id] 
    PRIMARY KEY ([Id]) );

GO
 
If NOT EXISTS (SELECT * FROM [sys].[fulltext_indexes] 
               WHERE object_name([object_id]) = 'tSQLErrorLog') 
 CREATE FULLTEXT INDEX ON [SQLCfg].[tSQLErrorLog]
  (ErrorMessage, [TextData] LANGUAGE 0X0, [Notes] LANGUAGE 0X0 )
 KEY INDEX [pkc_tSQLErrorLog__Id] ON [ftSQLConfigurationRepositoryCatalog]
 WITH CHANGE_TRACKING AUTO;                    

GO

-- column names in this table closely align to SQLClue app settings
-- what is here is needed to standardize the archive.
-- !!changing a setting will result in change versions with no real changes associated!! 
-- see insert at pRepositoryInit
IF OBJECT_ID('[SQLCfg].[tServiceSettings]','U') IS NULL
 CREATE TABLE [SQLCfg].[tServiceSettings] (
    [Name] [NVARCHAR] (128) NOT NULL
    CONSTRAINT dft_tServiceSettings__SQLInstance
    DEFAULT ('DEFAULT')
  , [AddDatabasesUponDiscovery] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__AddDatabasesUponDiscovery] 
    DEFAULT (1)
  , [TargetEventNotificationDatabase] [NVARCHAR] (128) NOT NULL
    CONSTRAINT [dft_tServiceSettings__TargetEventNotificationDatabase] 
    DEFAULT ('msdb')
  , [Scripting__Options_Batch__Separator] [NVARCHAR] (128) NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_Batch__Separator] 
    DEFAULT ('GO')
  , [Misc_Ignore__Blank__Lines] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Misc_Ignore__Blank__Lines] 
    DEFAULT (1)
  , [Misc_Display__Output_Show__Comparison__Details] [BIT] NOT NULL 
    CONSTRAINT [dft_tServiceSettings__Misc_Display__Output_Show__Comparison__Details] 
    DEFAULT (0)
  , [Scripting__Options_Include__DROP__In__Script] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_Include__DROP__In__Script] 
    DEFAULT (0)
  , [Scripting__Options_Include__IF__EXISTS__With__Drop] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_Include__IF__EXISTS__With__Drop] 
    DEFAULT (1)
  , [Misc_Display__Output_Show__Scripts__For__Unmatched__Items] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Misc_Display__Output_Show__Scripts__For__Unmatched__Items] 
    DEFAULT (0)
  , [Regular__Expressions_LineReplace__Regex__Options_IgnoreCase_5] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Regular__Expressions_LineReplace__Regex__Options_IgnoreCase_5] 
    DEFAULT (0)
  , [Regular__Expressions_LineReplace__Regex__Options_Multiline_7] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Regular__Expressions_LineReplace__Regex__Options_Multiline_7] 
    DEFAULT (0)
  , [Regular__Expressions_LineReplace__Regex__Options_ExplicitCapture_4] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Regular__Expressions_LineReplace__Regex__Options_ExplicitCapture_4] 
    DEFAULT (0)
  , [Regular__Expressions_LineReplace__Regex__Options_Compiled_1] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Regular__Expressions_LineReplace__Regex__Options_Compiled_1] 
    DEFAULT (1)
  , [Regular__Expressions_LineReplace__Regex__Options_SingleLine_9] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Regular__Expressions_LineReplace__Regex__Options_SingleLine_9] 
    DEFAULT (0)
  , [Regular__Expressions_LineReplace__Regex__Options_IgnorePatternWhiteSpace_6] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Regular__Expressions_LineReplace__Regex__Options_IgnorePatternWhiteSpace_6] 
    DEFAULT (0)
  , [Regular__Expressions_LineReplace__Regex__Options_RightToLeft_8] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Regular__Expressions_LineReplace__Regex__Options_RightToLeft_8] 
    DEFAULT (0)
  , [Regular__Expressions_LineReplace__Regex__Options_ECMAScript_3] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Regular__Expressions_LineReplace__Regex__Options_ECMAScript_3] 
    DEFAULT (0)
  , [Regular__Expressions_LineReplace__Regex__Options_CultureInvariant_2] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Regular__Expressions_LineReplace__Regex__Options_CultureInvariant_2] 
    DEFAULT (0)
  , [Regular__Expressions_LineReplace__Pattern_1] NVARCHAR(MAX) NOT NULL
    CONSTRAINT [dft_tServiceSettings__Regular__Expressions_LineReplace__Pattern_1] 
    DEFAULT ('')
  , [Regular__Expressions_LineReplace__Replacement_2] NVARCHAR(MAX) NOT NULL
    CONSTRAINT [dft_tServiceSettings__Regular__Expressions_LineReplace__Replacement_2] 
    DEFAULT ('')
  , [Regular__Expressions_LineSplit__Regex__Options_IgnoreCase_5] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Regular__Expressions_LineSplit__Regex__Options_IgnoreCase_5] 
    DEFAULT (0)
  , [Regular__Expressions_LineSplit__Regex__Options_Multiline_7] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Regular__Expressions_LineSplit__Regex__Options_Multiline_7] 
    DEFAULT (0)
  , [Regular__Expressions_LineSplit__Regex__Options_ExplicitCapture_4] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Regular__Expressions_LineSplit__Regex__Options_ExplicitCapture_4] 
    DEFAULT (0)
  , [Regular__Expressions_LineSplit__Regex__Options_Compiled_1] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Regular__Expressions_LineSplit__Regex__Options_Compiled_1] 
    DEFAULT (1)
  , [Regular__Expressions_LineSplit__Regex__Options_SingleLine_9] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Regular__Expressions_LineSplit__Regex__Options_SingleLine_9] 
    DEFAULT (0)
  , [Regular__Expressions_LineSplit__Regex__Options_IgnorePatternWhiteSpace_6] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Regular__Expressions_LineSplit__Regex__Options_IgnorePatternWhiteSpace_6] 
    DEFAULT (0)
  , [Regular__Expressions_LineSplit__Regex__Options_RightToLeft_8] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Regular__Expressions_LineSplit__Regex__Options_RightToLeft_8] 
    DEFAULT (0)
  , [Regular__Expressions_LineSplit__Regex__Options_ECMAScript_3] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Regular__Expressions_LineSplit__Regex__Options_ECMAScript_3] 
    DEFAULT (0)
  , [Regular__Expressions_LineSplit__Regex__Options_CultureInvariant_2] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Regular__Expressions_LineSplit__Regex__Options_CultureInvariant_2] 
    DEFAULT (0)
  , [Regular__Expressions_LineSplit__Pattern_3] [NVARCHAR] (MAX) NOT NULL
    CONSTRAINT [dft_tServiceSettings__Regular__Expressions_LineSplit__Pattern_3] 
    DEFAULT ('\r\n|\n')
  , [Regular__Expressions_NameMatch__Regex__Options_IgnoreCase_5] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Regular__Expressions_NameMatch__Regex__Options_IgnoreCase_5] 
    DEFAULT (0)
  , [Regular__Expressions_NameMatch__Regex__Options_Multiline_7] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Regular__Expressions_NameMatch__Regex__Options_Multiline_7] 
    DEFAULT (0)
  , [Regular__Expressions_NameMatch__Regex__Options_ExplicitCapture_4] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Regular__Expressions_NameMatch__Regex__Options_ExplicitCapture_4] 
    DEFAULT (0)
  , [Regular__Expressions_NameMatch__Regex__Options_Compiled_1] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Regular__Expressions_NameMatch__Regex__Options_Compiled_1] 
    DEFAULT (1)
  , [Regular__Expressions_NameMatch__Regex__Options_SingleLine_9] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Regular__Expressions_NameMatch__Regex__Options_SingleLine_9] 
    DEFAULT (0)
  , [Regular__Expressions_NameMatch__Regex__Options_IgnorePatternWhiteSpace_6] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Regular__Expressions_NameMatch__Regex__Options_IgnorePatternWhiteSpace_6] 
    DEFAULT (0)
  , [Regular__Expressions_NameMatch__Regex__Options_RightToLeft_8] [BIT] NOT NULL 
    CONSTRAINT [dft_tServiceSettings__Regular__Expressions_NameMatch__Regex__Options_RightToLeft_8] 
    DEFAULT (0)
  , [Regular__Expressions_NameMatch__Regex__Options_ECMAScript_3] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Regular__Expressions_NameMatch__Regex__Options_ECMAScript_3] 
    DEFAULT (0)
  , [Regular__Expressions_NameMatch__Regex__Options_CultureInvariant_2] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Regular__Expressions_NameMatch__Regex__Options_CultureInvariant_2] 
    DEFAULT (0)
  , [Regular__Expressions_NameMatch__Pattern_4] NVARCHAR(MAX) NOT NULL
    CONSTRAINT [dft_tServiceSettings__Regular__Expressions_NameMatch__Pattern_4] 
    DEFAULT ('')
  , [Scripting__Options_SMO_AgentAlertJob_1] [BIT] NOT NULL 
    CONSTRAINT [dft_tServiceSettings__[Scripting__Options_SMO_AgentAlertJob_1] 
    DEFAULT (0)
  , [Scripting__Options_SMO_AgentJobId_2] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_AgentJobId_2] 
    DEFAULT (0)
  , [Scripting__Options_SMO_AgentNotify_3] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_AgentNotify_3] 
    DEFAULT (0)
  , [Scripting__Options_SMO_AllowSystemObjects_10] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_AllowSystemObjects_10] 
    DEFAULT (0)
  , [Scripting__Options_SMO_AnsiFile_20] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_AnsiFile_20] 
    DEFAULT (0)
  , [Scripting__Options_SMO_AnsiPadding_30] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_AnsiPadding_30] 
    DEFAULT (1)
  , [Scripting__Options_SMO_BatchSize_35] [INT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_BatchSize_35] 
    DEFAULT (100)
  , [Scripting__Options_SMO_Bindings_40] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_Bindings_40] 
    DEFAULT (0)
  , [Scripting__Options_SMO_ChangeTracking_45] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_ChangeTracking_45] 
    DEFAULT (0)
  , [Scripting__Options_SMO_ClusteredIndexes_50] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_ClusteredIndexes_50] 
    DEFAULT (0)
  , [Scripting__Options_SMO_ContinueScriptingOnError_60] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_ContinueScriptingOnError_60] 
    DEFAULT (0)
  , [Scripting__Options_SMO_ConvertUserDefinedDataTypesToBaseType_70] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_ConvertUserDefinedDataTypesToBaseType_70] 
    DEFAULT (0)
  , [Scripting__Options_SMO_DdlBodyOnly_80] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_DdlBodyOnly_80] 
    DEFAULT (0)
  , [Scripting__Options_SMO_DdlHeaderOnly_90] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_DdlHeaderOnly_90] 
    DEFAULT (0)
  , [Scripting__Options_SMO_Default_100] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_Default_100] 
    DEFAULT (0)
  , [Scripting__Options_SMO_DriAll_110] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_DriAll_110] 
    DEFAULT (1)
  , [Scripting__Options_SMO_DriAllConstraints_120] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_DriAllConstraints_120] 
    DEFAULT (0)
  , [Scripting__Options_SMO_DriAllKeys_130] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_DriAllKeys_130] 
    DEFAULT (0)
  , [Scripting__Options_SMO_DriChecks_140] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_DriChecks_140] 
    DEFAULT (0)
  , [Scripting__Options_SMO_DriClustered_150] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_DriClustered_150] 
    DEFAULT (0)
  , [Scripting__Options_SMO_DriDefaults_160] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_DriDefaults_160] 
    DEFAULT (0)
  , [Scripting__Options_SMO_DriForeignKeys_170] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_DriForeignKeys_170] 
    DEFAULT (0)
  , [Scripting__Options_SMO_DriIncludeSystemNames_180] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_DriIncludeSystemNames_180] 
    DEFAULT (0)
  , [Scripting__Options_SMO_DriIndexes_190] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_DriIndexes_190] 
    DEFAULT (0)
  , [Scripting__Options_SMO_DriNonClustered_200] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_DriNonClustered_200] 
    DEFAULT (0)
  , [Scripting__Options_SMO_DriPrimaryKey_210] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_DriPrimaryKey_210] 
    DEFAULT (0)
  , [Scripting__Options_SMO_DriUniqueKeys_220] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_DriUniqueKeys_220] 
    DEFAULT (0)
  , [Scripting__Options_SMO_DriWithNoCheck_230] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_DriWithNoCheck_230] 
    DEFAULT (0)
  , [Scripting__Options_SMO_Encoding_240] [VARCHAR] (50) NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_Encoding_240] 
    DEFAULT ('')
  , [Scripting__Options_SMO_EnforceScriptingOptions_250] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_EnforceScriptingOptions_250] 
    DEFAULT (0)
  , [Scripting__Options_SMO_ExtendedProperties_260] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_ExtendedProperties_260] 
    DEFAULT (0)
  , [Scripting__Options_SMO_FullTextCatalogs_270] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_FullTextCatalogs_270] 
    DEFAULT (1)
  , [Scripting__Options_SMO_FullTextindexes_280] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_FullTextindexes_280] 
    DEFAULT (1)
  , [Scripting__Options_SMO_FullTextStopLists_285] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_FullTextStopLists_285] 
    DEFAULT (1)
  , [Scripting__Options_SMO_IncludeDatabaseContext_290] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_IncludeDatabaseContext_290] 
    DEFAULT (0)
  , [Scripting__Options_SMO_IncludeDatabaseRoleMemberships_291] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_IncludeDatabaseRoleMemberships_291] 
    DEFAULT (1)
  , [Scripting__Options_SMO_IncludeFullTextCatalogRootPath_295] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_IncludeFullTextCatalogRootPath_295] 
    DEFAULT (1)
  , [Scripting__Options_SMO_IncludeHeaders_300] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_IncludeHeaders_300] 
    DEFAULT (0)
  , [Scripting__Options_SMO_IncludeIfNotExists_301] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_IncludeIfNotExists_301] 
    DEFAULT (0)
  , [Scripting__Options_SMO_Indexes_310] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_Indexes_310] 
    DEFAULT (1)
  , [Scripting__Options_SMO_LoginSID_320] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_LoginSID_320] 
    DEFAULT (0)
  , [Scripting__Options_SMO_NoAssemblies_330] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_NoAssemblies_330] 
    DEFAULT (0)
  , [Scripting__Options_SMO_NoCollation_340] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_NoCollation_340] 
    DEFAULT (0)
  , [Scripting__Options_SMO_NoCommandTerminator_350] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_NoCommandTerminator_350] 
    DEFAULT (0)
  , [Scripting__Options_SMO_NoExecuteAs_360] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_NoExecuteAs_360] 
    DEFAULT (0)
  , [Scripting__Options_SMO_NoFilegroup_370] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_NoFilegroup_370] 
    DEFAULT (0)
  , [Scripting__Options_SMO_NoFileStream_373] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_NoFileStream_373] 
    DEFAULT (0)
  , [Scripting__Options_SMO_NoFileStreamColumn_376] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_NoFileStreamColumn_376] 
    DEFAULT (0)
  , [Scripting__Options_SMO_NoIdentities_380] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_NoIdentities_380] 
    DEFAULT (0)
  , [Scripting__Options_SMO_NoIndexPartitioningSchemes_390] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_NoIndexPartitioningSchemes_390] 
    DEFAULT (0)
  , [Scripting__Options_SMO_NoMailProfileAccounts_400] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_NoMailProfileAccounts_400] 
    DEFAULT (0)
  , [Scripting__Options_SMO_NoMailProfilePrincipals_410] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_NoMailProfilePrincipals_410] 
    DEFAULT (0)
  , [Scripting__Options_SMO_NonClusteredIndexes_420] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_NonClusteredIndexes_420] 
    DEFAULT (0)
  , [Scripting__Options_SMO_NoTablePartitioningSchemes_430] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_NoTablePartitioningSchemes_430] 
    DEFAULT (0)
  , [Scripting__Options_SMO_NoVarDecimal_431] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_NoVarDecimal_431] 
    DEFAULT (0)
  , [Scripting__Options_SMO_NoViewColumns_440] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_NoViewColumns_440] 
    DEFAULT (0)
  , [Scripting__Options_SMO_NoXMLNameSpaces_450] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_NoXMLNameSpaces_450] 
    DEFAULT (0)
  , [Scripting__Options_SMO_OptimizerData_460] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_OptimizerData_460] 
    DEFAULT (0)
  , [Scripting__Options_SMO_Permissions_470] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_Permissions_470] 
    DEFAULT (1)
  , [Scripting__Options_SMO_PrimaryObject_480] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_PrimaryObject_480] 
    DEFAULT (1)
  , [Scripting__Options_SMO_SchemaQualify_490] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_SchemaQualify_490] 
    DEFAULT (1)
  , [Scripting__Options_SMO_SchemaQualifyForeignKeysReferences_500] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_SchemaQualifyForeignKeysReferences_500] 
    DEFAULT (1)
  , [Scripting__Options_SMO_ScriptBatchTerminator_502] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_ScriptBatchTerminator_502] 
    DEFAULT (1)
  , [Scripting__Options_SMO_ScriptData_503] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_ScriptData_503] 
    DEFAULT (0)
  , [Scripting__Options_SMO_ScriptDataCompression_505] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_ScriptDataCompression_505] 
    DEFAULT (1)
  , [Scripting__Options_SMO_ScriptDrops_506] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_ScriptDrops_506] 
    DEFAULT (0)
  , [Scripting__Options_SMO_ScriptOwner_508] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_ScriptOwner_508] 
    DEFAULT (1)
  , [Scripting__Options_SMO_ScriptSchema_509] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_ScriptSchema_509] 
    DEFAULT (1)           
  , [Scripting__Options_SMO_Statistics_510] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_Statistics_510] 
    DEFAULT (0)
  , [Scripting__Options_SMO_TimestampToBinary_520] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_TimestampToBinary_520] 
    DEFAULT (0)
  , [Scripting__Options_SMO_TargetServerVersion_530] [INT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_TargetServerVersion_530] 
    DEFAULT (0)
  , [Scripting__Options_SMO_Triggers_540] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_Triggers_540] 
    DEFAULT (1)
  , [Scripting__Options_SMO_WithDependencies_550] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_WithDependencies_550] 
    DEFAULT (0)
  , [Scripting__Options_SMO_XMLIndexes_560] [BIT] NOT NULL
    CONSTRAINT [dft_tServiceSettings__Scripting__Options_SMO_XMLIndexes_560] 
    DEFAULT (1)
  , [Notes] [NVARCHAR] (MAX) NULL  
  , [RecCreatedDt] [DATETIME] NOT NULL 
    CONSTRAINT [dft_tServiceSettings__RecCreatedDt] 
    DEFAULT (CURRENT_TIMESTAMP)
  , CONSTRAINT pk_tServiceSettings__Name
    PRIMARY KEY (Name));

GO
     
IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pLogSQLError' )
 DROP PROCEDURE [SQLCfg].[pLogSQLError];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: log database errors 
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**              
*******************************************************************************/

CREATE PROCEDURE [SQLCfg].[pLogSQLError] 
 ( @ParmString [NVARCHAR] (MAX)
 , @ObjectId [INT])
AS
BEGIN
 DECLARE @ProcName [NVARCHAR] (128)
  , @TextData [NVARCHAR] (MAX)
  , @ErrorNumber [INT]
  , @RollBackMsg [NVARCHAR] (256)
  , @SQLErrorLogId [INT];
  
 SET NOCOUNT ON;

 -- IF Output is 0 then nothing happened here
 SET @TextData = ISNULL('[' + OBJECT_SCHEMA_NAME(@ObjectId) + '].', '') 
               + ISNULL('[' + OBJECT_NAME(@ObjectId) + ']', 'Query:') 
               + CHAR(13) + CHAR(10) 
               + ISNULL(@ParmString,'');
 SET @ErrorNumber = ERROR_NUMBER();
 SET @ProcName = ERROR_PROCEDURE();

 BEGIN TRY
  -- Return if there is no error information to log.
  IF ERROR_NUMBER() IS NULL
   RETURN;

  -- rollback open transaction(s) then log the error
  IF XACT_STATE() <> 0 OR @@TRANCOUNT > 0
   BEGIN
    SET @RollbackMsg = 'Rolling back %d transaction(s) encountered in SQL Configuration Repository database '
                     + DB_NAME()
                     + ' while handling error %d from [%s] when [SQLCfg].[pLogSQLError] called.';
    RAISERROR(@RollbackMsg,1,1,@@TRANCOUNT, @ErrorNumber, @ProcName);
    WHILE @@TRANCOUNT > 0 
     ROLLBACK TRAN;
   END;

  INSERT [SQLCfg].[tSQLErrorLog] 
   ( [UserName] 
   , [ErrorNumber] 
   , [ErrorSeverity]
   , [ErrorState]
   , [ErrorProcedure] 
   , [ErrorLine]
   , [ErrorMessage]
   , [TextData] ) 
  VALUES 
   ( ORIGINAL_LOGIN()
   , ERROR_NUMBER()
   , ERROR_SEVERITY()
   , ERROR_STATE()
   , ERROR_PROCEDURE()
   , ERROR_LINE()
   , ERROR_MESSAGE() 
   , @TextData );

  -- fetch the value of the row just inserted
  SELECT @SQLErrorLogID = SCOPE_IDENTITY();
 END TRY

 BEGIN CATCH
  RAISERROR('Configuration Repository error handler failed to log error: Object [%d]',19, 1, @ObjectId) WITH LOG;
  RETURN -1;
 END CATCH

 -- report an error to the caller but limit details revealed
 RAISERROR ('Data Operation Failure. See SQLClue Configuration Error Log entry [%d] for additional details.', 16,1, @SQLErrorLogId);         

END; 

GO

GRANT EXECUTE ON [SQLCfg].[pLogSQLError] TO [SQLCfgServiceRole];

GO

IF  OBJECT_ID('[SQLCfg].[trgtSQLCfg_Insert_Update_Delete]','TR') IS NOT NULL
 DROP TRIGGER [SQLCfg].[trgtSQLCfg_Insert_Update_Delete]

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Note: changes need to be applied to assy refresh too
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**    11/28/2008     bw                 added validation of LicenseDate               
**    2-5-2010       bw                 add currentVersion
**              
*******************************************************************************/

CREATE TRIGGER [SQLCfg].[trgtSQLCfg_Insert_Update_Delete]
ON [SQLCfg].[tSQLCfg]
FOR INSERT, UPDATE, DELETE
AS
BEGIN

 DECLARE @icount [INT]
  , @dcount [INT]
  , @ucount [INT]
  , @Node  [SQLCfgNode] 
  , @TextData [VARCHAR] (2048);

 SET NOCOUNT ON;

 BEGIN TRY

  SELECT @icount = COUNT(*) FROM [inserted];
  SELECT @dcount = COUNT(*) FROM [deleted];
  SELECT @ucount = COUNT(*) FROM [SQLCfg].[tSQLCfg];

  -- no multi row
  IF @icount > 1 OR @dcount > 1
   BEGIN
    SET @TextData = 'Multi-row [SQLCfg].[tSQLCfg] operations are not permitted';
    RAISERROR (@TextData, 16,1);
   END

  -- only one row in table
  IF @ucount > 1
   BEGIN
    SET @TextData = 'Cannot add multiple [SQLCfg].[tSQLCfg] configurations';
    RAISERROR (@TextData, 16,1);
   END

  -- no delete
  IF @dcount = 1 and @icount = 0 
   BEGIN
    SET @TextData = 'Cannot remove the [SQLCfg].[tSQLCfg] configuration';
    RAISERROR (@TextData, 16,1);
   END

  -- LicenseDate must evaluate to a date
  IF (SELECT ISDATE(CAST([LicenseDate] AS [DATETIME])) FROM inserted) = 0
   BEGIN
    SET @TextData = '[SQLCfg].[tSQLCfg].[LicenseDate] is not a valid date at this locale';
    RAISERROR (@TextData, 16,1);
   END

  SET @Node = 'SQLCfgMetadata|SQLCfg.tSQLCfg';

  -- update
  IF @dcount = 1 and @icount = 1
   BEGIN

    -- add inrow audit info
    UPDATE [SQLCfg].[tSQLCfg]
    SET [RecUpdatedDt] = CURRENT_TIMESTAMP
     , [RecUpdatedUser] = ORIGINAL_LOGIN();

    -- record the update to change
    INSERT [SQLCfg].[tChange]
     ( [Node]  
     , [Version]
     , [Action] 
     , [Definition]
     , [DefinitionDt] )
    SELECT 
       @Node
     , [SQLCfg].[fLastVersion](@Node) + 1
     , 'Modify'
     , 'UPDATE [SQLCfg].[tSQLCfg]
SET [LicensedCompany] = ''' + i.[LicensedCompany] + '''
 , [LicensedUser] = ''' + i.[LicensedUser] + '''
 , [LicenseCode] = ''' + i.[LicenseCode] + '''
 , [LicensedInstanceCount] = ' + CAST(i.[LicensedInstanceCount] AS [VARCHAR] (10)) + '
 , [LicenseDate] = ''' + i.[LicenseDate] + '''
 , [CurrentVersion] = ''' + i.[CurrentVersion] + '''
 , [RecCreatedDt] = ''' + CAST(i.[RecCreatedDt] AS [VARCHAR] (20)) + '''
 , [RecCreatedUser] = ''' + i.[RecCreatedUser] + '''
 , [RecUpdatedDt] = ''' + CAST(i.[RecUpdatedDt] AS [VARCHAR] (20)) + '''
 , [RecUpdatedUser] = ''' + i.[RecUpdatedUser] + '''
WHERE [LicensedCompany] = ''' + d.[LicensedCompany] + '''
AND [LicensedUser] = ''' + d.[LicensedUser] + '''
AND [LicenseCode] = ''' + d.[LicenseCode] + '''
AND [LicensedInstanceCount] = ' + CAST(d.[LicensedInstanceCount] AS [VARCHAR] (10)) + '
AND [LicenseDate] = ''' + d.[LicenseDate] + '''
AND [CurrentVersion] = ''' + d.[CurrentVersion] + '''
AND [RecCreatedDt] = ''' + CAST(d.[RecCreatedDt] AS [VARCHAR] (20)) + '''
AND [RecCreatedUser] = ''' + d.[RecCreatedUser] + '''
AND [RecUpdatedDt] = ''' + CAST(d.[RecUpdatedDt] AS [VARCHAR] (20)) + '''
AND [RecUpdatedUser] = ''' + d.[RecUpdatedUser] + '''
AND ORIGINAL_LOGIN() = ''' + ORIGINAL_LOGIN() + ''''
     , CURRENT_TIMESTAMP
    FROM [inserted] i
    CROSS JOIN [deleted] d;

   END;      

  -- insert
  IF @dcount = 0 and @icount = 1
   BEGIN
    -- log the insert to change
    INSERT [SQLCfg].[tChange]
     ( [Node]  
     , [Version]
     , [Action] 
     , [Definition]
     , [DefinitionDt] )
    SELECT 
       @Node
     , [SQLCfg].[fLastVersion](@Node) + 1
     , 'Include'
     , 'INSERT [SQLCfg].[tSQLCfg]
 ( [LicensedCompany] 
 , [LicensedUser] 
 , [LicenseCode]
 , [LicensedInstanceCount]
 , [LicenseDate] 
 , [CurrentVersion]
 , [RecCreatedDt] 
 , [RecCreatedUser] 
 , [RecUpdatedDt] 
 , [RecUpdatedUser] )
SELECT ''' + i.[LicensedCompany] + '''
 , ''' + i.[LicensedUser] + '''
 , ''' + i.[LicenseCode] + '''
 , ' + CAST(i.[LicensedInstanceCount] AS [VARCHAR] (10)) + '
 , ''' + i.[LicenseDate] + '''
 , ''' + i.[CurrentVersion] + '''
 , ''' + CAST(i.[RecCreatedDt] AS [VARCHAR] (20)) + '''
 , ''' + i.[RecCreatedUser] + '''
 , ''' + CAST(i.[RecUpdatedDt] AS [VARCHAR] (20)) + '''
 , ''' + i.[RecUpdatedUser] + ''''
     , CURRENT_TIMESTAMP
    FROM [inserted] i;

   END;

 END TRY 

 BEGIN CATCH

  EXEC [SQLCfg].[pLogSQLError] @TextData, @@PROCID;

 END CATCH 

END;

GO 

IF  OBJECT_ID('[SQLCfg].[trgtInstance_Insert_Update_Delete]','TR') IS NOT NULL
 DROP TRIGGER [SQLCfg].[trgtInstance_Insert_Update_Delete]

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**    11/10/2009     bw                 remove QueryBaseline references 
**              
*******************************************************************************/

CREATE TRIGGER [SQLCfg].[trgtInstance_Insert_Update_Delete]
ON [SQLCfg].[tInstance]
FOR INSERT, UPDATE, DELETE
AS
BEGIN

 DECLARE @NodeBase [NVARCHAR](50) 
  , @TextData [VARCHAR] (2048);

 SET NOCOUNT ON;

 BEGIN TRY

  SET @NodeBase = 'SQLCfgMetadata|SQLCfg.tInstance|';

  -- deletes
  INSERT [SQLCfg].[tChange]
   ( [Node]
   , [Version]
   , [Action] 
   , [Definition]
   , [DefinitionDt] )
  SELECT
     @NodeBase + [Name]
   , [SQLCfg].[fLastVersion](@Nodebase + [Name]) + 1
   , 'Remove'
   , 'DELETE [SQLCfg].[tInstance]
WHERE [Name] = ''' + [Name] + '''
AND [ActiveDirectory] = ' + CAST([ActiveDirectory] AS [CHAR] (1)) + ' 
AND [Audits] = ' + CAST([Audits] AS [CHAR] (1)) + ' 
AND [BackupDevices] = ' + CAST([BackupDevices] AS [CHAR] (1)) + ' 
AND [Configuration] = ' + CAST([Configuration] AS [CHAR] (1)) + ' 
AND [Credentials] = ' + CAST([Credentials] AS [CHAR] (1)) + ' 
AND [CryptographicProviders] = ' + CAST([CryptographicProviders] AS [CHAR] (1)) + ' 
AND [Databases] = ' + CAST([Databases] AS [CHAR] (1)) + ' 
AND [EndPoints] = ' + CAST([EndPoints] AS [CHAR] (1)) + '
AND [FullTextService] = ' + CAST([FullTextService] AS [CHAR] (1)) + '
AND [Information] = ' + CAST([Information] AS [CHAR] (1)) + '
AND [JobServer] = ' + CAST([JobServer] AS [CHAR] (1)) + ' 
AND [Logins] = ' + CAST([Logins] AS [CHAR] (1)) + '
AND [LinkedServers] = ' + CAST([LinkedServers] AS [CHAR] (1)) + '
AND [Mail] = ' + CAST([Mail] AS [CHAR] (1)) + ' 
AND [ProxyAccount] = ' + CAST([ProxyAccount] AS [CHAR] (1)) + '
AND [ResourceGovernor] = ' + CAST([ResourceGovernor] AS [CHAR] (1)) + '
AND [Roles] = ' + CAST([Roles] AS [CHAR] (1)) + '
AND [ServerAuditSpecifications] = ' + CAST([ServerAuditSpecifications] AS [CHAR] (1)) + '
AND [Settings] = ' + CAST([Settings] AS [CHAR] (1)) + '
AND [Triggers] = ' + CAST([Triggers] AS [CHAR] (1)) + '
AND [UserDefinedMessages] = ' + CAST([UserDefinedMessages] AS [CHAR] (1)) + '
AND [RecCreatedDt] = ''' + CAST([RecCreatedDt] AS [VARCHAR] (20)) + '''
AND [RecCreatedUser] = ''' + [RecCreatedUser] + '''
AND [RecUpdatedDt] = ''' + CAST([RecUpdatedDt] AS [VARCHAR] (20)) + '''
AND [RecUpdatedUser] = ''' + [RecUpdatedUser] + ''''
   , CURRENT_TIMESTAMP 
  FROM [deleted] 
  WHERE Name NOT IN (SELECT Name FROM [inserted]);
  
  -- disable any schedules that belong to a deleted instance
  Update s
  SET [IsActive] = 0
  FROM [SQLCfg].[tSchedule] s
  JOIN [deleted] d
  on s.[InstanceName] = d.[Name]
  WHERE Name NOT IN (SELECT Name from [inserted]);
    
  -- updates
  --- add audit info
  UPDATE s
  SET [RecUpdatedDt] = CURRENT_TIMESTAMP
   , [RecUpdatedUser] = ORIGINAL_LOGIN()
  FROM [SQLCfg].[tInstance] s
  JOIN [inserted] i 
  ON s.[Name] = i.[Name]
  JOIN [deleted] d
  ON i.[Name] = d.[Name];

  -- record the change
  INSERT [SQLCfg].[tChange]
   ( [Node]
   , [Version]
   , [Action] 
   , [Definition]
   , [DefinitionDt] )
  SELECT
     @NodeBase + i.[Name]
   , [SQLCfg].[fLastVersion](@Nodebase + i.[Name]) + 1
   , 'Modify'
   , 'UPDATE [SQLCfg].[tInstance]
SET [Name] = ''' + i.[Name] + '''
 , [ActiveDirectory] = ' + CAST(i.[ActiveDirectory] AS [CHAR] (1)) + ' 
 , [Audits] = ' + CAST(i.[Audits] AS [CHAR] (1)) + ' 
 , [BackupDevices] = ' + CAST(i.[BackupDevices] AS [CHAR] (1)) + ' 
 , [Configuration] = ' + CAST(i.[Configuration] AS [CHAR] (1)) + ' 
 , [Credentials] = ' + CAST(i.[Credentials] AS [CHAR] (1)) + ' 
 , [CryptographicProviders] = ' + CAST(i.[CryptographicProviders] AS [CHAR] (1)) + ' 
 , [Databases] = ' + CAST(i.[Databases] AS [CHAR] (1)) + ' 
 , [EndPoints] = ' + CAST(i.[EndPoints] AS [CHAR] (1)) + '
 , [FullTextService] = ' + CAST(i.[FullTextService] AS [CHAR] (1)) + '
 , [Information] = ' + CAST(i.[Information] AS [CHAR] (1)) + '
 , [JobServer] = ' + CAST(i.[JobServer] AS [CHAR] (1)) + ' 
 , [Logins] = ' + CAST(i.[Logins] AS [CHAR] (1)) + '
 , [LinkedServers] = ' + CAST(i.[LinkedServers] AS [CHAR] (1)) + '
 , [Mail] = ' + CAST(i.[Mail] AS [CHAR] (1)) + ' 
 , [ProxyAccount] = ' + CAST(i.[ProxyAccount] AS [CHAR] (1)) + '
 , [ResourceGovernor] = ' + CAST(i.[ResourceGovernor] AS [CHAR] (1)) + '
 , [Roles] = ' + CAST(i.[Roles] AS [CHAR] (1)) + '
 , [ServerAuditSpecifications] = ' + CAST(i.[ServerAuditSpecifications] AS [CHAR] (1)) + '
 , [Settings] = ' + CAST(i.[Settings] AS [CHAR] (1)) + '
 , [Triggers] = ' + CAST(i.[Triggers] AS [CHAR] (1)) + '
 , [UserDefinedMessages] = ' + CAST(i.[UserDefinedMessages] AS [CHAR] (1)) + '
 , [RecCreatedDt] = ''' + CAST(i.[RecCreatedDt] AS [VARCHAR] (20)) + '''
 , [RecCreatedUser] = ''' + i.[RecCreatedUser] + '''
 , [RecUpdatedDt] = ''' + CAST(i.[RecUpdatedDt] AS [VARCHAR] (20)) + '''
 , [RecUpdatedUser] = ''' + i.[RecUpdatedUser] + '''
WHERE [Name] = ''' + d.[Name] + '''
AND [ActiveDirectory] = ' + CAST(d.[ActiveDirectory] AS [CHAR] (1)) + ' 
AND [Audits] = ' + CAST(d.[Audits] AS [CHAR] (1)) + ' 
AND [BackupDevices] = ' + CAST(d.[BackupDevices] AS [CHAR] (1)) + ' 
AND [Configuration] = ' + CAST(d.[Configuration] AS [CHAR] (1)) + ' 
AND [Credentials] = ' + CAST(d.[Credentials] AS [CHAR] (1)) + ' 
AND [CryptographicProviders] = ' + CAST(d.[CryptographicProviders] AS [CHAR] (1)) + ' 
AND [Databases] = ' + CAST(d.[Databases] AS [CHAR] (1)) + ' 
AND [EndPoints] = ' + CAST(d.[EndPoints] AS [CHAR] (1)) + '
AND [FullTextService] = ' + CAST(d.[FullTextService] AS [CHAR] (1)) + '
AND [Information] = ' + CAST(d.[Information] AS [CHAR] (1)) + '
AND [JobServer] = ' + CAST(d.[JobServer] AS [CHAR] (1)) + ' 
AND [Logins] = ' + CAST(d.[Logins] AS [CHAR] (1)) + '
AND [LinkedServers] = ' + CAST(d.[LinkedServers] AS [CHAR] (1)) + '
AND [Mail] = ' + CAST(d.[Mail] AS [CHAR] (1)) + ' 
AND [ProxyAccount] = ' + CAST(d.[ProxyAccount] AS [CHAR] (1)) + '
AND [ResourceGovernor] = ' + CAST(d.[ResourceGovernor] AS [CHAR] (1)) + '
AND [Roles] = ' + CAST(d.[Roles] AS [CHAR] (1)) + '
AND [ServerAuditSpecifications] = ' + CAST(d.[ServerAuditSpecifications] AS [CHAR] (1)) + '
AND [Settings] = ' + CAST(d.[Settings] AS [CHAR] (1)) + '
AND [Triggers] = ' + CAST(d.[Triggers] AS [CHAR] (1)) + '
AND [UserDefinedMessages] = ' + CAST(d.[UserDefinedMessages] AS [CHAR] (1)) + '
AND [RecCreatedDt] = ''' + CAST(d.[RecCreatedDt] AS [VARCHAR] (20)) + '''
AND [RecCreatedUser] = ''' + d.[RecCreatedUser] + '''
AND [RecUpdatedDt] = ''' + CAST(d.[RecUpdatedDt] AS [VARCHAR] (20)) + '''
AND [RecUpdatedUser] = ''' + d.[RecUpdatedUser] + ''''
   , CURRENT_TIMESTAMP
  FROM [inserted] i 
  JOIN [deleted] d
  ON i.[Name] = d.[Name];

  -- inserts
  INSERT [SQLCfg].[tChange]
   ( [Node]
   , [Version]
   , [Action] 
   , [Definition]
   , [DefinitionDt] )
  SELECT
     @NodeBase + [Name]
   , [SQLCfg].[fLastVersion](@Nodebase + [Name]) + 1
   , 'Include'
   , 'INSERT [SQLCfg].[tInstance]
 ( [Name]
 , [ActiveDirectory]
 , [Audits]
 , [BackupDevices]
 , [Configuration]
 , [Credentials]
 , [CryptographicProviders]
 , [Databases]
 , [EndPoints]
 , [FullTextService]
 , [Information]
 , [JobServer]
 , [Logins]
 , [LinkedServers]
 , [Mail]
 , [ProxyAccount]
 , [ResourceGovernor]
 , [Roles]
 , [ServerAuditSpecifications]
 , [Settings]
 , [Triggers]
 , [UserDefinedMessages]
 , [RecCreatedDt] 
 , [RecCreatedUser]
 , [RecUpdatedDt]
 , [RecUpdatedUser] )
SELECT [Name] = ''' + [Name] + '''
AND [ActiveDirectory] = ' + CAST([ActiveDirectory] AS [CHAR] (1)) + ' 
AND [Audits] = ' + CAST([Audits] AS [CHAR] (1)) + ' 
AND [BackupDevices] = ' + CAST([BackupDevices] AS [CHAR] (1)) + ' 
AND [Configuration] = ' + CAST([Configuration] AS [CHAR] (1)) + ' 
AND [Credentials] = ' + CAST([Credentials] AS [CHAR] (1)) + ' 
AND [CryptographicProviders] = ' + CAST([CryptographicProviders] AS [CHAR] (1)) + ' 
AND [Databases] = ' + CAST([Databases] AS [CHAR] (1)) + ' 
AND [EndPoints] = ' + CAST([EndPoints] AS [CHAR] (1)) + '
AND [FullTextService] = ' + CAST([FullTextService] AS [CHAR] (1)) + '
AND [Information] = ' + CAST([Information] AS [CHAR] (1)) + '
AND [JobServer] = ' + CAST([JobServer] AS [CHAR] (1)) + ' 
AND [Logins] = ' + CAST([Logins] AS [CHAR] (1)) + '
AND [LinkedServers] = ' + CAST([LinkedServers] AS [CHAR] (1)) + '
AND [Mail] = ' + CAST([Mail] AS [CHAR] (1)) + ' 
AND [ProxyAccount] = ' + CAST([ProxyAccount] AS [CHAR] (1)) + '
AND [ResourceGovernor] = ' + CAST([ResourceGovernor] AS [CHAR] (1)) + '
AND [Roles] = ' + CAST([Roles] AS [CHAR] (1)) + '
AND [ServerAuditSpecifications] = ' + CAST([ServerAuditSpecifications] AS [CHAR] (1)) + '
AND [Settings] = ' + CAST([Settings] AS [CHAR] (1)) + '
AND [Triggers] = ' + CAST([Triggers] AS [CHAR] (1)) + '
AND [UserDefinedMessages] = ' + CAST([UserDefinedMessages] AS [CHAR] (1)) + '
AND [RecCreatedDt] = ''' + CAST([RecCreatedDt] AS [VARCHAR] (20)) + '''
AND [RecCreatedUser] = ''' + [RecCreatedUser] + '''
AND [RecUpdatedDt] = ''' + CAST([RecUpdatedDt] AS [VARCHAR] (20)) + '''
AND [RecUpdatedUser] = ''' + [RecUpdatedUser] + ''''
   , CURRENT_TIMESTAMP
  FROM [inserted] 
  WHERE [Name] NOT IN (SELECT [Name] FROM [deleted]);

 END TRY

 BEGIN CATCH

  EXEC [SQLCfg].[pLogSQLError] @TextData, @@PROCID;

 END CATCH 

END;

GO 

IF  OBJECT_ID('[SQLCfg].[trgtJobServer_Insert_Update_Delete]','TR') IS NOT NULL
 DROP TRIGGER [SQLCfg].[trgtJobServer_Insert_Update_Delete];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**              
*******************************************************************************/

CREATE TRIGGER [SQLCfg].[trgtJobServer_Insert_Update_Delete]
ON [SQLCfg].[tJobServer]
FOR INSERT, UPDATE, DELETE
AS
BEGIN

 DECLARE @NodeBase [NVARCHAR](50) 
  , @TextData [VARCHAR] (2048);

 SET NOCOUNT ON;

 BEGIN TRY

  SET @NodeBase = 'SQLCfgMetadata|SQLCfg.tJobServer|';

  -- deletes
  INSERT [SQLCfg].[tChange]
   ( [Node]
   , [Version]
   , [Action] 
   , [Definition]
   , [DefinitionDt] )
  SELECT
     @NodeBase + [InstanceName]
   , [SQLCfg].[fLastVersion](@Nodebase + [InstanceName]) + 1
   , 'Remove'
   , 'DELETE [SQLCfg].[tJobServer]
WHERE [InstanceName] = ''' + [InstanceName] + '''
AND [Alerts] = ' + CAST([Alerts] AS [CHAR] (1)) + ' 
AND [AlertSystem] = ' + CAST([AlertSystem] AS [CHAR] (1)) + ' 
AND [Jobs] = ' + CAST([Jobs] AS [CHAR] (1)) + ' 
AND [Operators] = ' + CAST([Operators] AS [CHAR] (1)) + ' 
AND [ProxyAccounts] = ' + CAST([ProxyAccounts] AS [CHAR] (1)) + ' 
AND [TargetServers] = ' + CAST([TargetServers] AS [CHAR] (1)) + '
AND [RecCreatedDt] = ''' + CAST([RecCreatedDt] AS [VARCHAR] (20)) + '''
AND [RecCreatedUser] = ''' + [RecCreatedUser] + '''
AND [RecUpdatedDt] = ''' + CAST([RecUpdatedDt] AS [VARCHAR] (20)) + '''
AND [RecUpdatedUser] = ''' + [RecUpdatedUser] + ''''
   , CURRENT_TIMESTAMP
  FROM [deleted] 
  WHERE [InstanceName] NOT IN (SELECT [InstanceName] FROM [inserted]);

  -- updates
  --- add audit info
  UPDATE s
  SET [RecUpdatedDt] = CURRENT_TIMESTAMP
   , [RecUpdatedUser] = ORIGINAL_LOGIN()
  FROM [SQLCfg].[tJobServer] s
  JOIN [inserted] i 
  ON s.[InstanceName] = i.[InstanceName]
  JOIN [deleted] d
  ON i.[InstanceName] = d.[InstanceName];

  -- record the change
  INSERT [SQLCfg].[tChange]
   ( [Node]
   , [Version]
   , [Action] 
   , [Definition]
   , [DefinitionDt] )
  SELECT
     @NodeBase + i.[InstanceName]
   , [SQLCfg].[fLastVersion](@Nodebase + i.[InstanceName]) + 1
   , 'Modify'
   , 'UPDATE [SQLCfg].[tJobServer]
SET [InstanceName] = ''' + i.[InstanceName] + '''
 , [Alerts] = ' + CAST(i.[Alerts] AS [CHAR] (1)) + ' 
 , [AlertSystem] = ' + CAST(i.[AlertSystem] AS [CHAR] (1)) + ' 
 , [Jobs] = ' + CAST(i.[Jobs] AS [CHAR] (1)) + ' 
 , [Operators] = ' + CAST(i.[Operators] AS [CHAR] (1)) + ' 
 , [ProxyAccounts] = ' + CAST(i.[ProxyAccounts] AS [CHAR] (1)) + ' 
 , [TargetServers] = ' + CAST(i.[TargetServers] AS [CHAR] (1)) + '
 , [RecCreatedDt] = ''' + CAST(i.[RecCreatedDt] AS [VARCHAR] (20)) + '''
 , [RecCreatedUser] = ''' + i.[RecCreatedUser] + '''
 , [RecUpdatedDt] = ''' + CAST(i.[RecUpdatedDt] AS [VARCHAR] (20)) + '''
 , [RecUpdatedUser] = ''' + i.[RecUpdatedUser] + '''
WHERE [InstanceName] = ''' + d.[InstanceName] + '''
AND [Alerts] = ' + CAST(d.[Alerts] AS [CHAR] (1)) + ' 
AND [AlertSystem] = ' + CAST(d.[AlertSystem] AS [CHAR] (1)) + ' 
AND [Jobs] = ' + CAST(d.[Jobs] AS [CHAR] (1)) + ' 
AND [Operators] = ' + CAST(d.[Operators] AS [CHAR] (1)) + ' 
AND [ProxyAccounts] = ' + CAST(d.[ProxyAccounts] AS [CHAR] (1)) + ' 
AND [TargetServers] = ' + CAST(d.[TargetServers] AS [CHAR] (1)) + '
AND [RecCreatedDt] = ''' + CAST(d.[RecCreatedDt] AS [VARCHAR] (20)) + '''
AND [RecCreatedUser] = ''' + d.[RecCreatedUser] + '''
AND [RecUpdatedDt] = ''' + CAST(d.[RecUpdatedDt] AS [VARCHAR] (20)) + '''
AND [RecUpdatedUser] = ''' + d.[RecUpdatedUser] + ''''
   , CURRENT_TIMESTAMP
  FROM [inserted] i 
  JOIN [deleted] d
  ON i.[InstanceName] = d.[InstanceName];

  -- inserts

  INSERT [SQLCfg].[tChange]
   ( [Node]
   , [Version]
   , [Action] 
   , [Definition]
   , [DefinitionDt] )
  SELECT
     @NodeBase + [InstanceName]
   , [SQLCfg].[fLastVersion](@Nodebase + [InstanceName]) + 1
   , 'Include'
   , 'INSERT [SQLCfg].[tJobServer]
 ( [InstanceName]
 , [Alerts]
 , [AlertSystem]
 , [Jobs]
 , [ProxyAccounts]
 , [TargetServers]
 , [RecCreatedDt] 
 , [RecCreatedUser]
 , [RecUpdatedDt]
 , [RecUpdatedUser] )
SELECT [InstanceName] = ''' + [InstanceName] + '''
AND [Alerts] = ' + CAST([Alerts] AS [CHAR] (1)) + ' 
AND [AlertSystem] = ' + CAST([AlertSystem] AS [CHAR] (1)) + ' 
AND [Jobs] = ' + CAST([Jobs] AS [CHAR] (1)) + ' 
AND [Operators] = ' + CAST([Operators] AS [CHAR] (1)) + ' 
AND [ProxyAccounts] = ' + CAST([ProxyAccounts] AS [CHAR] (1)) + ' 
AND [TargetServers] = ' + CAST([TargetServers] AS [CHAR] (1)) + '
AND [RecCreatedDt] = ''' + CAST([RecCreatedDt] AS [VARCHAR] (20)) + '''
AND [RecCreatedUser] = ''' + [RecCreatedUser] + '''
AND [RecUpdatedDt] = ''' + CAST([RecUpdatedDt] AS [VARCHAR] (20)) + '''
AND [RecUpdatedUser] = ''' + [RecUpdatedUser] + ''''
   , CURRENT_TIMESTAMP
  FROM [inserted] 
  WHERE [InstanceName] NOT IN (SELECT [InstanceName] FROM [deleted]);

 END TRY 

 BEGIN CATCH

  EXEC [SQLCfg].[pLogSQLError] @TextData, @@PROCID;

 END CATCH 

END;

GO 

IF  OBJECT_ID('[SQLCfg].[trgtDb_Insert_Update_Delete]','TR') IS NOT NULL
 DROP TRIGGER [SQLCfg].[trgtDb_Insert_Update_Delete];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**              
*******************************************************************************/

CREATE TRIGGER [SQLCfg].[trgtDb_Insert_Update_Delete]
ON [SQLCfg].[tDb]
FOR INSERT, UPDATE, DELETE
AS
BEGIN

 DECLARE @NodeBase [NVARCHAR] (50) 
  , @TextData [VARCHAR] (2048);

 SET NOCOUNT ON;

 BEGIN TRY

  SET @NodeBase =  'SQLCfgMetadata|SQLCfg.tDb|';

  -- deletes
  INSERT [SQLCfg].[tChange]
   ( [Node]  
   , [Version]
   , [Action]
   , [Definition]
   , [DefinitionDt] )
  SELECT 
     @NodeBase + d.[InstanceName] + '|' + d.[Name]
   , [SQLCfg].[fLastVersion](@NodeBase + d.[InstanceName] + '|' + d.[Name]) + 1
   , 'Remove'
   , 'DELETE [SQLCfg].[tDb]
WHERE [Name] = ''' + d.[Name] + '''
AND [InstanceName] = ''' + d.[InstanceName] + ''' 
AND [ActiveDirectory] = ' + CAST(d.[ActiveDirectory] AS [CHAR] (1)) + ' 
AND [ApplicationRoles] = ' + CAST(d.[ApplicationRoles] AS [CHAR] (1)) + ' 
AND [Assemblies] = ' + CAST(d.[Assemblies] AS [CHAR] (1)) + ' 
AND [AsymmetricKeys] = ' + CAST(d.[AsymmetricKeys] AS [CHAR] (1)) + ' 
AND [Certificates] = ' + CAST(d.[Certificates] AS [CHAR] (1)) + '
AND [DatabaseAuditSpecifications] = ' + CAST(d.[DatabaseAuditSpecifications] AS [CHAR] (1)) + ' 
AND [DatabaseOptions] = ' + CAST(d.[DatabaseOptions] AS [CHAR] (1)) + ' 
AND [Defaults] = ' + CAST(d.[Defaults] AS [CHAR] (1)) + '
AND [FullTextCatalogs] = ' + CAST(d.[FullTextCatalogs] AS [CHAR] (1)) + '
AND [FullTextStopLists] = ' + CAST(d.[FullTextStopLists] AS [CHAR] (1)) + '
AND [PartitionFunctions] = ' + CAST(d.[PartitionFunctions] AS [CHAR] (1)) + ' 
AND [PartitionSchemes] = ' + CAST(d.[PartitionSchemes] AS [CHAR] (1)) + '
AND [PlanGuides] = ' + CAST(d.[PlanGuides] AS [CHAR] (1)) + '
AND [Roles] = ' + CAST(d.[Roles] AS [CHAR] (1)) + '
AND [Rules] = ' + CAST(d.[Rules] AS [CHAR] (1)) + '
AND [Schemas] = ' + CAST(d.[Schemas] AS [CHAR] (1)) + '
AND [ServiceBroker] = ' + CAST(d.[ServiceBroker] AS [CHAR] (1)) + '
AND [StoredProcedures] = ' + CAST(d.[StoredProcedures] AS [CHAR] (1)) + '
AND [SymmetricKeys] = ' + CAST(d.[SymmetricKeys] AS [CHAR] (1)) + '
AND [Synonyms] = ' + CAST(d.[Synonyms] AS [CHAR] (1)) + '
AND [Tables] = ' + CAST(d.[Tables] AS [CHAR] (1)) + '
AND [Triggers] = ' + CAST(d.[Triggers] AS [CHAR] (1)) + '
AND [UserDefinedAggregates] = ' + CAST(d.[UserDefinedAggregates] AS [CHAR] (1)) + '
AND [UserDefinedDataTypes] = ' + CAST(d.[UserDefinedDataTypes] AS [CHAR] (1)) + '
AND [UserDefinedFunctions] = ' + CAST(d.[UserDefinedFunctions] AS [CHAR] (1)) + '
AND [UserDefinedTableTypes] = ' + CAST(d.[UserDefinedTableTypes] AS [CHAR] (1)) + '
AND [UserDefinedTypes] = ' + CAST(d.[UserDefinedTypes] AS [CHAR] (1)) + '
AND [Users] = ' + CAST(d.[Users] AS [CHAR] (1)) + '
AND [Views] = ' + CAST(d.[Views] AS [CHAR] (1)) + '
AND [XMLSchemaCollections] = ' + CAST(d.[XMLSchemaCollections] AS [CHAR] (1)) + '
AND [RecCreatedDt] = ''' + CAST(d.[RecCreatedDt] AS [VARCHAR] (20)) + '''
AND [RecCreatedUser] = ''' + d.[RecCreatedUser] + '''
AND [RecUpdatedDt] = ''' + CAST(d.[RecUpdatedDt] AS [VARCHAR] (20)) + '''
AND [RecUpdatedUser] = ''' + d.[RecUpdatedUser] + ''''
   , CURRENT_TIMESTAMP
  FROM [deleted] d
  WHERE NOT EXISTS (SELECT * FROM [inserted]
                    WHERE [Name] = d.[Name]
                    AND [InstanceName] = d.[InstanceName]);

  -- updates
  --- add audit info
  UPDATE db
  SET [RecUpdatedDt] = CURRENT_TIMESTAMP
   , [RecUpdatedUser] = ORIGINAL_LOGIN()
  FROM [SQLCfg].[tDb] db
  JOIN [inserted] i 
  ON db.[Name] = i.[Name]
  AND db.[InstanceName] = i.[InstanceName]
  JOIN [deleted] d
  ON i.[Name] = d.[Name]
  AND i.[InstanceName] = d.[InstanceName];

  -- record the change
  INSERT [SQLCfg].[tChange]
   ( [Node]  
   , [Version]
   , [Action]
   , [Definition]
   , [DefinitionDt] )
  SELECT 
     @NodeBase + i.[InstanceName] + '|' + i.[Name]
   , [SQLCfg].[fLastVersion](@NodeBase + i.[InstanceName] + '|' + i.[Name]) + 1
   , 'Modify'
   , 'UPDATE [SQLCfg].[tDb]
SET [Name] = ''' + i.[Name] + '''
 , [InstanceName] = ''' + i.[InstanceName] + ''' 
 , [ActiveDirectory] = ' + CAST(i.[ActiveDirectory] AS [CHAR] (1)) + ' 
 , [ApplicationRoles] = ' + CAST(i.[ApplicationRoles] AS [CHAR] (1)) + ' 
 , [Assemblies] = ' + CAST(i.[Assemblies] AS [CHAR] (1)) + ' 
 , [AsymmetricKeys] = ' + CAST(i.[AsymmetricKeys] AS [CHAR] (1)) + ' 
 , [Certificates] = ' + CAST(i.[Certificates] AS [CHAR] (1)) + '
 , [DatabaseAuditSpecifications] = ' + CAST(i.[DatabaseAuditSpecifications] AS [CHAR] (1)) + '
 , [DatabaseOptions] = ' + CAST(i.[DatabaseOptions] AS [CHAR] (1)) + '
 , [Defaults] = ' + CAST(i.[Defaults] AS [CHAR] (1)) + '
 , [FullTextCatalogs] = ' + CAST(i.[FullTextCatalogs] AS [CHAR] (1)) + ' 
 , [FullTextStopLists] = ' + CAST(i.[FullTextStopLists] AS [CHAR] (1)) + ' 
 , [PartitionFunctions] = ' + CAST(i.[PartitionFunctions] AS [CHAR] (1)) + '
 , [PartitionSchemes] = ' + CAST(i.[PartitionSchemes] AS [CHAR] (1)) + '
 , [PlanGuides] = ' + CAST(i.[PlanGuides] AS [CHAR] (1)) + '
 , [Roles] = ' + CAST(i.[Roles] AS [CHAR] (1)) + '
 , [Rules] = ' + CAST(i.[Rules] AS [CHAR] (1)) + '
 , [Schemas] = ' + CAST(i.[Schemas] AS [CHAR] (1)) + '
 , [ServiceBroker] = ' + CAST(i.[ServiceBroker] AS [CHAR] (1)) + '
 , [StoredProcedures] = ' + CAST(i.[StoredProcedures] AS [CHAR] (1)) + ' 
 , [SymmetricKeys] = ' + CAST(i.[SymmetricKeys] AS [CHAR] (1)) + ' 
 , [Synonyms] = ' + CAST(i.[Synonyms] AS [CHAR] (1)) + '
 , [Tables] = ' + CAST(i.[Tables] AS [CHAR] (1)) + '
 , [Triggers] = ' + CAST(i.[Triggers] AS [CHAR] (1)) + '
 , [UserDefinedAggregates] = ' + CAST(i.[UserDefinedAggregates] AS [CHAR] (1)) + '
 , [UserDefinedDataTypes] = ' + CAST(i.[UserDefinedDataTypes] AS [CHAR] (1)) + '
 , [UserDefinedFunctions] = ' + CAST(i.[UserDefinedFunctions] AS [CHAR] (1)) + '
 , [UserDefinedTableTypes] = ' + CAST(i.[UserDefinedTableTypes] AS [CHAR] (1)) + '
 , [UserDefinedTypes] = ' + CAST(i.[UserDefinedTypes] AS [CHAR] (1)) + '
 , [Users] = ' + CAST(i.[Users] AS [CHAR] (1)) + '
 , [Views] = ' + CAST(i.[Views] AS [CHAR] (1)) + '
 , [XMLSchemaCollections] = ' + CAST(i.[XMLSchemaCollections] AS [CHAR] (1)) + '
 , [RecCreatedDt] = ''' + CAST(i.[RecCreatedDt] AS [VARCHAR] (20)) + '''
 , [RecCreatedUser] = ''' + i.[RecCreatedUser] + '''
 , [RecUpdatedDt] = ''' + CAST(i.[RecUpdatedDt] AS [VARCHAR] (20)) + '''
 , [RecUpdatedUser] = ''' + i.[RecUpdatedUser] + '''
WHERE [Name] = ''' + d.[Name] + '''
AND [InstanceName] = ''' + d.[InstanceName] + ''' 
AND [ActiveDirectory] = ' + CAST(d.[ActiveDirectory] AS [CHAR] (1)) + ' 
AND [ApplicationRoles] = ' + CAST(d.[ApplicationRoles] AS [CHAR] (1)) + ' 
AND [Assemblies] = ' + CAST(d.[Assemblies] AS [CHAR] (1)) + ' 
AND [AsymmetricKeys] = ' + CAST(d.[AsymmetricKeys] AS [CHAR] (1)) + ' 
AND [Certificates] = ' + CAST(d.[Certificates] AS [CHAR] (1)) + '
AND [DatabaseAuditSpecifications] = ' + CAST(d.[DatabaseAuditSpecifications] AS [CHAR] (1)) + ' 
AND [DatabaseOptions] = ' + CAST(d.[DatabaseOptions] AS [CHAR] (1)) + ' 
AND [Defaults] = ' + CAST(d.[Defaults] AS [CHAR] (1)) + '
AND [FullTextCatalogs] = ' + CAST(d.[FullTextCatalogs] AS [CHAR] (1)) + '
AND [FullTextStopLists] = ' + CAST(d.[FullTextStopLists] AS [CHAR] (1)) + '
AND [PartitionFunctions] = ' + CAST(d.[PartitionFunctions] AS [CHAR] (1)) + ' 
AND [PartitionSchemes] = ' + CAST(d.[PartitionSchemes] AS [CHAR] (1)) + '
AND [PlanGuides] = ' + CAST(d.[PlanGuides] AS [CHAR] (1)) + '
AND [Roles] = ' + CAST(d.[Roles] AS [CHAR] (1)) + '
AND [Rules] = ' + CAST(d.[Rules] AS [CHAR] (1)) + '
AND [Schemas] = ' + CAST(d.[Schemas] AS [CHAR] (1)) + '
AND [ServiceBroker] = ' + CAST(d.[ServiceBroker] AS [CHAR] (1)) + '
AND [StoredProcedures] = ' + CAST(d.[StoredProcedures] AS [CHAR] (1)) + '
AND [SymmetricKeys] = ' + CAST(d.[SymmetricKeys] AS [CHAR] (1)) + '
AND [Synonyms] = ' + CAST(d.[Synonyms] AS [CHAR] (1)) + '
AND [Tables] = ' + CAST(d.[Tables] AS [CHAR] (1)) + '
AND [Triggers] = ' + CAST(d.[Triggers] AS [CHAR] (1)) + '
AND [UserDefinedAggregates] = ' + CAST(d.[UserDefinedAggregates] AS [CHAR] (1)) + '
AND [UserDefinedDataTypes] = ' + CAST(d.[UserDefinedDataTypes] AS [CHAR] (1)) + '
AND [UserDefinedFunctions] = ' + CAST(d.[UserDefinedFunctions] AS [CHAR] (1)) + '
AND [UserDefinedTableTypes] = ' + CAST(d.[UserDefinedTableTypes] AS [CHAR] (1)) + '
AND [UserDefinedTypes] = ' + CAST(d.[UserDefinedTypes] AS [CHAR] (1)) + '
AND [Users] = ' + CAST(d.[Users] AS [CHAR] (1)) + '
AND [Views] = ' + CAST(d.[Views] AS [CHAR] (1)) + '
AND [XMLSchemaCollections] = ' + CAST(d.[XMLSchemaCollections] AS [CHAR] (1)) + '
AND [RecCreatedDt] = ''' + CAST(d.[RecCreatedDt] AS [VARCHAR] (20)) + '''
AND [RecCreatedUser] = ''' + d.[RecCreatedUser] + '''
AND [RecUpdatedDt] = ''' + CAST(d.[RecUpdatedDt] AS [VARCHAR] (20)) + '''
AND [RecUpdatedUser] = ''' + d.[RecUpdatedUser] + ''''
   , CURRENT_TIMESTAMP
  FROM [inserted] i 
  JOIN [deleted] d
  ON i.[Name] = d.[Name]
  AND i.[InstanceName] = d.[InstanceName];

  -- inserts
  INSERT [SQLCfg].[tChange]
   ( [Node]  
   , [Version]
   , [Action]
   , [Definition]
   , [DefinitionDt] )
  SELECT 
     @NodeBase + i.[InstanceName] + '|' + i.[Name]
   , [SQLCfg].[fLastVersion](@NodeBase + i.[InstanceName] + '|' + i.[Name]) + 1
   , 'Include'
   , 'INSERT [SQLCfg].[tDb]
( [Name]
, [InstanceName]
, [ActiveDirectory]
, [ApplicationRoles]
, [Assemblies]
, [AsymmetricKeys]
, [Certificates]
, [DatabaseAuditSpecifications]
, [DatabaseOptions]
, [Defaults]
, [FullTextCatalogs]
, [FullTextStopLists]
, [PartitionFunctions]
, [PartitionSchemes]
, [PlanGuides]
, [Roles]
, [Rules]
, [Schemas]
, [ServiceBroker]
, [StoredProcedures]
, [SymmetricKeys]
, [Synonyms]
, [Tables]
, [Triggers]
, [UserDefinedAggregates]
, [UserDefinedDataTypes]
, [UserDefinedFunctions]
, [UserDefinedTableTypes]
, [UserDefinedTypes]
, [Users]
, [Views]
, [XMLSchemaCollections]
, [RecCreatedDt] 
, [RecCreatedUser]
, [RecUpdatedDt]
, [RecUpdatedUser] )
SELECT [Name] = ''' + i.[Name] + '''
AND [InstanceName] = ''' + i.[InstanceName] + ''' 
AND [ActiveDirectory] = ' + CAST(i.[ActiveDirectory] AS [CHAR] (1)) + ' 
AND [ApplicationRoles] = ' + CAST(i.[ApplicationRoles] AS [CHAR] (1)) + ' 
AND [Assemblies] = ' + CAST(i.[Assemblies] AS [CHAR] (1)) + ' 
AND [AsymmetricKeys] = ' + CAST(i.[AsymmetricKeys] AS [CHAR] (1)) + ' 
AND [Certificates] = ' + CAST(i.[Certificates] AS [CHAR] (1)) + '
AND [DatabaseAuditSpecifications] = ' + CAST(i.[DatabaseAuditSpecifications] AS [CHAR] (1)) + ' 
AND [DatabaseOptions] = ' + CAST(i.[DatabaseOptions] AS [CHAR] (1)) + ' 
AND [Defaults] = ' + CAST(i.[Defaults] AS [CHAR] (1)) + '
AND [FullTextCatalogs] = ' + CAST(i.[FullTextCatalogs] AS [CHAR] (1)) + '
AND [FullTextStopLists] = ' + CAST(i.[FullTextStopLists] AS [CHAR] (1)) + '
AND [PartitionFunctions] = ' + CAST(i.[PartitionFunctions] AS [CHAR] (1)) + ' 
AND [PartitionSchemes] = ' + CAST(i.[PartitionSchemes] AS [CHAR] (1)) + '
AND [PlanGuides] = ' + CAST(i.[PlanGuides] AS [CHAR] (1)) + '
AND [Roles] = ' + CAST(i.[Roles] AS [CHAR] (1)) + '
AND [Rules] = ' + CAST(i.[Rules] AS [CHAR] (1)) + '
AND [Schemas] = ' + CAST(i.[Schemas] AS [CHAR] (1)) + '
AND [ServiceBroker] = ' + CAST(i.[ServiceBroker] AS [CHAR] (1)) + '
AND [StoredProcedures] = ' + CAST(i.[StoredProcedures] AS [CHAR] (1)) + '
AND [SymmetricKeys] = ' + CAST(i.[SymmetricKeys] AS [CHAR] (1)) + '
AND [Synonyms] = ' + CAST(i.[Synonyms] AS [CHAR] (1)) + '
AND [Tables] = ' + CAST(i.[Tables] AS [CHAR] (1)) + '
AND [Triggers] = ' + CAST(i.[Triggers] AS [CHAR] (1)) + '
AND [UserDefinedAggregates] = ' + CAST(i.[UserDefinedAggregates] AS [CHAR] (1)) + '
AND [UserDefinedDataTypes] = ' + CAST(i.[UserDefinedDataTypes] AS [CHAR] (1)) + '
AND [UserDefinedFunctions] = ' + CAST(i.[UserDefinedFunctions] AS [CHAR] (1)) + '
AND [UserDefinedTableTypes] = ' + CAST(i.[UserDefinedTableTypes] AS [CHAR] (1)) + '
AND [UserDefinedTypes] = ' + CAST(i.[UserDefinedTypes] AS [CHAR] (1)) + '
AND [Users] = ' + CAST(i.[Users] AS [CHAR] (1)) + '
AND [Views] = ' + CAST(i.[Views] AS [CHAR] (1)) + '
AND [XMLSchemaCollections] = ' + CAST(i.[XMLSchemaCollections] AS [CHAR] (1)) + '
AND [RecCreatedDt] = ''' + CAST(i.[RecCreatedDt] AS [VARCHAR] (20)) + '''
AND [RecCreatedUser] = ''' + i.[RecCreatedUser] + '''
AND [RecUpdatedDt] = ''' + CAST(i.[RecUpdatedDt] AS [VARCHAR] (20)) + '''
AND [RecUpdatedUser] = ''' + i.[RecUpdatedUser] + ''''
   , CURRENT_TIMESTAMP
  FROM [inserted] i
  WHERE NOT EXISTS (SELECT * FROM [deleted]
                    WHERE [Name] = i.[Name]
                    AND [InstanceName] = i.[InstanceName]);

 END TRY 

 BEGIN CATCH

  EXEC [SQLCfg].[pLogSQLError] @TextData, @@PROCID;

 END CATCH 

END;
GO 

IF  OBJECT_ID('[SQLCfg].[trgtServiceBroker_Insert_Update_Delete]','TR') IS NOT NULL
 DROP TRIGGER [SQLCfg].[trgtServiceBroker_Insert_Update_Delete];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**              
*******************************************************************************/

CREATE TRIGGER [SQLCfg].[trgtServiceBroker_Insert_Update_Delete]
ON [SQLCfg].[tServiceBroker]
FOR INSERT, UPDATE, DELETE
AS
BEGIN
 DECLARE @icount [INT]
  , @dcount [INT]
  , @ucount [INT]
  , @NodeBase [NVARCHAR] (50) 
  , @TextData [VARCHAR] (2048);   

  SET NOCOUNT ON;

  BEGIN TRY   

  SELECT @icount = COUNT(*) FROM [inserted];
  SELECT @dcount = COUNT(*) FROM [deleted];
  SELECT @ucount = COUNT(*) FROM [SQLCfg].[tSQLCfg];

  -- no multi row ops
  IF @icount > 1 OR @dcount > 1
   BEGIN
    SET @TextData = 'Multi-row [SQLCfg].[tServiceBroker] operations are not permitted';
    RAISERROR (@TextData, 16,1);
   END

   SET @NodeBase =  'SQLCfgMetadata|SQLCfg.tServiceBroker|';

   -- deletes
   INSERT [SQLCfg].[tChange]
    ( [Node]  
    , [Version]
    , [Action]
    , [Definition]
    , [DefinitionDt] )
   SELECT 
      @NodeBase + d.[InstanceName] + '|' + d.[DatabaseName]
    , [SQLCfg].[fLastVersion](@NodeBase + d.[InstanceName] + '|' + d.[DatabaseName]) + 1
    , 'Remove'
    , 'DELETE [SQLCfg].[tServiceBroker]
WHERE [DatabaseName] = ''' + d.[DatabaseName] + '''
AND [InstanceName] = ''' + d.[InstanceName] + '''
AND [MessageTypes] = ' + CAST(d.[MessageTypes] AS [CHAR] (1)) + ' 
AND [Priorities] = ' + CAST(d.[Priorities] AS [CHAR] (1)) + ' 
AND [Queues] = ' + CAST(d.[Queues] AS [CHAR] (1)) + ' 
AND [RemoteServiceBindings] = ' + CAST(d.[RemoteServiceBindings] AS [CHAR] (1)) + ' 
AND [Routes] = ' + CAST(d.[Routes] AS [CHAR] (1)) + ' 
AND [ServiceContracts] = ' + CAST(d.[ServiceContracts] AS [CHAR] (1)) + ' 
AND [Services] = ' + CAST(d.[Services] AS [CHAR] (1)) + '
AND [RecCreatedDt] = ''' + CAST(d.[RecCreatedDt] AS [VARCHAR] (20)) + '''
AND [RecCreatedUser] = ''' + d.[RecCreatedUser] + '''
AND [RecUpdatedDt] = ''' + CAST(d.[RecUpdatedDt] AS [VARCHAR] (20)) + '''
AND [RecUpdatedUser] = ''' + d.[RecUpdatedUser] + ''''
    , CURRENT_TIMESTAMP
   FROM [deleted] d 
   WHERE NOT EXISTS (SELECT * FROM [inserted]
                     WHERE [DatabaseName] = d.[DatabaseName]
                     AND [InstanceName] = d.[InstanceName]);

   -- updates
   --- add audit info
   UPDATE s
   SET [RecUpdatedDt] = CURRENT_TIMESTAMP
    , [RecUpdatedUser] = ORIGINAL_LOGIN()
   FROM [SQLCfg].[tServiceBroker] s
   JOIN [inserted] i 
   ON s.[DatabaseName] = i.[DatabaseName]
   AND s.[InstanceName] = i.[InstanceName]
   JOIN [deleted] d
   ON i.[DatabaseName] = d.[DatabaseName]
   AND i.[InstanceName] = d.[InstanceName];

   -- record the change
   INSERT [SQLCfg].[tChange]
    ( [Node]  
    , [Version]
    , [Action]
    , [Definition]
    , [DefinitionDt] )
   SELECT 
      @NodeBase + i.[InstanceName] + '|' + i.[DatabaseName]
    , [SQLCfg].[fLastVersion](@NodeBase + i.[InstanceName] + '|' + i.[DatabaseName]) + 1
    , 'Modify'
    , 'UPDATE [SQLCfg].[tServiceBroker]
SET [DatabaseName] = ''' + i.[DatabaseName] + '''
 , [InstanceName] = ''' + i.[InstanceName] + '''
 , [MessageTypes] = ' + CAST(i.[MessageTypes] AS [CHAR] (1)) + ' 
 , [Priorities] = ' + CAST(i.[Priorities] AS [CHAR] (1)) + ' 
 , [Queues] = ' + CAST(i.[Queues] AS [CHAR] (1)) + ' 
 , [RemoteServiceBindings] = ' + CAST(i.[RemoteServiceBindings] AS [CHAR] (1)) + ' 
 , [Routes] = ' + CAST(i.[Routes] AS [CHAR] (1)) + ' 
 , [ServiceContracts] = ' + CAST(i.[ServiceContracts] AS [CHAR] (1)) + ' 
 , [Services] = ' + CAST(i.[Services] AS [CHAR] (1)) + '
 , [RecCreatedDt] = ''' + CAST(i.[RecCreatedDt] AS [VARCHAR] (20)) + '''
 , [RecCreatedUser] = ''' + i.[RecCreatedUser] + '''
 , [RecUpdatedDt] = ''' + CAST(i.[RecUpdatedDt] AS [VARCHAR] (20)) + '''
 , [RecUpdatedUser] = ''' + i.[RecUpdatedUser] + '''
WHERE [DatabaseName] = ''' + d.[DatabaseName] + '''
AND [InstanceName] = ''' + d.[InstanceName] + '''
AND [MessageTypes] = ' + CAST(d.[MessageTypes] AS [CHAR] (1)) + ' 
AND [Priorities] = ' + CAST(d.[Priorities] AS [CHAR] (1)) + ' 
AND [Queues] = ' + CAST(d.[Queues] AS [CHAR] (1)) + ' 
AND [RemoteServiceBindings] = ' + CAST(d.[RemoteServiceBindings] AS [CHAR] (1)) + ' 
AND [Routes] = ' + CAST(d.[Routes] AS [CHAR] (1)) + ' 
AND [ServiceContracts] = ' + CAST(d.[ServiceContracts] AS [CHAR] (1)) + ' 
AND [Services] = ' + CAST(d.[Services] AS [CHAR] (1)) + '
AND [RecCreatedDt] = ''' + CAST(d.[RecCreatedDt] AS [VARCHAR] (20)) + '''
AND [RecCreatedUser] = ''' + d.[RecCreatedUser] + '''
AND [RecUpdatedDt] = ''' + CAST(d.[RecUpdatedDt] AS [VARCHAR] (20)) + '''
AND [RecUpdatedUser] = ''' + d.[RecUpdatedUser] + ''''
    , CURRENT_TIMESTAMP
   FROM [inserted] i 
   JOIN [deleted] d
   ON i.[DatabaseName] = d.[DatabaseName]
   AND i.[InstanceName] = d.[InstanceName];

   -- inserts

   INSERT [SQLCfg].[tChange]
    ( [Node]  
    , [Version]
    , [Action]
    , [Definition]
    , [DefinitionDt] )
   SELECT 
      @NodeBase + i.[InstanceName] + '|' + i.[DatabaseName]
    , [SQLCfg].[fLastVersion](@NodeBase + i.[InstanceName] + '|' + i.[DatabaseName]) + 1
    , 'Include'
    , 'INSERT [SQLCfg].[tServiceBroker]
    ( [DatabaseName]
    , [InstanceName]
    , [MessageTypes]
    , [Priorities]
    , [Queues]
    , [RemoteServiceBindings]
    , [Routes]
    , [ServiceContracts]
    , [Services]
    , [RecCreatedDt] 
    , [RecCreatedUser]
    , [RecUpdatedDt]
    , [RecUpdatedUser] )
   SELECT [DatabaseName] = ''' + i.[DatabaseName] + '''
   AND [InstanceName] = ''' + i.[InstanceName] + '''
   AND [MessageTypes] = ' + CAST(i.[MessageTypes] AS [CHAR] (1)) + ' 
   AND [Priorities] = ' + CAST(i.[Priorities] AS [CHAR] (1)) + ' 
   AND [Queues] = ' + CAST(i.[Queues] AS [CHAR] (1)) + ' 
   AND [RemoteServiceBindings] = ' + CAST(i.[RemoteServiceBindings] AS [CHAR] (1)) + ' 
   AND [Routes] = ' + CAST(i.[Routes] AS [CHAR] (1)) + ' 
   AND [ServiceContracts] = ' + CAST(i.[ServiceContracts] AS [CHAR] (1)) + ' 
   AND [Services] = ' + CAST(i.[Services] AS [CHAR] (1)) + '
   AND [RecCreatedDt] = ''' + CAST(i.[RecCreatedDt] AS [VARCHAR] (20)) + '''
   AND [RecCreatedUser] = ''' + i.[RecCreatedUser] + '''
   AND [RecUpdatedDt] = ''' + CAST(i.[RecUpdatedDt] AS [VARCHAR] (20)) + '''
   AND [RecUpdatedUser] = ''' + i.[RecUpdatedUser] + ''''
    , CURRENT_TIMESTAMP
   FROM [inserted] i
   WHERE NOT EXISTS (SELECT * FROM [deleted]
                     WHERE [DatabaseName] = i.[DatabaseName]
                     AND [InstanceName] = i.[InstanceName]);

  END TRY 

  BEGIN CATCH

   EXEC [SQLCfg].[pLogSQLError] @TextData, @@PROCID;

  END CATCH 

END;

GO

IF  OBJECT_ID('[SQLCfg].[trgtChange_Insert_Update_Delete]','TR') IS NOT NULL
 DROP TRIGGER [SQLCfg].[trgtChange_Insert_Update_Delete];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**    Dec 23,2009    bw                 cascade db delete to all db items
*******************************************************************************/

CREATE TRIGGER [SQLCfg].[trgtChange_Insert_Update_Delete]
ON [SQLCfg].[tChange]
INSTEAD OF INSERT, UPDATE, DELETE
AS
BEGIN
 DECLARE @icount [INT]
  , @dcount [INT]
  , @TextData [VARCHAR] (2048)
  , @ConcatEventData [XML];

 SET NOCOUNT ON;

 BEGIN TRY

  SELECT @icount = COUNT(*) FROM [inserted];
  SELECT @dcount = COUNT(*) FROM [deleted];

  IF (@icount) > 1
  OR (@dcount) > 1
   BEGIN
    SET @TextData = 'Multi-row [SQLCfg].[tChange] operations are not supported. icount=%d; dcount= %d';
    RAISERROR (@TextData, 16,1, @icount, @dcount)
   END;

  IF @icount = 1 AND @dcount = 0
   BEGIN
     -- the application determines if current is duplicate of previous
     -- and also serializes changes
     -- here we just add the definition provided
     INSERT [SQLCfg].[tChange]
      (  [Node]
       , [Version]
       , [Action]
       , [EventData]
       , [Definition]
       , [DefinitionDt] ) 
     SELECT [Node] = ISNULL(i.[Node], 0x0)
       , [Version] = [SQLCfg].[fLastVersion](i.[Node]) + 1 
       , [Action] = i.[Action]
       , [EventData] = i.[EventData]
       , [Defintion] = i.[Definition]
       , [DefinitionDt] = i.[EVENTDATA].value('(/ROOT/EVENT_INSTANCE/PostTime)[1]', 'DATETIME') 
     FROM [inserted] i;     

     -- cascade delete to all items in a db if db is deleted
     IF EXISTS (SELECT * 
                FROM [inserted]
                WHERE [Node].[Collection] = 'Databases'
                AND [Action] = 'Delete') 
       INSERT [SQLCfg].[tChange]
        (  [Node]
         , [Version]
         , [Action]
         , [EventData]
         , [Definition]
         , [DefinitionDt] ) 
       SELECT [Node] = c.[Node]
         , [Version] = c.[Version] + 1 
         , [Action] = i.[Action]
         , [EventData] = ISNULL( i.[EventData]
                               , CAST('<ROOT><EVENT_INSTANCE>Database Dropped</EVENT_INSTANCE></ROOT>' AS XML))
         , [Defintion] = i.[Definition]
         , [DefinitionDt] = i.[EVENTDATA].value('(/ROOT/EVENT_INSTANCE/PostTime)[1]', 'DATETIME') 
       FROM [SQLCfg].[tChange] c
       JOIN [inserted] i
       ON c.[Node].[Database] = i.[Node].Item
       WHERE c.[Node].[Type] = 'SQLInstance' 
       AND c.[Version] = [SQLCfg].[fLastVersion](c.[Node]);     

   END;  

  -- only update allowed is append to EventData when an event based compare does not detect differences 
  IF @icount = 1 and @dcount = 1
   BEGIN
       -- this is a little loose but better than parsing xml
       -- can't compare 
   	   UPDATE c
	   SET [EventData] = i.[EventData]
		, [Action] = i.[Action]
		, [DefinitionDt] = ISNULL(i.[DefinitionDt], CURRENT_TIMESTAMP) 
	   FROM [SQLCfg].[tChange] c
	   JOIN inserted i
	   ON c.[Id] = i.[Id]
	   WHERE i.[EventData] IS NOT NULL
	   AND (   c.[EventData] IS NULL 
			OR (i.[EventData].value('count(/ROOT/EVENT_INSTANCE)', 'INT') > c.[EventData].value('count(/ROOT/EVENT_INSTANCE)', 'INT')
			    AND i.[EventData].value('count(/ROOT/EVENT_INSTANCE/EVENT_TYPE)[1]', 'NVARCHAR(50)') = c.[EventData].value('count(/ROOT/EVENT_INSTANCE/EVENT_TYPE)[1]', 'INT')))
  END 

  -- no delete
  IF @icount = 0 and @dcount > 0  
   BEGIN
    SET @TextData = '[SQLCfg].[tChange] delete operations are not permitted.';
    RAISERROR (@TextData, 16,1);
   END;

 END TRY 

 BEGIN CATCH

  EXEC [SQLCfg].[pLogSQLError] @TextData, @@PROCID;

 END CATCH 

END;

GO

IF  OBJECT_ID('[SQLCfg].[trgtConnection_Insert_Update_Delete]','TR') IS NOT NULL
 DROP TRIGGER [SQLCfg].[trgtConnection_Insert_Update_Delete]

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**    11-5-2009      bw                 no null definition if protocol, login,
**                                      or pwd is null         
*******************************************************************************/

CREATE TRIGGER [SQLCfg].[trgtConnection_Insert_Update_Delete]
ON [SQLCfg].[tConnection]
FOR INSERT, UPDATE, DELETE
AS
BEGIN
 DECLARE @icount [INT]
  , @dcount [INT] 
  , @NodeBase [NVARCHAR](50)
  , @TextData [VARCHAR] (2048)
  , @InstanceName [NVARCHAR] (128);

 SET NOCOUNT ON;

 BEGIN TRY
  SELECT @icount = COUNT(*) FROM [inserted];
  SELECT @dcount = COUNT(*) FROM [deleted];

  -- no multi-row
  IF @icount > 1 OR @dcount > 1
   BEGIN
    SET @TextData = 'Multi-row [SQLCfg].[tConnection] operations are not permitted';
    RAISERROR (@TextData,16,1)
   END

  SET @NodeBase = 'SQLCfgMetadata|SQLCfg.tConnection|';
  SELECT @InstanceName = UPPER([InstanceName]) from deleted

  -- deletes
  IF @icount = 0 AND @dcount = 1
   BEGIN
    IF (SELECT [EncryptedConnection] FROM deleted) = 1
      RAISERROR('Remove encrypted connection configuration on Instance [%s] before deleting the connection''s metadata.', 16, 1, @InstanceName);  
 
    -- There can be no configuration left when the connection is deleted
    -- the approach here will leave a change row for each removed row
    SET ROWCOUNT 1

		WHILE EXISTS (SELECT * FROM [SQLCfg].[tServiceBroker] 
					  WHERE [InstanceName] = @InstanceName) 
		 DELETE [SQLCfg].[tServiceBroker]
		 WHERE [InstanceName] = @InstanceName
		 AND [DatabaseName] = (SELECT MIN([DatabaseName])
							   FROM [SQLCfg].[tServiceBroker]
							   WHERE [InstanceName] = @InstanceName);
	                          

		WHILE EXISTS (SELECT * FROM [SQLCfg].[tDb] 
					  WHERE [InstanceName] = @InstanceName)
		 DELETE [SQLCfg].[tDb] 
		 WHERE [InstanceName] = @InstanceName
		 AND [Name] = (SELECT MIN([Name])
					 FROM [SQLCfg].[tDb]
					 WHERE [InstanceName] = @InstanceName);


		DELETE [SQLCfg].[tJobServer]
		WHERE [InstanceName] = @InstanceName;

		DELETE [SQLCfg].[tInstance]
		WHERE [Name] = @InstanceName;

		-- fkey cascades deletes to tSchedule rows but will violate the 'operate on one row at a time' rule
		WHILE EXISTS (SELECT * FROM [SQLCfg].[tSchedule] 
					  WHERE [InstanceName] = @InstanceName)
		 DELETE [SQLCfg].[tSchedule]
		 WHERE [InstanceName] = @InstanceName
		 AND [Id] = (SELECT MIN([Id])
				   FROM [SQLCfg].[tSchedule]
				   WHERE [InstanceName] = @InstanceName);

    SET ROWCOUNT 1

    INSERT [SQLCfg].[tChange]
     ( [Node]
     , [Version]
     , [Action] 
     , [Definition]
     , [DefinitionDt] )
    SELECT
       @NodeBase + [InstanceName]
     , [SQLCfg].[fLastVersion](@Nodebase + [InstanceName]) + 1
     , 'Remove'
     , 'DELETE [SQLCfg].[tConnection]
WHERE [InstanceName] = ''' + [InstanceName] + '''
AND [EncryptedConnection] = ' + CAST([EncryptedConnection] AS [CHAR] (1)) + ' 
AND [TrustServerCertificate] = ' + CAST([TrustServerCertificate] AS [CHAR] (1)) + ' 
AND [NetworkProtocol] = ''' + ISNULL([NetworkProtocol],'NULL') + ''' 
AND [ConnectionTimeout] = ' + CAST([ConnectionTimeout] AS [CHAR] (10)) + ' 
AND [LoginSecure] = ' + CAST([LoginSecure] AS [CHAR] (1)) + ' 
AND [LoginName] = ''' + ISNULL([LoginName],'NULL') + ''' 
AND [EncryptedPassword] = ' + ISNULL(sys.fn_varbintohexstr([EncryptedPassword]), 'NULL') + '
AND [IsDeleted] = ' + CAST([IsDeleted] AS [CHAR] (1)) + ' 
AND [RecCreatedDt] = ''' + CAST([RecCreatedDt] AS [VARCHAR] (20)) + '''
AND [RecCreatedUser] = ''' + [RecCreatedUser] + '''
AND [RecUpdatedDt] = ''' + CAST([RecUpdatedDt] AS [VARCHAR] (20)) + '''
AND [RecUpdatedUser] = ''' + [RecUpdatedUser] + ''''
     , CURRENT_TIMESTAMP
    FROM [deleted] 
    WHERE [InstanceName] NOT IN (SELECT [InstanceName] FROM [inserted]);
   END

  -- updates
  IF @icount = 1 AND @dcount = 1
   BEGIN
    -- if LoginSecure, set login and password to null  
    UPDATE s
    SET [Loginname] = NULL
     , [EncryptedPassword] = NULL 
    FROM [inserted] i
    JOIN [SQLCfg].[tConnection] s
    ON i.[InstanceName] = s.[InstanceName]
    WHERE i.[LoginSecure] = 1 
    AND (   s.[LoginName] IS NOT NULL
         OR s.[EncryptedPassword] IS NOT NULL);

    --- add audit info
    UPDATE c
    SET [RecUpdatedDt] = CURRENT_TIMESTAMP
     , [RecUpdatedUser] = ORIGINAL_LOGIN()
     , [InstanceName] = c.InstanceName 
    FROM [SQLCfg].[tConnection] c
    JOIN [inserted] i 
    ON c.[InstanceName] = i.[InstanceName]
    JOIN [deleted] d
    ON i.[InstanceName] = d.[InstanceName];

    -- record the change
    INSERT [SQLCfg].[tChange]
     ( [Node]
     , [Version]
     , [Action] 
     , [Definition]
     , [DefinitionDt] )
    SELECT
       @NodeBase + i.[InstanceName]
     , [SQLCfg].[fLastVersion](@Nodebase + i.[InstanceName]) + 1
     , 'Modify'
     , 'UPDATE [SQLCfg].[tConnection]
SET [InstanceName] = ''' + i.[InstanceName] + '''
 , [EncryptedConnection] = ' + CAST(i.[EncryptedConnection] AS [CHAR] (1)) + ' 
 , [TrustServerCertificate] = ' + CAST(i.[TrustServerCertificate] AS [CHAR] (1)) + ' 
 , [NetworkProtocol] = ''' + ISNULL(i.[NetworkProtocol],'NULL') + ''' 
 , [ConnectionTimeout] = ' + CAST(i.[ConnectionTimeout] AS [CHAR] (10)) + ' 
 , [LoginSecure] = ' + CAST(i.[LoginSecure] AS [CHAR] (1)) + ' 
 , [LoginName] = ' + ISNULL(i.[LoginName], 'NULL') + ' 
 , [EncryptedPassword] = ' + ISNULL(sys.fn_varbintohexstr(i.[EncryptedPassword]),'NULL') + '
 , [IsDeleted] = ' + CAST(i.[IsDeleted] AS [CHAR] (1)) + ' 
 , [RecCreatedDt] = ''' + CAST(i.[RecCreatedDt] AS [VARCHAR] (20)) + '''
 , [RecCreatedUser] = ''' + i.[RecCreatedUser] + '''
 , [RecUpdatedDt] = ''' + CAST(i.[RecUpdatedDt] AS [VARCHAR] (20)) + '''
 , [RecUpdatedUser] = ''' + i.[RecUpdatedUser] + '''
WHERE [InstanceName] = ''' + d.[InstanceName] + '''
AND [EncryptedConnection] = ' + CAST(d.[EncryptedConnection] AS [CHAR] (1)) + ' 
AND [TrustServerCertificate] = ' + CAST(d.[TrustServerCertificate] AS [CHAR] (1)) + ' 
AND [NetworkProtocol] = ''' + ISNULL(d.[NetworkProtocol],'NULL') + ''' 
AND [ConnectionTimeout] = ' + CAST(d.[ConnectionTimeout] AS [CHAR] (10)) + ' 
AND [LoginSecure] = ' + CAST(d.[LoginSecure] AS [CHAR] (1)) + ' 
AND [LoginName] = ''' + ISNULL(d.[LoginName],'NULL') + ''' 
AND [EncryptedPassword] = ' + ISNULL(sys.fn_varbintohexstr(d.[EncryptedPassword]),'NULL') + ' 
AND [IsDeleted] = ' + CAST(d.[IsDeleted] AS [CHAR] (1)) + ' 
AND [RecCreatedDt] = ''' + CAST(d.[RecCreatedDt] AS [VARCHAR] (20)) + '''
AND [RecCreatedUser] = ''' + d.[RecCreatedUser] + '''
AND [RecUpdatedDt] = ''' + CAST(d.[RecUpdatedDt] AS [VARCHAR] (20)) + '''
AND [RecUpdatedUser] = ''' + d.[RecUpdatedUser] + ''''
     , CURRENT_TIMESTAMP
    FROM [inserted] i 
    JOIN [deleted] d
    ON i.[InstanceName] = d.[InstanceName];
   END

  -- inserts
  IF @icount = 1 AND @dcount = 0
   BEGIN

    UPDATE c
    SET [InstanceName] = c.InstanceName 
    FROM [SQLCfg].[tConnection] c
    JOIN [inserted] i 
    ON c.[InstanceName] = i.[InstanceName];
       
    INSERT [SQLCfg].[tChange]
     ( [Node]
     , [Version]
     , [Action] 
     , [Definition]
     , [DefinitionDt] )
    SELECT
       @NodeBase + [InstanceName]
     , [SQLCfg].[fLastVersion](@Nodebase + [InstanceName]) + 1
     , 'Include'
     , 'INSERT [SQLCfg].[tConnection]
 ( [InstanceName]
 , [EncryptedConnection]
 , [TrustServercertificate]
 , [NetworkProtocol]
 , [ConnectionTimeout]
 , [LoginSecure]
 , [LoginName]
 , [EncryptedPassword]
 , [IsDeleted]  
 , [RecCreatedDt] 
 , [RecCreatedUser]
 , [RecUpdatedDt]
 , [RecUpdatedUser])
SELECT [InstanceName] = ''' + [InstanceName] + '''
AND [EncryptedConnection] = ' + CAST([EncryptedConnection] AS [CHAR] (1)) + ' 
AND [TrustServerCertificate] = ' + CAST([TrustServerCertificate] AS [CHAR] (1)) + ' 
AND [NetworkProtocol] = ''' + ISNULL([NetworkProtocol],'NULL') + ''' 
AND [ConnectionTimeout] = ' + CAST([ConnectionTimeout] AS [CHAR] (10)) + ' 
AND [LoginSecure] = ' + CAST([LoginSecure] AS [CHAR] (1)) + ' 
AND [LoginName] = ''' + ISNULL([LoginName],'NULL') + ''' 
AND [EncryptedPassword] = ' + ISNULL(sys.fn_varbintohexstr([EncryptedPassword]),'NULL') + ' 
AND [IsDeleted] = ' + CAST([IsDeleted] AS [CHAR] (1)) + ' 
AND [RecCreatedDt] = ''' + CAST([RecCreatedDt] AS [VARCHAR] (20)) + '''
AND [RecCreatedUser] = ''' + [RecCreatedUser] + '''
AND [RecUpdatedDt] = ''' + CAST([RecUpdatedDt] AS [VARCHAR] (20)) + '''
AND [RecUpdatedUser] = ''' + [RecUpdatedUser] + ''''
     , CURRENT_TIMESTAMP
    FROM [inserted] 
    WHERE [InstanceName] NOT IN (SELECT [InstanceName] FROM [deleted]);
   END

 END TRY

 BEGIN CATCH

   EXEC [SQLCfg].[pLogSQLError] @TextData, @@PROCID;

 END CATCH 

END;

GO

IF  OBJECT_ID('[SQLCfg].[trgtSchedule_Insert_Update_Delete]','TR') IS NOT NULL
 DROP TRIGGER [SQLCfg].[trgtSchedule_Insert_Update_Delete];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author      Description of Change
**    11/10/2009     bw          remove QueryBaseline references 
**    Jan 21, 2010   bw          bugfix- stop writing reschueduled to tChange          
**              
*******************************************************************************/

CREATE TRIGGER [SQLCfg].[trgtSchedule_Insert_Update_Delete]
ON [SQLCfg].[tSchedule]
FOR INSERT, UPDATE, Delete
AS
BEGIN
 DECLARE @icount [INT]
  , @dcount [INT] 
  , @NodeBase [NVARCHAR] (50) 
  , @TextData [VARCHAR] (2047)
  , @InstanceName [NVARCHAR] (128);

 SET NOCOUNT ON;

 BEGIN TRY
  SELECT @icount = COUNT(*) FROM [inserted];
  SELECT @dcount = COUNT(*) FROM [deleted];

  SET @NodeBase = 'SQLCfgMetadata|SQLCfg.tSchedule|';

  -- no multi-row
  IF @icount > 1 OR @dcount > 1
   BEGIN
    SET @TextData = 'Multi-row [SQLCfg].[tSchedule] operations are not permitted';
    RAISERROR (@TextData,16,1);
   END

  -- inserts
  IF @icount = 1 AND @dcount = 0
   BEGIN
  
    UPDATE s
    SET [InstanceName] = s.[InstanceName] 
    FROM [SQLCfg].[tSchedule] s
    JOIN [inserted] i 
    ON s.[InstanceName] = i.[InstanceName];

    INSERT [SQLCfg].[tChange]
     ( [Node]
     , [Version]
     , [Action] 
     , [Definition]
     , [DefinitionDt] )
    SELECT
       @NodeBase + [InstanceName] + '|ScheduleId=' + CAST(Id as [VARCHAR] (10))
     , [SQLCfg].[fLastVersion](@NodeBase + [InstanceName] + '|ScheduleId=' + CAST(Id as [VARCHAR] (10))) + 1
     , 'Include'
     , 'INSERT [SQLCfg].[tSchedule]
 ( [InstanceName]
 , [Interval]
 , [IntervalType]
 , [IntervalBaseDt]
 , [UseEventNotifications]
 , [IsActive]
 , [RecCreatedDt] 
 , [RecCreatedUser]
 , [RecUpdatedDt]
 , [RecUpdatedUser] )
SELECT [InstanceName] = ''' + [InstanceName] + '''
AND [Interval] = ' + CAST([Interval] AS [VARCHAR] (10)) + ' 
AND [IntervalType] = ''' + [IntervalType] + ''' 
AND [IntervalBaseDt] = ''' + CAST([IntervalBaseDt] AS [VARCHAR] (20)) + ''' 
AND [UseEventNotifications] = ' + CAST([UseEventNotifications] AS [CHAR] (1)) + ' 
AND [IsActive] = ' + CAST([IsActive] AS [CHAR] (1)) + ' 
AND [RecCreatedDt] = ''' + CAST([RecCreatedDt] AS [VARCHAR] (20)) + '''
AND [RecCreatedUser] = ''' + [RecCreatedUser] + '''
AND [RecUpdatedDt] = ''' + CAST([RecUpdatedDt] AS [VARCHAR] (20)) + '''
AND [RecUpdatedUser] = ''' + [RecUpdatedUser] + ''''
     , CURRENT_TIMESTAMP
    FROM [inserted] 
    WHERE [InstanceName] NOT IN (SELECT [InstanceName] FROM [deleted]);
   END

  -- updates
  IF @icount = 1 AND @dcount = 1
   BEGIN    

    UPDATE s
    SET [RecUpdatedDt] = CURRENT_TIMESTAMP
     , [RecUpdatedUser] = ORIGINAL_LOGIN()
     , [InstanceName] = s.[InstanceName]
    FROM [SQLCfg].[tSchedule] s
    JOIN [inserted] i 
    ON s.[Id] = i.[Id]
    JOIN [deleted] d
    ON i.[Id] = d.[Id];
    
    -- if only IntervalBaseDate changes do not write a change record
    If EXISTs ( SELECT * 
                FROM inserted i
                JOIN deleted d
                ON i.[Id] = d.[Id]
                WHERE i.[InstanceName] <> d.[InstanceName]
                OR i.[Interval] <> d.[Interval]
                OR i.[IntervalType] <> d.[IntervalType]
                OR i.[UseEventNotifications] <> d.[UseEventNotifications]
                OR i.[IsActive] <> d.[IsActive])
     BEGIN
      INSERT [SQLCfg].[tChange]
       ( [Node]
       , [Version]
       , [Action] 
       , [Definition]
       , [DefinitionDt] )
      SELECT
         @NodeBase + i.[InstanceName] + '|ScheduleId=' + CAST(i.Id as [VARCHAR] (10))
       , [SQLCfg].[fLastVersion](@NodeBase + i.[InstanceName] + '|ScheduleId=' + CAST(i.Id as [VARCHAR] (10))) + 1
       , 'Modify'
       , 'UPDATE [SQLCfg].[tSchedule]
SET [InstanceName] = ''' + i.[InstanceName] + '''
 , [Interval] = ' + CAST(i.[Interval] AS [VARCHAR] (10)) + ' 
 , [IntervalType] = ''' + i.[IntervalType] + ''' 
 , [IntervalBaseDt] = ''' + CAST(i.[IntervalBaseDt] AS [VARCHAR] (20)) + ''' 
 , [UseEventNotifications] = ' + CAST(i.[UseEventNotifications] AS [CHAR] (1)) + ' 
 , [IsActive] = ' + CAST(i.[IsActive] AS [CHAR] (1)) + ' 
 , [RecCreatedDt] = ''' + CAST(i.[RecCreatedDt] AS [VARCHAR] (20)) + '''
 , [RecCreatedUser] = ''' + i.[RecCreatedUser] + '''
 , [RecUpdatedDt] = ''' + CAST(i.[RecUpdatedDt] AS [VARCHAR] (20)) + '''
 , [RecUpdatedUser] = ''' + i.[RecUpdatedUser] + '''
WHERE [InstanceName] = ''' + d.[InstanceName] + '''
AND [Interval] = ' + CAST(d.[Interval] AS [VARCHAR] (10)) + ' 
AND [IntervalType] = ''' + d.[IntervalType] + ''' 
AND [IntervalBaseDt] = ''' + CAST(d.[IntervalBaseDt] AS [VARCHAR] (20)) + ''' 
AND [UseEventNotifications] = ' + CAST(d.[UseEventNotifications] AS [CHAR] (1)) + ' 
AND [IsActive] = ' + CAST(d.[IsActive] AS [CHAR] (1)) + ' 
AND [RecCreatedDt] = ''' + CAST(d.[RecCreatedDt] AS [VARCHAR] (20)) + '''
AND [RecCreatedUser] = ''' + d.[RecCreatedUser] + '''
AND [RecUpdatedDt] = ''' + CAST(d.[RecUpdatedDt] AS [VARCHAR] (20)) + '''
AND [RecUpdatedUser] = ''' + d.[RecUpdatedUser] + ''''
       , CURRENT_TIMESTAMP
      FROM [inserted] i 
      JOIN [deleted] d
      ON i.[InstanceName] = d.[InstanceName];
     END
   END

  -- deletes
  IF @icount = 0 AND @dcount = 1
   BEGIN

    -- active schedule with notifications enabled means there is still
    -- notification metadata deployed to the instance
    SELECT @InstanceName = [InstanceName] FROM [deleted]
    WHERE [UseEventNotifications] = 1
    AND [IsActive] = 1;

    IF @@ROWCOUNT > 0
      RAISERROR ('Remove event notifications configuration on Instance [%s] before deleting the Schedule',16,1, @InstanceName);
  
    INSERT [SQLCfg].[tChange]
     ( [Node]
     , [Version]
     , [Action] 
     , [Definition]
     , [DefinitionDt] )
    SELECT
       @NodeBase + [InstanceName] + '|ScheduleId=' + CAST(Id as [VARCHAR] (10))
     , SQLCfg.[fLastVersion](@NodeBase + [InstanceName] + '|ScheduleId=' + CAST(Id as [VARCHAR] (10))) + 1
     , 'Remove'
     , 'DELETE [SQLCfg].[tSchedule]
WHERE [InstanceName] = ''' + [InstanceName] + '''
AND [Interval] = ' + CAST([Interval] AS [VARCHAR] (10)) + ' 
AND [IntervalType] = ''' + [IntervalType] + ''' 
AND [IntervalBaseDt] = ''' + CAST([IntervalBaseDt] AS [VARCHAR] (20)) + ''' 
AND [UseEventNotifications] = ' + CAST([UseEventNotifications] AS [CHAR] (1)) + ' 
AND [IsActive] = ' + CAST([IsActive] AS [CHAR] (1)) + ' 
AND [RecCreatedDt] = ''' + CAST([RecCreatedDt] AS [VARCHAR] (20)) + '''
AND [RecCreatedUser] = ''' + [RecCreatedUser] + '''
AND [RecUpdatedDt] = ''' + CAST([RecUpdatedDt] AS [VARCHAR] (20)) + '''
AND [RecUpdatedUser] = ''' + [RecUpdatedUser] + ''''
     , CURRENT_TIMESTAMP
    FROM [deleted] 
    WHERE [InstanceName] NOT IN (SELECT [InstanceName] FROM [inserted]);
   
  END

 END TRY

 BEGIN CATCH

  EXEC [SQLCfg].[pLogSQLError] @TextData, @@PROCID;

 END CATCH 

END;

GO

IF  OBJECT_ID('[SQLCfg].[trgtServiceSettings_Instead]','TR') IS NOT NULL
 DROP TRIGGER [SQLCfg].[trgtServiceSettings_Instead]

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**              
*******************************************************************************/

CREATE TRIGGER [SQLCfg].[trgtServiceSettings_Instead]
ON [SQLCfg].[tServiceSettings]
INSTEAD OF INSERT, UPDATE, DELETE
AS
BEGIN
 DECLARE @TextData [VARCHAR] (2047);

 SET NOCOUNT ON;

 BEGIN TRY
    SET @TextData = 'All [SQLCfg].[tServiceSettings] CRUD operations are unsupported at this time.';
    RAISERROR (@TextData,16,1);
 END TRY

 BEGIN CATCH

  EXEC [SQLCfg].[pLogSQLError] @TextData, @@PROCID;

 END CATCH 

END;

GO

IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'fLastVersion' )
 DROP FUNCTION [SQLCfg].[fLastVersion];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: get the last inserted version for a specified node 
**
**    Note : changes need to be appliaed to assyRefresh too
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**              
*******************************************************************************/

CREATE FUNCTION [SQLCfg].[fLastVersion] 
( @Node  [SQLCfgNode] )
RETURNS [INT]
AS
BEGIN
 DECLARE @LastVersion [INT];
 SET @LastVersion = ISNULL( ( SELECT MAX(ISNULL([Version],0))
                              FROM [SQLCfg].[tChange]
                              WHERE [Node] = @Node), 0);
 RETURN @LastVersion;
END

GO


IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pSQLCfgInsert' )
 DROP PROCEDURE [SQLCfg].[pSQLCfgInsert];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: Initialize SQLConfiguration on the local server 
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**              
*******************************************************************************/
CREATE PROCEDURE [SQLCfg].[pSQLCfgInsert] 
 ( @LicensedCompany [NVARCHAR] (128) = NULL
 , @LicensedUser [NVARCHAR] (128) = NULL
 , @LicenseCode [NVARCHAR]  (128) = NULL
 , @LicensedInstanceCount [INT] = NULL
 , @LicenseDate [NVARCHAR] (30) = NULL)
AS
BEGIN
 DECLARE @TextData [NVARCHAR](500);

 SET XACT_ABORT ON;
 SET NOCOUNT ON;

 BEGIN TRY

  IF @LicensedCompany IS NULL 
  OR @LicenseCode IS NULL 
  OR @LicensedInstanceCount IS NULL 
  OR @LicenseDate IS NULL
   -- unlicensed, null date will use today but should never happen
   INSERT [SQLCfg].[tSQLCfg] 
    ( [LicensedUser]
    , [LicenseDate] )
   VALUES 
    ( ISNULL(@LicensedUser, ORIGINAL_LOGIN())
    , ISNULL(@LicenseDate, CAST(CAST(CURRENT_TIMESTAMP AS DATE) AS VARCHAR(30)))); 
  ELSE
   -- licensed
   INSERT [SQLCfg].[tSQLCfg] 
    ( [LicensedCompany]
    , [LicensedUser]
    , [LicenseCode]
    , [LicensedInstanceCount]
    , [LicenseDate] )
   VALUES 
    ( @LicensedCompany 
    , @LicensedUser
    , @LicenseCode
    , @LicensedInstanceCount
    , @LicenseDate); 

 END TRY

 BEGIN CATCH

   SET @TextData = '   @LicensedCompany = ' + ISNULL(CHAR(39) + @LicensedCompany + CHAR(39),'NULL') + CHAR(13) + CHAR(10) 
                 + ' , @LicensedUser = ' + ISNULL(CHAR(39) + @LicensedUser + CHAR(39),'NULL') + CHAR(13) + CHAR(10)
                 + ' , @LicenseCode = ' + ISNULL(CHAR(39) + @LicenseCode + CHAR(39),'NULL') + CHAR(13) + CHAR(10)
                 + ' , @LicensedInstanceCount = ' + ISNULL(CAST(@LicensedInstanceCount AS [VARCHAR] (10)), 'NULL') + CHAR(13) + CHAR(10)
                 + ' , @LicenseDate' + ISNULL(CHAR(39) + @LicenseDate + CHAR(39), 'NULL'); 
    EXEC [SQLCfg].[pLogSQLError] @TextData, @@PROCID;

 END CATCH; 

END

GO

GRANT EXECUTE ON [SQLCfg].[pSQLCfgInsert] TO [SQLCfgServiceRole] AS [dbo]
GO

IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pSQLCfgUpdate' )
 DROP PROCEDURE [SQLCfg].[pSQLCfgUpdate];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: Change the utiity metadata master record
**       used to update to a licensed instance of the SQLConfiguration utility
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**              
*******************************************************************************/

CREATE PROCEDURE [SQLCfg].[pSQLCfgUpdate] 
 ( @LicensedCompany [NVARCHAR] (128) = NULL
 , @LicensedUser [NVARCHAR] (128) = NULL
 , @LicenseCode [NVARCHAR] (128)= NULL
 , @LicensedInstanceCount [INT] = NULL
 , @LicenseDate [NVARCHAR] (30) = NULL)
AS
BEGIN
 DECLARE @TextData [NVARCHAR](500);

 SET XACT_ABORT ON;
 SET NOCOUNT ON;

 BEGIN TRY

  UPDATE [SQLCfg].[tSQLCfg]
  SET [LicensedCompany] = ISNULL(@LicensedCompany, [LicensedCompany])
   , [LicensedUser] = ISNULL(@LicensedUser, [LicensedUser])
   , [LicenseCode] = ISNULL(@LicenseCode, [LicenseCode])
   , [LicensedInstanceCount] = ISNULL(@LicensedInstanceCount, [LicensedInstanceCount])
   , [LicenseDate] = ISNULL(@LicenseDate, [LicenseDate]);

 END TRY

 BEGIN CATCH

   SET @TextData = '   @LicensedCompany = ' + ISNULL(CHAR(39) + @LicensedCompany + CHAR(39),'NULL') + CHAR(13) + CHAR(10) 
                 + ' , @LicensedUser = ' + ISNULL(CHAR(39) + @LicensedUser + CHAR(39),'NULL') + CHAR(13) + CHAR(10)
                 + ' , @LicenseCode = ' + ISNULL(CHAR(39) + @LicenseCode + CHAR(39),'NULL') + CHAR(13) + CHAR(10)
                 + ' , @LicensedInstanceCount = ' + ISNULL(CAST(@LicensedInstanceCount AS [VARCHAR] (10)), 'NULL') + CHAR(13) + CHAR(10)
                 + ' , @LicenseDate' + ISNULL(CHAR(39) + @LicenseDate + CHAR(39), 'NULL'); 
    EXEC [SQLCfg].[pLogSQLError] @TextData, @@PROCID;

 END CATCH; 

END
GO

GRANT EXECUTE ON [SQLCfg].[pSQLCfgUpdate] TO [SQLCfgServiceRole];

GO

IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pSQLCfgSelect' )
 DROP PROCEDURE [SQLCfg].[pSQLCfgSelect];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: Fetch the licensing metadata for the SQLConfig instance
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**              
*******************************************************************************/

CREATE PROCEDURE [SQLCfg].[pSQLCfgSelect] 
AS
BEGIN

 SET NOCOUNT ON;

 SELECT [LicensedCompany]
  , [LicensedUser]
  , [LicenseCode]
  , [LicensedInstanceCount]
  , [LicenseDate]
 FROM [SQLCfg].[tSQLCfg];

END

GO

GRANT EXECUTE ON [SQLCfg].[pSQLCfgSelect] TO [SQLCfgServiceRole];

GO
IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pSQLCfgGet' )
 DROP PROCEDURE [SQLCfg].[pSQLCfgGet];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: Get the licensing metadata for the SQLConfiguration utility instance. 
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**              
*******************************************************************************/

CREATE PROCEDURE [SQLCfg].[pSQLCfgGet] 
 ( @LicensedCompany [NVARCHAR] (128) OUTPUT
 , @LicensedUser [NVARCHAR] (128) OUTPUT
 , @LicenseCode [NVARCHAR] (128) OUTPUT
 , @LicensedInstanceCount [INT] OUTPUT
 , @LicenseDate [NVARCHAR] (30) OUTPUT )
AS
BEGIN

 SET NOCOUNT ON;

 SELECT @LicensedCompany = [LicensedCompany]
  , @LicensedUser = [LicensedUser]
  , @LicenseCode = [LicenseCode]
  , @LicensedInstanceCount = [LicensedInstanceCount]
  , @LicenseDate = [LicenseDate]
 FROM [SQLCfg].[tSQLCfg];

END
GO

GRANT EXECUTE ON [SQLCfg].[pSQLCfgGet] TO [SQLCfgServiceRole];

GO

IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pInstanceInsert' )
 DROP PROCEDURE [SQLCfg].[pInstanceInsert];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: Add the metadata for an SQL instance
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**              
*******************************************************************************/

CREATE PROCEDURE [SQLCfg].[pInstanceInsert] 
 ( @Name [NVARCHAR] (128) 
  , @ActiveDirectory [BIT] = 1
  , @Audits [BIT] = 1
  , @BackupDevices [BIT] = 1
  , @Configuration [BIT] = 1
  , @Credentials [BIT] = 1
  , @CryptographicProviders [BIT] = 1
  , @Databases [BIT] = 1
  , @EndPoints [BIT] = 1
  , @FullTextService [BIT] = 1
  , @Information [BIT] = 1
  , @JobServer [BIT] = 1
  , @Logins [BIT] = 1
  , @LinkedServers [BIT] = 1
  , @Mail [BIT] = 1
  , @ProxyAccount [BIT] = 1
  , @ResourceGovernor [BIT] = 1
  , @Roles [BIT] = 1
  , @ServerAuditSpecifications [BIT] = 1
  , @Settings [BIT] = 1
  , @Triggers [BIT] = 1
  , @UserDefinedMessages [BIT] = 1 )
AS
BEGIN
 DECLARE @TextData [NVARCHAR](500);

 SET XACT_ABORT ON;
 SET NOCOUNT ON;

 BEGIN TRY

  INSERT [SQLCfg].[tInstance]
   ( [Name]
   , [ActiveDirectory]
   , [Audits]
   , [BackupDevices]
   , [Configuration]
   , [Credentials]
   , [CryptographicProviders]
   , [Databases]
   , [EndPoints]
   , [FullTextService]
   , [Information]
   , [JobServer]
   , [Logins]
   , [LinkedServers]
   , [Mail]
   , [ProxyAccount]
   , [ResourceGovernor]
   , [Roles]
   , [ServerAuditSpecifications] 
   , [Settings]
   , [Triggers]
   , [UserDefinedMessages] ) 
  VALUES 
   ( UPPER(@Name)
   , @ActiveDirectory
   , @Audits
   , @BackupDevices
   , @Configuration
   , @Credentials
   , @CryptographicProviders
   , @Databases
   , @EndPoints
   , @FullTextService
   , @Information
   , @JobServer
   , @Logins
   , @LinkedServers
   , @Mail
   , @ProxyAccount
   , @ResourceGovernor
   , @Roles
   , @ServerAuditSpecifications
   , @Settings
   , @Triggers
   , @UserDefinedMessages ); 

 END TRY

 BEGIN CATCH

  SET @TextData = '   @Name = ' + ISNULL(CHAR(39) + @Name + CHAR(39),'NULL') + CHAR(13) + CHAR(10)
                + ' , @ActiveDirectory = ' + ISNULL(CAST(@ActiveDirectory AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @Audits = ' + ISNULL(CAST(@Audits AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @BackupDevices = ' + ISNULL(CAST(@BackupDevices AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @Configuration = ' + ISNULL(CAST(@Configuration AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @Credentials = ' + ISNULL(CAST(@Credentials AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @CryptographicProviders = ' + ISNULL(CAST(@CryptographicProviders AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @Databases = ' + ISNULL(CAST(@Databases AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @EndPoints' + ISNULL(CAST(@EndPoints AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @FullTextService' + ISNULL(CAST(@FullTextService AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @Information' + ISNULL(CAST(@Information AS [VARCHAR] (6)) ,'NULL') + CHAR(13) + CHAR(10)
                + ' , @JobServer' + ISNULL(CAST(@JobServer AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @Logins' + ISNULL(CAST(@Logins AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @LinkedServers' + ISNULL(CAST(@LinkedServers AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @Mail' + ISNULL(CAST(@Mail AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @ProxyAccount' + ISNULL(CAST(@ProxyAccount AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @ResourceGovernor' + ISNULL(CAST(@ResourceGovernor AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @Roles' + ISNULL(CAST(@Roles AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @ServerAuditSpecifications' + ISNULL(CAST(@ServerAuditSpecifications AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @Settings' + ISNULL(CAST(@Settings AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @Triggers' + ISNULL(CAST(@Triggers AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @UserDefinedMessages' + ISNULL(CAST(@UserDefinedMessages AS [VARCHAR] (6)),'NULL');
    EXEC [SQLCfg].[pLogSQLError] @TextData, @@PROCID;

 END CATCH; 

END
GO

GRANT EXECUTE ON [SQLCfg].[pInstanceInsert] TO [SQLCfgServiceRole];

GO 

IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pInstanceUpdate' )
 DROP PROCEDURE [SQLCfg].[pInstanceUpdate];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: Update the metadata for an SQL instance 
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**              
*******************************************************************************/

CREATE PROCEDURE [SQLCfg].[pInstanceUpdate] 
 ( @Name [NVARCHAR] (128) 
 , @ActiveDirectory [BIT] = NULL
 , @Audits [BIT] = NULL
 , @BackupDevices [BIT] = NULL
 , @Configuration [BIT] = NULL
 , @Credentials [BIT] = NULL
 , @CryptographicProviders [BIT] = NULL
 , @Databases [BIT] = NULL
 , @EndPoints [BIT] = NULL
 , @FullTextService [BIT] = NULL
 , @Information [BIT] = NULL
 , @JobServer [BIT] = NULL
 , @Logins [BIT] = NULL
 , @LinkedServers [BIT] = NULL
 , @Mail [BIT] = NULL
 , @ProxyAccount [BIT] = NULL
 , @ResourceGovernor [BIT] = NULL
 , @Roles [BIT] = NULL
 , @ServerAuditSpecifications [BIT] = NULL
 , @Settings [BIT] = NULL
 , @Triggers [BIT] = NULL
 , @UserDefinedMessages [BIT] = NULL )
AS
BEGIN
 DECLARE @TextData [NVARCHAR](500);

 SET XACT_ABORT ON;
 SET NOCOUNT ON;

 BEGIN TRY

  UPDATE [SQLCfg].[tInstance]
  SET [ActiveDirectory] = ISNULL(@ActiveDirectory, [ActiveDirectory])
   , [Audits] = ISNULL(@Audits, [Audits])
   , [BackupDevices] = ISNULL(@BackupDevices, [BackupDevices])
   , [Configuration] = ISNULL(@Configuration, [Configuration])
   , [Credentials] = ISNULL(@Credentials, [Credentials])
   , [CryptographicProviders] = ISNULL(@CryptographicProviders, [CryptographicProviders])
   , [Databases] = ISNULL(@Databases, [Databases])
   , [EndPoints] = ISNULL(@EndPoints, [EndPoints])
   , [FullTextService] = ISNULL(@FullTextService, [FullTextService])
   , [Information] = ISNULL(@Information, [Information])
   , [JobServer] = ISNULL(@JobServer, [JobServer])
   , [Logins] = ISNULL(@Logins, [Logins])
   , [LinkedServers] = ISNULL(@LinkedServers, [LinkedServers])
   , [Mail] = ISNULL(@Mail, [Mail])
   , [ProxyAccount] = ISNULL(@ProxyAccount, [ProxyAccount])
   , [ResourceGovernor] = ISNULL(@ResourceGovernor, [ResourceGovernor])
   , [Roles] = ISNULL(@Roles, [Roles])
   , [ServerAuditSpecifications] = ISNULL(@ServerAuditSpecifications, [ServerAuditSpecifications])
   , [Settings] = ISNULL(@Settings, [Settings])
   , [Triggers] = ISNULL(@Triggers, [Triggers])
   , [UserDefinedMessages] = ISNULL(@UserDefinedMessages, [UserDefinedMessages])
  WHERE [Name] = @Name;

 END TRY

 BEGIN CATCH

  SET @TextData = '   @Name = ' + ISNULL(CHAR(39) + @Name + CHAR(39),'NULL') + CHAR(13) + CHAR(10)
                + ' , @ActiveDirectory = ' + ISNULL(CAST(@ActiveDirectory AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @Audits = ' + ISNULL(CAST(@Audits AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @BackupDevices = ' + ISNULL(CAST(@BackupDevices AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @Configuration = ' + ISNULL(CAST(@Configuration AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @Credentials = ' + ISNULL(CAST(@Credentials AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @CryptographicProviders = ' + ISNULL(CAST(@CryptographicProviders AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @Databases = ' + ISNULL(CAST(@Databases AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @EndPoints' + ISNULL(CAST(@EndPoints AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @FullTextService' + ISNULL(CAST(@FullTextService AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @Information' + ISNULL(CAST(@Information AS [VARCHAR] (6)) ,'NULL') + CHAR(13) + CHAR(10)
                + ' , @JobServer' + ISNULL(CAST(@JobServer AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @Logins' + ISNULL(CAST(@Logins AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @LinkedServers' + ISNULL(CAST(@LinkedServers AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @Mail' + ISNULL(CAST(@Mail AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @ProxyAccount' + ISNULL(CAST(@ProxyAccount AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @ResourceGovernor' + ISNULL(CAST(@ResourceGovernor AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @Roles' + ISNULL(CAST(@Roles AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @ServerAuditSpecifications' + ISNULL(CAST(@ServerAuditSpecifications AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @Settings' + ISNULL(CAST(@Settings AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @Triggers' + ISNULL(CAST(@Triggers AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @UserDefinedMessages' + ISNULL(CAST(@UserDefinedMessages AS [VARCHAR] (6)),'NULL');
    EXEC [SQLCfg].[pLogSQLError] @TextData, @@PROCID;

 END CATCH; 

END
GO

GRANT EXECUTE ON [SQLCfg].[pInstanceUpdate] TO [SQLCfgServiceRole];

GO 

IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pInstanceGet' )
 DROP PROCEDURE [SQLCfg].[pInstanceGet];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: Fetch the metadata for one SQL instance 
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**              
*******************************************************************************/

CREATE PROCEDURE [SQLCfg].[pInstanceGet] 
 ( @Name [NVARCHAR] (128) 
 , @ActiveDirectory [BIT] = 1 OUTPUT
 , @Audits [BIT] = 1 OUTPUT
 , @BackupDevices [BIT] = 1 OUTPUT
 , @Configuration [BIT] = 1 OUTPUT
 , @Credentials [BIT] = 1 OUTPUT
 , @CryprographicProviders [BIT] = 1 OUTPUT
 , @Databases [BIT] = 1 OUTPUT
 , @EndPoints [BIT] = 1 OUTPUT
 , @FullTextService [BIT] = 1 OUTPUT
 , @Information [BIT] = 1 OUTPUT
 , @JobServer [BIT] = 1 OUTPUT
 , @Logins [BIT] = 1 OUTPUT
 , @LinkedServers [BIT] = 1 OUTPUT
 , @Mail [BIT] = 1 OUTPUT
 , @ProxyAccount [BIT] = 1 OUTPUT
 , @ResourceGovernor [BIT] = 1 OUTPUT
 , @Roles [BIT] = 1 OUTPUT
 , @ServerAuditSpecifications [BIT] = 1 OUTPUT
 , @Settings [BIT] = 1 OUTPUT
 , @Triggers [BIT] = 1 OUTPUT
 , @UserDefinedMessages [BIT] = 1 OUTPUT) 
AS
BEGIN

 SET NOCOUNT ON;

  SELECT @ActiveDirectory = [ActiveDirectory]
  , @Audits = [Audits]
  , @BackupDevices = [BackupDevices]
  , @Configuration = [Configuration]
  , @Credentials = [Credentials]
  , @CryprographicProviders = [CryptographicProviders]
  , @Databases = [Databases]
  , @EndPoints = [EndPoints]
  , @FullTextService = [FullTextService]
  , @Information = [Information]
  , @JobServer = [JobServer]
  , @Logins = [Logins]
  , @LinkedServers = [LinkedServers]
  , @Mail = [Mail]
  , @ProxyAccount = [ProxyAccount]
  , @ResourceGovernor = [ResourceGovernor]
  , @Roles = [Roles]
  , @ServerAuditSpecifications = [ServerAuditSpecifications]
  , @Settings = [Settings]
  , @Triggers = [Triggers]
  , @UserDefinedMessages = [UserDefinedMessages]
 FROM [SQLCfg].[tInstance]
 WHERE [Name] = @Name;

END
GO

GRANT EXECUTE ON [SQLCfg].[pInstanceGet] TO [SQLCfgReportingRole];

GO 

IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pInstanceSelectNameList' )
 DROP PROCEDURE [SQLCfg].[pInstanceSelectNameList];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: Fetch the names of all SQL instances 
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**              
*******************************************************************************/

CREATE PROCEDURE [SQLCfg].[pInstanceSelectNameList] 
AS
BEGIN

 SET NOCOUNT ON;

  SELECT [Name]
  FROM [SQLCfg].[tInstance];

END
GO

GRANT EXECUTE ON [SQLCfg].[pInstanceSelectNameList] TO [SQLCfgReportingRole];

GO 

IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pInstanceDelete' )
 DROP PROCEDURE [SQLCfg].[pInstanceDelete];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: Remove the metadata for an SQL instance
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**              
*******************************************************************************/

CREATE PROCEDURE [SQLCfg].[pInstanceDelete] 
 ( @Name [NVARCHAR] (128) )
AS
BEGIN
 DECLARE @TextData [NVARCHAR](500);

 SET XACT_ABORT ON;
 SET NOCOUNT ON;

 BEGIN TRY

  DELETE [SQLCfg].[tInstance]
  WHERE [Name] = @Name;

 END TRY

 BEGIN CATCH

  SET @TextData = '   @Name = ' + ISNULL(CHAR(39) + @Name + CHAR(39), 'NULL')
  EXEC [SQLCfg].[pLogSQLError] @TextData, @@PROCID;
 
END CATCH; 

END
GO

GRANT EXECUTE ON [SQLCfg].[pInstanceDelete] TO [SQLCfgServiceRole];

GO 

IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pInstanceSelectAll' )
 DROP PROCEDURE [SQLCfg].[pInstanceSelectAll];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: Fetch the metadata for all SQL Instances 
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**              
*******************************************************************************/

CREATE PROCEDURE [SQLCfg].[pInstanceSelectAll] 
AS
BEGIN

 SET NOCOUNT ON;

  SELECT [Name]
  , [ActiveDirectory]
  , [Audits]
  , [BackupDevices]
  , [Configuration]
  , [Credentials]
  , [CryptographicProviders]
  , [Databases]
  , [EndPoints]
  , [FullTextService]
  , [Information]
  , [JobServer]
  , [Logins]
  , [LinkedServers]
  , [Mail]
  , [ProxyAccount]
  , [ResourceGovernor]
  , [Roles]
  , [ServerAuditSpecifications]
  , [Settings]
  , [Triggers]
  , [UserDefinedMessages]
  FROM [SQLCfg].[tInstance];

END
GO

GRANT EXECUTE ON [SQLCfg].[pInstanceSelectAll] TO [SQLCfgReportingRole];

GO 

IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pJobServerInsert' )
 DROP PROCEDURE [SQLCfg].[pJobServerInsert];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: Add the metadata for an SQL instance JobServer 
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**              
*******************************************************************************/

CREATE PROCEDURE [SQLCfg].[pJobServerInsert] 
 ( @InstanceName [NVARCHAR] (128)
 , @Alerts [BIT] = 1
 , @AlertSystem [BIT] = 1
 , @Jobs [BIT] = 1
 , @Operators [BIT] = 1 
 , @ProxyAccounts [BIT] = 1 
 , @TargetServers [BIT] = 1 )
AS
BEGIN
 DECLARE @TextData [NVARCHAR](500);

 SET XACT_ABORT ON;
 SET NOCOUNT ON;

 BEGIN TRY

  INSERT [SQLCfg].[tJobServer]
   ( [InstanceName]
   , [Alerts]
   , [AlertSystem]
   , [Jobs]
   , [Operators]
   , [ProxyAccounts]
   , [TargetServers] ) 
  VALUES 
   ( UPPER(@InstanceName) 
   , @Alerts
   , @AlertSystem
   , @Jobs
   , @Operators
   , @ProxyAccounts
   , @TargetServers ); 

 END TRY

 BEGIN CATCH

  SET @TextData = '  @InstanceName = ' + ISNULL(CHAR(39) + @InstanceName + CHAR(39),'NULL') + CHAR(13) + CHAR(10)
                +' , @Alerts = ' + ISNULL(CAST(@Alerts AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                +' , @AlertSystem = ' + ISNULL(CAST(@AlertSystem AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                +' , @Jobs = ' + ISNULL(CAST(@Jobs AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                +' , @Operators = ' + ISNULL(CAST(@Operators AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                +' , @ProxyAccounts = ' + ISNULL(CAST(@ProxyAccounts AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                +' , @TargetServers = ' + ISNULL(CAST(@TargetServers AS [VARCHAR] (6)),'NULL');
    EXEC [SQLCfg].[pLogSQLError] @TextData, @@PROCID;

 END CATCH; 

END
GO

GRANT EXECUTE ON [SQLCfg].[pJobServerInsert] TO [SQLCfgServiceRole];

GO 

IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pJobServerUpdate' )
 DROP PROCEDURE [SQLCfg].[pJobServerUpdate];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: Update the metadata for an SQL instance JobServer
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**              
*******************************************************************************/

CREATE PROCEDURE [SQLCfg].[pJobServerUpdate] 
 ( @InstanceName [NVARCHAR] (128) 
  , @Alerts [BIT] = NULL
  , @AlertSystem [BIT] = NULL
  , @Jobs [BIT] = NULL
  , @Operators [BIT] = NULL
  , @ProxyAccounts [BIT] = NULL
  , @TargetServers [BIT] = NULL )
AS
BEGIN
 DECLARE @TextData [NVARCHAR](500);

 SET XACT_ABORT ON;
 SET NOCOUNT ON;

 BEGIN TRY

  UPDATE [SQLCfg].[tJobServer]
  SET [Alerts] = ISNULL(@Alerts, [Alerts])
   , [AlertSystem] = ISNULL(@AlertSystem, [AlertSystem])
   , [Jobs] = ISNULL(@Jobs, [Jobs])
   , [Operators] = ISNULL(@Operators, [Operators])
   , [ProxyAccounts] = ISNULL(@ProxyAccounts, [ProxyAccounts])
   , [TargetServers] = ISNULL(@TargetServers, [TargetServers])
  WHERE [InstanceName] = @InstanceName;

 END TRY

 BEGIN CATCH

  SET @TextData = '  @InstanceName = ' + ISNULL(CHAR(39) + @InstanceName + CHAR(39),'NULL') + CHAR(13) + CHAR(10)
                +' , @Alerts = ' + ISNULL(CAST(@Alerts AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                +' , @AlertSystem = ' + ISNULL(CAST(@AlertSystem AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                +' , @Jobs = ' + ISNULL(CAST(@Jobs AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                +' , @Operators = ' + ISNULL(CAST(@Operators AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                +' , @ProxyAccounts = ' + ISNULL(CAST(@ProxyAccounts AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                +' , @TargetServers = ' + ISNULL(CAST(@TargetServers AS [VARCHAR] (6)),'NULL');
    EXEC [SQLCfg].[pLogSQLError] @TextData, @@PROCID;

 END CATCH; 

END
GO

GRANT EXECUTE ON [SQLCfg].[pJobServerUpdate] TO [SQLCfgServiceRole];

GO 

IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pJobServerGet' )
 DROP PROCEDURE [SQLCfg].[pJobServerGet];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: Fetch the metadata for one SQL instance JobServer
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**              
*******************************************************************************/

CREATE PROCEDURE [SQLCfg].[pJobServerGet] 
 ( @InstanceName [NVARCHAR] (128) 
 , @Alerts [BIT] OUTPUT
 , @AlertSystem [BIT] OUTPUT
 , @Jobs [BIT] OUTPUT
 , @Operators [BIT] OUTPUT
 , @ProxyAccounts [BIT] OUTPUT
 , @TargetServers [BIT] OUTPUT ) 
AS
BEGIN

 SET NOCOUNT ON;

 SELECT @Alerts = [Alerts]
  , @AlertSystem = [AlertSystem]
  , @Jobs = [Jobs]
  , @Operators = [Operators]
  , @ProxyAccounts = [ProxyAccounts]
  , @TargetServers = [TargetServers]
 FROM [SQLCfg].[tJobServer]
 WHERE [InstanceName] = @InstanceName;

END
GO

GRANT EXECUTE ON [SQLCfg].[pJobServerGet] TO [SQLCfgReportingRole];

GO 

IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pJobServerDelete' )
 DROP PROCEDURE [SQLCfg].[pJobServerDelete];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: Remove the metadata for an SQL instance JobServer
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**              
*******************************************************************************/

CREATE PROCEDURE [SQLCfg].[pJobServerDelete] 
 ( @InstanceName [NVARCHAR] (128) )
AS
BEGIN
 DECLARE @TextData [NVARCHAR](500);

 SET XACT_ABORT ON;
 SET NOCOUNT ON;

 BEGIN TRY

  DELETE [SQLCfg].[tJobServer]
  WHERE [InstanceName] = @InstanceName;

 END TRY

 BEGIN CATCH
  
  SET @TextData = '  @InstanceName = ' + ISNULL(CHAR(39) + @InstanceName + CHAR(39),'NULL');
  EXEC [SQLCfg].[pLogSQLError] @TextData, @@PROCID;
 
 END CATCH; 

END
GO

GRANT EXECUTE ON [SQLCfg].[pJobServerDelete] TO [SQLCfgServiceRole];

GO 

IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pJobServerSelectAll' )
 DROP PROCEDURE [SQLCfg].[pJobServerSelectAll];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: Fetch the metadata for all SQL Instance's Jobservers
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**              
*******************************************************************************/

CREATE PROCEDURE [SQLCfg].[pJobServerSelectAll] 
AS
BEGIN

 SET NOCOUNT ON;

 SELECT [InstanceName]
  , [Alerts]
  , [AlertSystem]
  , [Jobs]
  , [Operators]
  , [ProxyAccounts]
  , [TargetServers]
 FROM [SQLCfg].[tJobServer];

END
GO

GRANT EXECUTE ON [SQLCfg].[pJobServerSelectAll] TO [SQLCfgReportingRole];

GO 

IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pDbInsert' )
 DROP PROCEDURE [SQLCfg].[pDbInsert];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: Add the metadata for a database
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**              
*******************************************************************************/

CREATE PROCEDURE [SQLCfg].[pDbInsert] 
 ( @Name [NVARCHAR] (128) 
 , @InstanceName [NVARCHAR] (128) 
 , @ActiveDirectory [BIT] = 1
 , @ApplicationRoles [BIT] = 1
 , @Assemblies [BIT] = 1
 , @AsymmetricKeys [BIT] = 1
 , @Certificates [BIT] = 1
 , @DatabaseAuditSpecifications [BIT] = 1
 , @DatabaseOptions [BIT] = 1
 , @Defaults [BIT] = 1
 , @FullTextCatalogs [BIT] = 1
 , @FullTextStopLists [BIT] = 1
 , @PartitionFunctions [BIT] = 1
 , @PartitionSchemes [BIT] = 1
 , @PlanGuides [BIT] = 1
 , @Roles [BIT] = 1
 , @Rules [BIT] = 1
 , @Schemas [BIT] = 1
 , @ServiceBroker [BIT] = 1
 , @StoredProcedures [BIT] = 1
 , @SymmetricKeys [BIT] = 1
 , @Synonyms [BIT] = 1
 , @Tables [BIT] = 1
 , @Triggers [BIT] = 1
 , @UserDefinedAggregates [BIT] = 1
 , @UserDefinedDataTypes [BIT] = 1
 , @UserDefinedFunctions [BIT] = 1
 , @UserDefinedTableTypes [BIT] = 1
 , @UserDefinedTypes [BIT] = 1
 , @Users [BIT] = 1
 , @Views [BIT] = 1
 , @XMLSchemaCollections [BIT] = 1 )
AS
BEGIN
 DECLARE @TextData [NVARCHAR] (500);

 SET XACT_ABORT ON;
 SET NOCOUNT ON;

 BEGIN TRY

  INSERT [SQLCfg].[tDb]
   ( [Name]
   , [InstanceName]
   , [ActiveDirectory]
   , [ApplicationRoles]
   , [Assemblies]
   , [AsymmetricKeys]
   , [Certificates]
   , [DatabaseAuditSpecifications]
   , [DatabaseOptions]
   , [Defaults]
   , [FullTextCatalogs]
   , [FullTextStopLists]
   , [PartitionFunctions]
   , [PartitionSchemes]
   , [PlanGuides]
   , [Roles]
   , [Rules]
   , [Schemas]
   , [ServiceBroker]
   , [StoredProcedures]
   , [SymmetricKeys]
   , [Synonyms]
   , [Tables]
   , [Triggers]
   , [UserDefinedAggregates]
   , [UserDefinedDataTypes]
   , [UserDefinedFunctions]
   , [UserDefinedTableTypes]
   , [UserDefinedTypes]
   , [Users]
   , [Views]
   , [XMLSchemaCollections] )
  VALUES
   ( @Name
   , UPPER(@InstanceName)
   , @ActiveDirectory
   , @ApplicationRoles
   , @Assemblies
   , @AsymmetricKeys
   , @Certificates
   , @DatabaseAuditSpecifications
   , @DatabaseOptions
   , @Defaults
   , @FullTextCatalogs
   , @FullTextStopLists
   , @PartitionFunctions
   , @PartitionSchemes
   , @PlanGuides
   , @Roles
   , @Rules
   , @Schemas
   , @ServiceBroker
   , @StoredProcedures
   , @SymmetricKeys
   , @Synonyms
   , @Tables
   , @Triggers
   , @UserDefinedAggregates
   , @UserDefinedDataTypes
   , @UserDefinedFunctions
   , @UserDefinedTableTypes
   , @UserDefinedTypes
   , @Users
   , @Views
   , @XMLSchemaCollections );

 END TRY

 BEGIN CATCH

  SET @TextData = '   @Name = ' + ISNULL(CHAR(39) + @Name + CHAR(39),'NULL') + CHAR(13) + CHAR(10)
                + ' , @InstanceName = ' + ISNULL(CHAR(39) + @InstanceName + CHAR(39),'NULL') + CHAR(13) + CHAR(10)
                + ' , @ActiveDirectory = ' + ISNULL(CAST(@ActiveDirectory AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @ApplicationRoles = ' + ISNULL(CAST(@ApplicationRoles AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @Assemblies = ' + ISNULL(CAST(@Assemblies AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @AsymmetricKeys = ' + ISNULL(CAST(@AsymmetricKeys AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @Certificates = ' + ISNULL(CAST(@Certificates AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @DatabaseAuditSpecifications = ' + ISNULL(CAST(@DatabaseAuditSpecifications AS [VARCHAR] (6)),'NULL')
                + ' , @DatabaseOptions = ' + ISNULL(CAST(@DatabaseOptions AS [VARCHAR] (6)),'NULL')
                + ' , @Defaults = ' + ISNULL(CAST(@Defaults AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @FullTextCatalogs = ' + ISNULL(CAST(@FullTextCatalogs AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @FullTextStopLists = ' + ISNULL(CAST(@FullTextStopLists AS [VARCHAR] (6)),'NULL')
                + ' , @PartitionFunctions = ' + ISNULL(CAST(@PartitionFunctions AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @PartitionSchemes = ' + ISNULL(CAST(@PartitionSchemes AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @PlanGuides = ' + ISNULL(CAST(@PlanGuides AS [VARCHAR] (6)),'NULL')
                + ' , @Roles = ' + ISNULL(CAST(@Roles AS [VARCHAR] (6)),'NULL')
                + ' , @Rules = ' + ISNULL(CAST(@Rules AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(0)
                + ' , @Schemas = ' + ISNULL(CAST(@Schemas AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @ServiceBroker = ' + ISNULL(CAST(@ServiceBroker AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @StoredProcedures = ' + ISNULL(CAST(@StoredProcedures AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @SymmetricKeys = ' + ISNULL(CAST(@SymmetricKeys AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @Synonyms = ' + ISNULL(CAST(@Synonyms AS [VARCHAR] (6)),'NULL')
                + ' , @Tables = ' + ISNULL(CAST(@Tables AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @Triggers = ' + ISNULL(CAST(@Triggers AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @UserDefinedAggregates = ' + ISNULL(CAST(@UserDefinedAggregates AS [VARCHAR] (6)),'NULL')
                + ' , @UserDefinedDataTypes = ' + ISNULL(CAST(@UserDefinedDataTypes AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(0)
                + ' , @UserDefinedFunctions = ' + ISNULL(CAST(@UserDefinedFunctions AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @UserDefinedTableTypes = ' + ISNULL(CAST(@UserDefinedTableTypes AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @UserDefinedTypes = ' + ISNULL(CAST(@UserDefinedTypes AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @Users = ' + ISNULL(CAST(@Users AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @Views = ' + ISNULL(CAST(@Views AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @XMLSchemaCollections = ' + ISNULL(CAST(@XMLSchemaCollections AS [VARCHAR] (6)),'NULL');
    EXEC [SQLCfg].[pLogSQLError] @TextData, @@PROCID;

 END CATCH; 

END
GO

GRANT EXECUTE ON [SQLCfg].[pDbInsert] TO [SQLCfgServiceRole];

GO 

IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pDbUpdate' )
 DROP PROCEDURE [SQLCfg].[pDbUpdate];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: Modify the metadata for a database
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**              
*******************************************************************************/

CREATE PROCEDURE [SQLCfg].[pDbUpdate] 
 ( @Name [NVARCHAR] (128) 
 , @InstanceName [NVARCHAR] (128) 
 , @ActiveDirectory [BIT] = NULL
 , @ApplicationRoles [BIT] = NULL
 , @Assemblies [BIT] = NULL
 , @AsymmetricKeys [BIT] = NULL
 , @Certificates [BIT] = NULL
 , @DatabaseAuditSpecifications [BIT] = NULL
 , @DatabaseOptions [BIT] = NULL
 , @Defaults [BIT] = NULL
 , @FullTextCatalogs [BIT] = NULL
 , @FullTextStopLists [BIT] = NULL
 , @PartitionFunctions [BIT] = NULL
 , @PartitionSchemes [BIT] = NULL
 , @PlanGuides [BIT] = NULL
 , @Roles [BIT] = NULL
 , @Rules [BIT] = NULL
 , @Schemas [BIT] = NULL
 , @ServiceBroker [BIT] = NULL
 , @StoredProcedures [BIT] = NULL
 , @SymmetricKeys [BIT] = NULL
 , @Synonyms [BIT] = NULL
 , @Tables [BIT] = NULL
 , @Triggers [BIT] = NULL
 , @UserDefinedAggregates [BIT] = NULL
 , @UserDefinedDataTypes [BIT] = NULL
 , @UserDefinedFunctions [BIT] = NULL
 , @UserDefinedTableTypes [BIT] = NULL
 , @UserDefinedTypes [BIT] = NULL
 , @Users [BIT] = NULL
 , @Views [BIT] = NULL
 , @XMLSchemaCollections [BIT] = NULL )
AS
BEGIN
 DECLARE @TextData [NVARCHAR](500);

 SET XACT_ABORT ON;
 SET NOCOUNT ON;

 BEGIN TRY

  UPDATE [SQLCfg].[tDb]
  SET [ActiveDirectory] = ISNULL(@ActiveDirectory, [ActiveDirectory])
   , [ApplicationRoles] = ISNULL(@ApplicationRoles, [ApplicationRoles])
   , [Assemblies] = ISNULL(@Assemblies, [Assemblies])
   , [AsymmetricKeys] = ISNULL(@AsymmetricKeys, [AsymmetricKeys])
   , [Certificates] = ISNULL(@Certificates, [Certificates])
   , [DatabaseAuditSpecifications] = ISNULL(@DatabaseAuditSpecifications, [DatabaseAuditSpecifications])
   , [DatabaseOptions] = ISNULL(@DatabaseOptions, [DatabaseOptions])
   , [Defaults] = ISNULL(@Defaults, [Defaults])
   , [FullTextCatalogs] = ISNULL(@FullTextCatalogs, [FullTextCatalogs])
   , [FullTextStopLists] = ISNULL(@FullTextStopLists, [FullTextStopLists])
   , [PartitionFunctions] = ISNULL(@PartitionFunctions, [PartitionFunctions])
   , [PartitionSchemes] = ISNULL(@PartitionSchemes, [PartitionSchemes])
   , [PlanGuides] = ISNULL(@PlanGuides, [PlanGuides])
   , [Roles] = ISNULL(@Roles, [Roles])
   , [Rules] = ISNULL(@Rules, [Rules])
   , [Schemas] = ISNULL(@Schemas, [Schemas])
   , [ServiceBroker] = ISNULL(@ServiceBroker, [ServiceBroker])
   , [StoredProcedures] = ISNULL(@StoredProcedures, [StoredProcedures])
   , [SymmetricKeys] = ISNULL(@SymmetricKeys, [SymmetricKeys])
   , [Synonyms] = ISNULL(@Synonyms, [Synonyms])
   , [Tables] = ISNULL(@Tables, [Tables])
   , [Triggers] = ISNULL(@Triggers, [Triggers])
   , [UserDefinedAggregates] = ISNULL(@UserDefinedAggregates, [UserDefinedAggregates])
   , [UserDefinedDataTypes] = ISNULL(@UserDefinedDataTypes, [UserDefinedDataTypes])
   , [UserDefinedFunctions] = ISNULL(@UserDefinedFunctions, [UserDefinedFunctions])
   , [UserDefinedTableTypes] = ISNULL(@UserDefinedTableTypes, [UserDefinedTableTypes])
   , [UserDefinedTypes] = ISNULL(@UserDefinedTypes, [UserDefinedTypes])
   , [Users] = ISNULL(@Users, [Users])
   , [Views] = ISNULL(@Views, [Views])
   , [XMLSchemaCollections] = ISNULL(@XMLSchemaCollections, [XMLSchemaCollections])
  WHERE [Name] = @Name
  AND [InstanceName] = @InstanceName;

 END TRY

 BEGIN CATCH

  SET @TextData = '   @Name = ' + ISNULL(CHAR(39) + @Name + CHAR(39),'NULL') + CHAR(13) + CHAR(10)
                + ' , @InstanceName = ' + ISNULL(CHAR(39) + @InstanceName + CHAR(39),'NULL') + CHAR(13) + CHAR(10)
                + ' , @ActiveDirectory = ' + ISNULL(CAST(@ActiveDirectory AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @ApplicationRoles = ' + ISNULL(CAST(@ApplicationRoles AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @Assemblies = ' + ISNULL(CAST(@Assemblies AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @AsymmetricKeys = ' + ISNULL(CAST(@AsymmetricKeys AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @Certificates = ' + ISNULL(CAST(@Certificates AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @DatabaseAuditSpecifications = ' + ISNULL(CAST(@DatabaseAuditSpecifications AS [VARCHAR] (6)),'NULL')
                + ' , @DatabaseOptions = ' + ISNULL(CAST(@DatabaseOptions AS [VARCHAR] (6)),'NULL')
                + ' , @Defaults = ' + ISNULL(CAST(@Defaults AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @FullTextCatalogs = ' + ISNULL(CAST(@FullTextCatalogs AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @FullTextStopLists = ' + ISNULL(CAST(@FullTextStopLists AS [VARCHAR] (6)),'NULL')
                + ' , @PartitionFunctions = ' + ISNULL(CAST(@PartitionFunctions AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @PartitionSchemes = ' + ISNULL(CAST(@PartitionSchemes AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @PlanGuides = ' + ISNULL(CAST(@PlanGuides AS [VARCHAR] (6)),'NULL')
                + ' , @Roles = ' + ISNULL(CAST(@Roles AS [VARCHAR] (6)),'NULL')
                + ' , @Rules = ' + ISNULL(CAST(@Rules AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(0)
                + ' , @Schemas = ' + ISNULL(CAST(@Schemas AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @ServiceBroker = ' + ISNULL(CAST(@ServiceBroker AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @StoredProcedures = ' + ISNULL(CAST(@StoredProcedures AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @SymmetricKeys = ' + ISNULL(CAST(@SymmetricKeys AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @Synonyms = ' + ISNULL(CAST(@Synonyms AS [VARCHAR] (6)),'NULL')
                + ' , @Tables = ' + ISNULL(CAST(@Tables AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @Triggers = ' + ISNULL(CAST(@Triggers AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @UserDefinedAggregates = ' + ISNULL(CAST(@UserDefinedAggregates AS [VARCHAR] (6)),'NULL')
                + ' , @UserDefinedDataTypes = ' + ISNULL(CAST(@UserDefinedDataTypes AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(0)
                + ' , @UserDefinedFunctions = ' + ISNULL(CAST(@UserDefinedFunctions AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @UserDefinedTableTypes = ' + ISNULL(CAST(@UserDefinedTableTypes AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @UserDefinedTypes = ' + ISNULL(CAST(@UserDefinedTypes AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @Users = ' + ISNULL(CAST(@Users AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @Views = ' + ISNULL(CAST(@Views AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @XMLSchemaCollections = ' + ISNULL(CAST(@XMLSchemaCollections AS [VARCHAR] (6)),'NULL');
    EXEC [SQLCfg].[pLogSQLError] @TextData, @@PROCID;

 END CATCH; 

END
GO

GRANT EXECUTE ON [SQLCfg].[pDbUpdate] TO [SQLCfgServiceRole];

GO 

IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pDbDelete' )
 DROP PROCEDURE [SQLCfg].[pDbDelete];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: Remove the metadata for a database
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**              
*******************************************************************************/

CREATE PROCEDURE [SQLCfg].[pDbDelete] 
 ( @Name [NVARCHAR] (128)
 , @InstanceName [NVARCHAR] (128) )
AS
BEGIN
 DECLARE @TextData [NVARCHAR](500);

 SET XACT_ABORT ON;
 SET NOCOUNT ON;

 BEGIN TRY

  DELETE [SQLCfg].[tDb]
  WHERE [Name] = @Name
  AND [InstanceName] = @InstanceName; 

 END TRY

 BEGIN CATCH

  SET @TextData = '   @Name = ' + ISNULL(CHAR(39) + @Name + CHAR(39),'NULL') + CHAR(13) + CHAR(10)
                + ' , @InstanceName = ' + ISNULL(CHAR(39) + @InstanceName + CHAR(39),'NULL');
    EXEC [SQLCfg].[pLogSQLError] @TextData, @@PROCID;

 END CATCH; 

END
GO

GRANT EXECUTE ON [SQLCfg].[pDbDelete] TO [SQLCfgServiceRole];

GO 

IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pDbGet' )
 DROP PROCEDURE [SQLCfg].[pDbGet];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: Fetch the metadata for a database
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**              
*******************************************************************************/

CREATE PROCEDURE [SQLCfg].[pDbGet] 
 ( @Name [NVARCHAR] (128) 
 , @InstanceName [NVARCHAR] (128) 
 , @ActiveDirectory [BIT] OUTPUT
 , @ApplicationRoles [BIT] OUTPUT
 , @Assemblies [BIT] OUTPUT
 , @AsymmetricKeys [BIT] OUTPUT
 , @Certificates [BIT] OUTPUT
 , @DatabaseAuditSpecfications [BIT] OUTPUT
 , @DatabaseOptions [BIT] OUTPUT
 , @Defaults [BIT] OUTPUT
 , @FullTextCatalogs [BIT] OUTPUT
 , @FullTextStopLists [BIT] OUTPUT
 , @PartitionFunctions [BIT] OUTPUT
 , @PartitionSchemes [BIT] OUTPUT
 , @PlanGuides [BIT] OUTPUT
 , @Roles [BIT] OUTPUT
 , @Rules [BIT] OUTPUT
 , @Schemas [BIT] OUTPUT
 , @ServiceBroker [BIT] OUTPUT
 , @StoredProcedures [BIT] OUTPUT
 , @SymmetricKeys [BIT] OUTPUT
 , @Synonyms [BIT] OUTPUT
 , @Tables [BIT] OUTPUT
 , @Triggers [BIT] OUTPUT
 , @UserDefinedAggregates [BIT] OUTPUT
 , @UserDefinedDataTypes [BIT] OUTPUT
 , @UserDefinedFunctions [BIT] OUTPUT
 , @UserDefinedTableTypes [BIT] OUTPUT
 , @UserDefinedTypes [BIT] OUTPUT
 , @Users [BIT] OUTPUT
 , @Views [BIT] OUTPUT
 , @XMLSchemaCollections [BIT] OUTPUT )
AS
BEGIN

 SET NOCOUNT ON;

 SELECT @ActiveDirectory = [ActiveDirectory]
  , @ApplicationRoles = [ApplicationRoles]
  , @Assemblies = [Assemblies]
  , @AsymmetricKeys = [AsymmetricKeys]
  , @Certificates = [Certificates]
  , @DatabaseAuditSpecfications = [DatabaseAuditSpecifications]
  , @DatabaseOptions = [DatabaseOptions]
  , @Defaults = [Defaults]
  , @FullTextCatalogs = [FullTextCatalogs]
  , @FullTextStopLists = [FullTextStopLists]
  , @PartitionFunctions = [PartitionFunctions]
  , @PartitionSchemes = [PartitionSchemes]
  , @PlanGuides = [PlanGuides]
  , @Roles = [Roles]
  , @Rules = [Rules]
  , @Schemas = [Schemas]
  , @ServiceBroker = [ServiceBroker]
  , @StoredProcedures = [StoredProcedures]
  , @SymmetricKeys = [SymmetricKeys]
  , @Synonyms = [Synonyms]
  , @Tables = [Tables]
  , @Triggers = [Triggers]
  , @UserDefinedAggregates = [UserDefinedAggregates]
  , @UserDefinedDataTypes = [UserDefinedDataTypes]
  , @UserDefinedFunctions = [UserDefinedFunctions]
  , @UserDefinedTableTypes = [UserDefinedTableTypes]
  , @UserDefinedTypes = [UserDefinedTypes]
  , @Users = [Users]
  , @Views = [Views]
  , @XMLSchemaCollections = [XMLSchemaCollections]
 FROM [SQLCfg].[tDb]
 WHERE [Name] = @Name
 AND [InstanceName] = @InstanceName;

END
GO

GRANT EXECUTE ON [SQLCfg].[pDbGet] TO [SQLCfgReportingRole];

GO 

IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pDbSelectAllForInstance' )
 DROP PROCEDURE [SQLCfg].[pDbSelectAllForInstance];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: Fetch the metadata for all database on an SQL Instance 
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**              
*******************************************************************************/

CREATE PROCEDURE [SQLCfg].[pDbSelectAllForInstance] 
 ( @InstanceName [NVARCHAR] (128) )
AS
BEGIN

 SET NOCOUNT ON;

 SELECT [Name]
  , [InstanceName]
  , [ActiveDirectory]
  , [ApplicationRoles]
  , [Assemblies]
  , [AsymmetricKeys]
  , [Certificates]
  , [DatabaseAuditSpecifications]
  , [DatabaseOptions]
  , [Defaults]
  , [FullTextCatalogs]
  , [FullTextStopLists]
  , [PartitionFunctions]
  , [PartitionSchemes]
  , [PlanGuides]
  , [Roles]
  , [Rules]
  , [Schemas]
  , [ServiceBroker]
  , [StoredProcedures]
  , [SymmetricKeys]
  , [Synonyms]
  , [Tables]
  , [Triggers]
  , [UserDefinedAggregates]
  , [UserDefinedDataTypes]
  , [UserDefinedFunctions]
  , [UserDefinedTableTypes]
  , [UserDefinedTypes]
  , [Users]
  , [Views]
  , [XMLSchemaCollections]
 FROM [SQLCfg].[tDb]
 WHERE [InstanceName] = @InstanceName;

END
GO

GRANT EXECUTE ON [SQLCfg].[pDbSelectAllForInstance] TO [SQLCfgReportingRole];

GO

IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pDbSelectAll' )
 DROP PROCEDURE [SQLCfg].[pDbSelectAll];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: Fetch the metadata for all databases 
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**              
*******************************************************************************/

CREATE PROCEDURE [SQLCfg].[pDbSelectAll] 
AS
BEGIN

 SET NOCOUNT ON;

 SELECT [Name]
  , [InstanceName]
  , [ActiveDirectory]
  , [ApplicationRoles]
  , [Assemblies]
  , [AsymmetricKeys]
  , [Certificates]
  , [DatabaseAuditSpecifications]
  , [DatabaseOptions]
  , [Defaults]
  , [FullTextCatalogs]
  , [FullTextStopLists]
  , [PartitionFunctions]
  , [PartitionSchemes]
  , [PlanGuides]
  , [Roles]
  , [Rules]
  , [Schemas]
  , [ServiceBroker]
  , [StoredProcedures]
  , [SymmetricKeys]
  , [Synonyms]
  , [Tables]
  , [Triggers]
  , [UserDefinedAggregates]
  , [UserDefinedDataTypes]
  , [UserDefinedFunctions]
  , [UserDefinedTableTypes]
  , [UserDefinedTypes]
  , [Users]
  , [Views]
  , [XMLSchemaCollections]
 FROM [SQLCfg].[tDb];

END
GO

GRANT EXECUTE ON [SQLCfg].[pDbSelectAll] TO [SQLCfgReportingRole];

GO

IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pServiceBrokerInsert' )
 DROP PROCEDURE [SQLCfg].[pServiceBrokerInsert];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: Add the metadata for a database Service Broker 
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**              
*******************************************************************************/

CREATE PROCEDURE [SQLCfg].[pServiceBrokerInsert] 
 ( @DatabaseName [NVARCHAR] (128) 
 , @InstanceName [NVARCHAR] (128) 
 , @MessageTypes [BIT] = 1
 , @Priorities [BIT] = 1
 , @Queues [BIT] = 1
 , @RemoteServiceBindings [BIT] = 1
 , @Routes [BIT] = 1
 , @ServiceContracts [BIT] = 1
 , @Services [BIT] = 1 )
AS
BEGIN
 DECLARE @TextData [NVARCHAR](500);

 SET XACT_ABORT ON;
 SET NOCOUNT ON;

 BEGIN TRY

  INSERT [SQLCfg].[tServiceBroker]
   ( [DatabaseName]
   , [InstanceName]
   , [MessageTypes]
   , [Priorities]
   , [Queues]
   , [RemoteServiceBindings]
   , [Routes]
   , [ServiceContracts]
   , [Services] )
  VALUES
   ( @DatabaseName
   , UPPER(@InstanceName)
   , @MessageTypes
   , @Priorities
   , @Queues
   , @RemoteServiceBindings
   , @Routes
   , @ServiceContracts
   , @Services );

 END TRY

 BEGIN CATCH

  SET @TextData = '   @DatabaseName = ' + ISNULL(CHAR(39) + @DatabaseName + CHAR(39),'NULL') + CHAR(13) + CHAR(10)
                + ' , @InstanceName = ' + ISNULL(CHAR(39) + @InstanceName + CHAR(39),'NULL') + CHAR(13) + CHAR(10)
                + ' , @MessageTypes = ' + ISNULL(CAST(@MessageTypes AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @Priorities = ' + ISNULL(CAST(@Priorities AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @Queues = ' + ISNULL(CAST(@Queues AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @RemoteServiceBindings = ' + ISNULL(CAST(@RemoteServiceBindings AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @Routes = ' + ISNULL(CAST(@Routes AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @ServiceContracts = ' + ISNULL(CAST(@ServiceContracts AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @Services = ' + ISNULL(CAST(@Services AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10);
  EXEC [SQLCfg].[pLogSQLError] @TextData, @@PROCID;
 
END CATCH; 

END
GO

GRANT EXECUTE ON [SQLCfg].[pServiceBrokerInsert] TO [SQLCfgServiceRole];

GO 

IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pServiceBrokerUpdate' )
 DROP PROCEDURE [SQLCfg].[pServiceBrokerUpdate];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: Modify the metadata for a database Service Broker 
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**              
*******************************************************************************/

CREATE PROCEDURE [SQLCfg].[pServiceBrokerUpdate] 
 ( @DatabaseName [NVARCHAR] (128) 
 , @InstanceName [NVARCHAR] (128) 
 , @MessageTypes [BIT] = NULL
 , @Priorities [BIT] = NULL
 , @Queues [BIT] = NULL
 , @RemoteServiceBindings [BIT] = NULL
 , @Routes [BIT] = NULL
 , @ServiceContracts [BIT] = NULL
 , @Services [BIT] = NULL )
AS
BEGIN
 DECLARE @TextData [NVARCHAR](500);

 SET XACT_ABORT ON;
 SET NOCOUNT ON;

 BEGIN TRY

  UPDATE [SQLCfg].[tServiceBroker]
  SET [MessageTypes] = ISNULL(@MessageTypes, [MessageTypes])
   , [Priorities] = ISNULL(@Priorities, [Priorities]) 
   , [Queues] = ISNULL(@Queues, [Queues])
   , [RemoteServiceBindings] = ISNULL(@RemoteServiceBindings, [RemoteServiceBindings])
   , [Routes] = ISNULL(@Routes, [Routes])
   , [ServiceContracts] = ISNULL(@ServiceContracts, [ServiceContracts])
   , [Services] = ISNULL(@Services, [Services])
  WHERE [DatabaseName] = @DatabaseName
  AND [InstanceName] = @InstanceName;

 END TRY

 BEGIN CATCH

  SET @TextData = '   @DatabaseName = ' + ISNULL(CHAR(39) + @DatabaseName + CHAR(39),'NULL') + CHAR(13) + CHAR(10)
                + ' , @InstanceName = ' + ISNULL(CHAR(39) + @InstanceName + CHAR(39),'NULL') + CHAR(13) + CHAR(10)
                + ' , @MessageTypes = ' + ISNULL(CAST(@MessageTypes AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @Priorities = ' + ISNULL(CAST(@Priorities AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @Queues = ' + ISNULL(CAST(@Queues AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @RemoteServiceBindings = ' + ISNULL(CAST(@RemoteServiceBindings AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @Routes = ' + ISNULL(CAST(@Routes AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @ServiceContracts = ' + ISNULL(CAST(@ServiceContracts AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @Services = ' + ISNULL(CAST(@Services AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10);
  EXEC [SQLCfg].[pLogSQLError] @TextData, @@PROCID;
 
 END CATCH; 

END
GO

GRANT EXECUTE ON [SQLCfg].[pServiceBrokerUpdate] TO [SQLCfgServiceRole];

GO 

IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pServiceBrokerDelete' )
 DROP PROCEDURE [SQLCfg].[pServiceBrokerDelete];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: Remove the metadata for a database Service Broker 
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**              
*******************************************************************************/

CREATE PROCEDURE [SQLCfg].[pServiceBrokerDelete] 
 ( @DatabaseName [NVARCHAR] (128)
 , @InstanceName [NVARCHAR] (128) )
AS
BEGIN
 DECLARE @TextData [NVARCHAR](500);

 SET XACT_ABORT ON;
 SET NOCOUNT ON;

 BEGIN TRY

  DELETE [SQLCfg].[tServiceBroker]
  WHERE [DatabaseName] = @DatabaseName
  AND [InstanceName] = @InstanceName; 

 END TRY

 BEGIN CATCH
  SET @TextData = '   @DatabaseName = ' + ISNULL(CHAR(39) + @DatabaseName + CHAR(39),'NULL') + CHAR(13) + CHAR(10)
                + ' , @InstanceName = ' + ISNULL(CHAR(39) + @InstanceName + CHAR(39),'NULL');
    EXEC [SQLCfg].[pLogSQLError] @TextData, @@PROCID;
 END CATCH; 

END
GO

GRANT EXECUTE ON [SQLCfg].[pServiceBrokerDelete] TO [SQLCfgServiceRole];

GO 

IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pServiceBrokerGet' )
 DROP PROCEDURE [SQLCfg].[pServiceBrokerGet];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: Fetch the metadata for a database Service Broker 
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**              
*******************************************************************************/

CREATE PROCEDURE [SQLCfg].[pServiceBrokerGet] 
 ( @DatabaseName [NVARCHAR] (128) 
 , @InstanceName [NVARCHAR] (128) 
 , @MessageTypes [BIT] OUTPUT
 , @Priorities [BIT] OUTPUT
 , @Queues [BIT] OUTPUT
 , @RemoteServiceBindings [BIT] OUTPUT
 , @Routes [BIT] OUTPUT
 , @ServiceContracts [BIT] OUTPUT
 , @Services [BIT] OUTPUT )
AS
BEGIN

 SET NOCOUNT ON;

 SELECT @MessageTypes = [MessageTypes]
  , @Priorities = [Priorities] 
  , @Queues = [Queues]
  , @RemoteServiceBindings = [RemoteServiceBindings]
  , @Routes = [Routes]
  , @ServiceContracts = [ServiceContracts]
  , @Services = [Services]
 FROM [SQLCfg].[tServiceBroker]
 WHERE [DatabaseName] = @DatabaseName
 AND [InstanceName] = @InstanceName;

END
GO

GRANT EXECUTE ON [SQLCfg].[pServiceBrokerGet] TO [SQLCfgReportingRole];

GO 

IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pServiceBrokerSelectAllForInstance' )
 DROP PROCEDURE [SQLCfg].[pServiceBrokerSelectAllForInstance];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: Fetch the metadata for the Service Brokers in all database on an SQL  
**       Instance  
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**              
*******************************************************************************/

CREATE PROCEDURE [SQLCfg].[pServiceBrokerSelectAllForInstance] 
 ( @InstanceName [NVARCHAR] (128) )
AS
BEGIN

 SET NOCOUNT ON;

 SELECT [DatabaseName]
  , [InstanceName]
  , [MessageTypes]
  , [Priorities]
  , [Queues]
  , [RemoteServiceBindings]
  , [Routes]
  , [ServiceContracts]
  , [Services]
 FROM [SQLCfg].[tServiceBroker]
 WHERE [InstanceName] = @InstanceName;

END
GO

GRANT EXECUTE ON [SQLCfg].[pServiceBrokerSelectAllForInstance] TO [SQLCfgReportingRole];

GO 

IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pServiceBrokerSelectAll' )
 DROP PROCEDURE [SQLCfg].[pServiceBrokerSelectAll];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: Fetch the metadata for the Service Brokers in all database on all SQL  
**       Instances
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**              
*******************************************************************************/

CREATE PROCEDURE [SQLCfg].[pServiceBrokerSelectAll] 
AS
BEGIN

 SET NOCOUNT ON;

 SELECT [DatabaseName]
  , [InstanceName]
  , [MessageTypes]
  , [Priorities]
  , [Queues]
  , [RemoteServiceBindings]
  , [Routes]
  , [ServiceContracts]
  , [Services]
 FROM [SQLCfg].[tServiceBroker];

END
GO

GRANT EXECUTE ON [SQLCfg].[pServiceBrokerSelectAll] TO [SQLCfgReportingRole];


GO

IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pConnectionInsert' )
 DROP PROCEDURE [SQLCfg].[pConnectionInsert];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: Add the connection details for a target SQL instance. 
** Note: LoginName and encrypted password always added by update and requires 
**       symmetric key that is installed by archive planning UI
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**              
*******************************************************************************/
CREATE PROCEDURE [SQLCfg].[pConnectionInsert] 
 ( @InstanceName [NVARCHAR] (128)
 , @EncryptedConnection [BIT]
 , @TrustServerCertificate [BIT]
 , @NetworkProtocol [NVARCHAR] (128)
 , @ConnectionTimeout [INT]
 , @LoginSecure [BIT] )
AS
BEGIN
 DECLARE @TextData [NVARCHAR](800);

 SET XACT_ABORT ON;
 SET NOCOUNT ON;

 BEGIN TRY

  -- a logical deleted row will break the insert 
  IF EXISTS (SELECT * FROM [SQLCfg].[tConnection]
             WHERE [InstanceName] = @InstanceName
             AND [IsDeleted] = 1)
    UPDATE [SQLCfg].[tConnection]
    SET [EncryptedConnection] = @EncryptedConnection
     , [TrustServerCertificate] = @TrustServerCertificate
     , [NetworkProtocol] = @NetworkProtocol
     , [ConnectionTimeout] = @ConnectionTimeout
     , [LoginSecure] = @LoginSecure
     , [IsDeleted] = 0
    WHERE [InstanceName] = @InstanceName
    AND [IsDeleted] = 1;
   ELSE
    INSERT [SQLCfg].[tConnection]
     ( [InstanceName]
     , [EncryptedConnection]
     , [TrustServerCertificate]
     , [NetworkProtocol]
     , [ConnectionTimeout]
     , [LoginSecure] )
    VALUES 
     ( UPPER(@InstanceName) 
     , @EncryptedConnection
     , @TrustServerCertificate 
     , @NetworkProtocol
     , @ConnectionTimeout
     , @LoginSecure); 

 END TRY

 BEGIN CATCH

  SET @TextData = '   @InstanceName = ' + ISNULL(CHAR(39) + @InstanceName + CHAR(39),'NULL') + CHAR(13) + CHAR(10)
                + ' , @EncryptedConnection = ' + ISNULL(CAST(@EncryptedConnection AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @TrustServerCertificate = ' + ISNULL(CAST(@TrustServerCertificate AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @NetworkProtocol = ' + ISNULL(CAST(@NetworkProtocol AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @ConnectionTimeout = ' + ISNULL(CAST(@ConnectionTimeout AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @LoginSecure = ' + ISNULL(CAST(@LoginSecure AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10);
  EXEC [SQLCfg].[pLogSQLError] @TextData, @@PROCID;

 END CATCH; 

END
GO

GRANT EXECUTE ON [SQLCfg].[pConnectionInsert] TO [SQLCfgAdminRole];

GO 

IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pConnectionUpdate' )
 DROP PROCEDURE [SQLCfg].[pConnectionUpdate];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: Optimistic update of the connection details for a target SQL instance.
**  Note: SQL Login and encrypted password always added by isolated update and 
**        requires symmetric key that is installed by archive planning UI
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**              
*******************************************************************************/
CREATE PROCEDURE [SQLCfg].[pConnectionUpdate] 
 ( @InstanceName [NVARCHAR] (128)
 , @EncryptedConnection [BIT]
 , @TrustServerCertificate [BIT]
 , @NetworkProtocol [NVARCHAR] (128)
 , @ConnectionTimeout [INT]
 , @LoginSecure [BIT] 
 , @Original_InstanceName [NVARCHAR] (128)
 , @Original_EncryptedConnection [BIT]
 , @Original_TrustServerCertificate [BIT]
 , @IsNull_NetworkProtocol [INT]
 , @Original_NetworkProtocol [NVARCHAR] (128)
 , @Original_ConnectionTimeout [INT]
 , @Original_LoginSecure [BIT] )
AS
BEGIN
 DECLARE @TextData [NVARCHAR] (500);

 SET XACT_ABORT ON;
 SET NOCOUNT OFF;

 BEGIN TRY

  UPDATE [SQLCfg].[tConnection]
  SET [EncryptedConnection] = ISNULL(@EncryptedConnection, [EncryptedConnection])
   , [TrustServerCertificate] = ISNULL(@TrustServerCertificate, [TrustServerCertificate])
   , [NetworkProtocol] = ISNULL(@NetworkProtocol, [NetworkProtocol])
   , [ConnectionTimeout] = ISNULL(@ConnectionTimeout, [ConnectionTimeout])
   , [LoginSecure] = ISNULL(@LoginSecure, [LoginSecure])
  WHERE [InstanceName] = @InstanceName 
  AND [EncryptedConnection] = @Original_EncryptedConnection 
  AND [TrustServerCertificate] = @Original_TrustServerCertificate 
  AND (   ( @IsNull_NetworkProtocol = 1 
           AND [NetworkProtocol] IS NULL) 
       OR [NetworkProtocol] = @Original_NetworkProtocol) 
  AND [ConnectionTimeout] = @Original_ConnectionTimeout 
  AND [LoginSecure] = @Original_LoginSecure;

 END TRY

 BEGIN CATCH

  SET @TextData = '   @InstanceName = ' + ISNULL(CHAR(39) + @InstanceName + CHAR(39),'NULL') + CHAR(13) + CHAR(10)
                + ' , @EncryptedConnection = ' + ISNULL(CAST(@EncryptedConnection AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @TrustServerCertificate = ' + ISNULL(CAST(@TrustServerCertificate AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @NetworkProtocol = ' + ISNULL(CAST(@NetworkProtocol AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @ConnectionTimeout = ' + ISNULL(CAST(@ConnectionTimeout AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @LoginSecure = ' + ISNULL(CAST(@LoginSecure AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10);
  EXEC [SQLCfg].[pLogSQLError] @TextData, @@PROCID;

 END CATCH

END
GO

GRANT EXECUTE ON [SQLCfg].[pConnectionUpdate] TO [SQLCfgAdminRole];

GO 

IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pConnectionGet' )
 DROP PROCEDURE [SQLCfg].[pConnectionGet];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: Fetch the connection details for a target SQL instance.
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**              
*******************************************************************************/

CREATE PROCEDURE [SQLCfg].[pConnectionGet] 
 ( @InstanceName [NVARCHAR] (128)  
 , @EncryptedConnection [BIT] OUTPUT
 , @TrustServerCertificate [BIT] OUTPUT
 , @NetworkProtocol [NVARCHAR] (128) OUTPUT
 , @ConnectionTimeout [INT] OUTPUT
 , @LoginSecure [BIT] OUTPUT ) 
AS
BEGIN

 SET NOCOUNT ON;

 SELECT @EncryptedConnection = [EncryptedConnection]
  , @TrustServerCertificate = [TrustServerCertificate]
  , @NetworkProtocol = [NetworkProtocol]
  , @ConnectionTimeout = [ConnectionTimeout]
  , @LoginSecure = [LoginSecure]
 FROM [SQLCfg].[tConnection]
 WHERE [InstanceName] = @InstanceName
 AND [IsDeleted] = 0;

END
GO

GRANT EXECUTE ON [SQLCfg].[pConnectionGet] TO [SQLCfgServiceRole];

GO 

IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pConnectionDelete' )
 DROP PROCEDURE [SQLCfg].[pConnectionDelete];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: Remove the connection details for a target SQL instance. 
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**              
*******************************************************************************/
CREATE PROCEDURE [SQLCfg].[pConnectionDelete] 
 ( @InstanceName [NVARCHAR] (128)
  , @EncryptedConnection [BIT] 
  , @TrustServerCertificate [BIT]
  , @IsNull_NetworkProtocol [INT]
  , @NetworkProtocol [NVARCHAR] (128)
  , @ConnectionTimeout [INT]
  , @LoginSecure [BIT] )
AS
BEGIN
 DECLARE @TextData [NVARCHAR](500);

 SET XACT_ABORT ON;
 SET NOCOUNT OFF;

 BEGIN TRY
  -- get rid of the row if it has no children
  -- otherwise will live with a logical delete
  IF NOT EXISTS (SELECT * FROM [SQLCfg].[tInstance]
                 WHERE [Name] = @InstanceName) 
   DELETE FROM [SQLCfg].[tConnection] 
   WHERE [InstanceName] = @InstanceName 
   AND [EncryptedConnection] = @EncryptedConnection 
   AND [TrustServerCertificate] = @TrustServerCertificate 
   AND (   ( @IsNull_NetworkProtocol = 1 
             AND [NetworkProtocol] IS NULL) 
        OR ([NetworkProtocol] = @NetworkProtocol)) 
   AND [ConnectionTimeout] = @ConnectionTimeout 
   AND [LoginSecure] = @LoginSecure;
 ELSE
   UPDATE [SQLCfg].[tConnection]
   SET [IsDeleted] = 1 
   WHERE [InstanceName] = @InstanceName 
   AND [EncryptedConnection] = @EncryptedConnection 
   AND [TrustServerCertificate] = @TrustServerCertificate 
   AND (   ( @IsNull_NetworkProtocol = 1 
             AND [NetworkProtocol] IS NULL) 
        OR ([NetworkProtocol] = @NetworkProtocol)) 
   AND [ConnectionTimeout] = @ConnectionTimeout 
   AND [LoginSecure] = @LoginSecure;

 END TRY

 BEGIN CATCH
  SET @TextData = '   @InstanceName = ' + ISNULL(CHAR(39) + @InstanceName + CHAR(39),'NULL') + CHAR(13) + CHAR(10)
                + ' , @EncryptedConnection = ' + CONVERT(NCHAR(1),@EncryptedConnection) + CHAR(13) + CHAR(10)
                + ' , @TrustServerCertificate = ' + CONVERT(NCHAR(1),@TrustServerCertificate) + CHAR(13) + CHAR(10)
                + ' , @IsNull_NetworkProtocol = ' + CONVERT(NVARCHAR(10),@IsNull_NetworkProtocol) + CHAR(13) + CHAR(10)
                + ' , @NetworkProtocol = ' + ISNULL(CHAR(39) + @NetworkProtocol + CHAR(39),'NULL') + CHAR(13) + CHAR(10)
                + ' , @ConnectionTimeout = ' + CONVERT(NVARCHAR(10),@ConnectionTimeout) + CHAR(13) + CHAR(10)
                + ' , @LoginSecure = ' + CONVERT(NCHAR(1),@LoginSecure);
  EXEC [SQLCfg].[pLogSQLError] @TextData, @@PROCID;
 END CATCH; 

END
GO

GRANT EXECUTE ON [SQLCfg].[pConnectionDelete] TO [SQLCfgAdminRole];

GO 

IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pConnectionSelectAll' )
 DROP PROCEDURE [SQLCfg].[pConnectionSelectAll];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: Fetch connection details for all target SQL instances.
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**              
*******************************************************************************/

CREATE PROCEDURE [SQLCfg].[pConnectionSelectAll] 
AS
BEGIN

 SET NOCOUNT ON;

 SELECT [InstanceName]
  , [EncryptedConnection]
  , [TrustServerCertificate]
  , [NetworkProtocol]
  , [ConnectionTimeout]
  , [LoginSecure]
 FROM [SQLCfg].[tConnection] 
 WHERE [IsDeleted] = 0;

END
GO

GRANT EXECUTE ON [SQLCfg].[pConnectionSelectAll] TO [SQLCfgReportingRole];

GO

IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pConnectionGetTargetConnectionString' )
 DROP PROCEDURE [SQLCfg].[pConnectionGetTargetConnectionString];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: return the connection string for a target instance.
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**              
*******************************************************************************/

CREATE PROCEDURE [SQLCfg].[pConnectionGetTargetConnectionString] 
 ( @SQLInstance [NVARCHAR] (128) )
AS
BEGIN

 SET NOCOUNT ON;

 SELECT 'Data Source=' + [InstanceName] + ';' 
  + CASE WHEN [LoginSecure] = 1 
         THEN 'Integrated Security=True;' 
         ELSE 'Integrated Security=False;User ID=' + [LoginName] + ';Password=password;'
         END 
  + CASE WHEN [EncryptedConnection] = 1 then 'Encrypt=True;' ELSE '' END 
  + CASE WHEN [TrustServerCertificate] = 1 THEN 'TrustServerCertificate=True;' ELSE '' END
  + CASE WHEN [NetworkProtocol] <> '' THEN 'Network Library=' + LEFT([NetworkProtocol], 8) + ';' ELSE '' END
 FROM [SQLCfg].[tConnection]
 WHERE [InstanceName] = @SQLInstance

END
GO

GRANT EXECUTE ON [SQLCfg].[pConnectionGetTargetConnectionString] TO [SQLCfgAdminRole];

GO

IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pConnectionUserUpdate' )
 DROP PROCEDURE [SQLCfg].[pConnectionUserUpdate];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: Add login and encrypt the password for an SQL Authenticated archive 
**       target instance 
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**              
*******************************************************************************/

CREATE PROCEDURE [SQLCfg].[pConnectionUserUpdate] 
 ( @InstanceName [NVARCHAR] (128) 
 , @LoginName [NVARCHAR] (128) 
 , @Password [NVARCHAR] (128) )
AS
BEGIN
 DECLARE @TextData [NVARCHAR](500);

 SET XACT_ABORT ON;
 SET NOCOUNT ON;

 BEGIN TRY

  OPEN SYMMETRIC KEY PasswordKey
    DECRYPTION BY CERTIFICATE ArchiveUsers;

  UPDATE [SQLCfg].[tConnection]
  SET LoginName = @LoginName 
   , EncryptedPassword = EncryptByKey(Key_GUID('PasswordKey'), @Password) 
  WHERE [InstanceName] = @InstanceName;

 END TRY

  BEGIN CATCH  

  SET @TextData = '   @InstanceName = ' + ISNULL(CHAR(39) + @InstanceName + CHAR(39),'NULL') + CHAR(13) + CHAR(10)
                + ' , @LoginName = ' + ISNULL(CHAR(39) + @LoginName + CHAR(39),'NULL') + CHAR(13) + CHAR(10)
                + ' , @Password = <encrypted>';
  EXEC [SQLCfg].[pLogSQLError] @TextData, @@PROCID;

 END CATCH; 

END
GO

GRANT EXECUTE ON [SQLCfg].[pConnectionUserUpdate] TO [SQLCfgAdminRole];

GO 

IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pConnectionUserGet' )
 DROP PROCEDURE [SQLCfg].[pConnectionUserGet];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: Get SQL Login and decrypt the password for an SQL Authenticated 
**       target instance 
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**              
*******************************************************************************/

CREATE PROCEDURE [SQLCfg].[pConnectionUserGet] 
 ( @InstanceName [NVARCHAR] (128)
 , @LoginName [NVARCHAR] (128) OUTPUT 
 , @Password [NVARCHAR] (128) OUTPUT )
AS
BEGIN

 OPEN SYMMETRIC KEY PasswordKey
   DECRYPTION BY CERTIFICATE ArchiveUsers;

 SELECT @LoginName = [LoginName] 
  , @Password = ISNULL(CONVERT([NVARCHAR] (128), DECRYPTBYKEY(EncryptedPassword)),'') 
 FROM [SQLCfg].[tConnection]
 WHERE [InstanceName] = @InstanceName;

END
GO

GRANT EXECUTE ON [SQLCfg].[pConnectionUserGet] TO [SQLCfgServiceRole];

GO 

IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pScheduleInsert' )
 DROP PROCEDURE [SQLCfg].[pScheduleInsert];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: Add the archive schedule for an SQL instance. 
** Note: encrypted password always added by update and requires symmetric key
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**    11/10/2009     bw                 remove QueryBaseline references 
**              
*******************************************************************************/

CREATE PROCEDURE [SQLCfg].[pScheduleInsert] 
 ( @InstanceName [NVARCHAR] (128)
 , @Interval [INT] 
 , @IntervalType [NVARCHAR] (10) 
 , @IntervalBaseDt [DATETIME]
 , @UseEventNotifications [BIT]
 , @IsActive [BIT]
 , @Id [INT] OUTPUT )
AS
BEGIN
 DECLARE @TextData [NVARCHAR](800);

 SET XACT_ABORT ON;
 SET NOCOUNT ON;

 BEGIN TRY

  INSERT [SQLCfg].[tSchedule]
   ( [InstanceName]
   , [Interval]
   , [IntervalType]
   , [IntervalBaseDt]
   , [UseEventNotifications]
   , [IsActive]) 
  VALUES 
   ( UPPER(@InstanceName) 
   , @Interval
   , @IntervalType
   , @IntervalBaseDt
   , @UseEventNotifications
   , @IsActive ); 

 SELECT @Id = SCOPE_IDENTITY();

 END TRY

  BEGIN CATCH
 
  SET @TextData = '   @InstanceName = ' + ISNULL(CHAR(39) + @InstanceName + CHAR(39),'NULL') + CHAR(13) + CHAR(10)
                + ' , @Interval = ' + ISNULL(CAST(@Interval AS [VARCHAR] (10)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @IntervalType = ' + ISNULL(CHAR(39) + @IntervalType + CHAR(39),'NULL') + CHAR(13) + CHAR(10)
                + ' , @IntervalBaseDt = ' + ISNULL(CHAR(39) + CAST(@IntervalBaseDt AS VARCHAR(20)) + CHAR(39),'NULL') + CHAR(13) + CHAR(10)
                + ' , @UseEventNotifications = ' + ISNULL(CAST(@UseEventNotifications AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @IsActive = ' + ISNULL(CAST(@IsActive AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @Id = ' + ISNULL(CAST(@Id AS [VARCHAR] (10)),'NULL') + ' OUTPUT' + CHAR(13) + CHAR(10);
  EXEC [SQLCfg].[pLogSQLError] @TextData, @@PROCID;

 END CATCH; 

END
GO

GRANT EXECUTE ON [SQLCfg].[pScheduleInsert] TO [SQLCfgAdminRole];

GO 

IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pScheduleUpdate' )
 DROP PROCEDURE [SQLCfg].[pScheduleUpdate];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: Update the archive schedule for an SQL instance. 
** Note: encrypted password always added by update and requires symmetric key
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**    11/10/2009     bw                 remove QueryBaseline references 
**              
*******************************************************************************/

CREATE PROCEDURE [SQLCfg].[pScheduleUpdate] 
 ( @Id [INT]
 , @InstanceName [NVARCHAR] (128) = NULL
 , @Interval [INT] = NULL
 , @IntervalType [NVARCHAR] (10) = NULL
 , @IntervalBaseDt [DATETIME] = NULL
 , @UseEventNotifications [BIT] = NULL 
 , @IsActive [BIT] = NULL )
AS
BEGIN
 DECLARE @TextData [NVARCHAR] (500);

 SET XACT_ABORT ON;
 SET NOCOUNT ON;

 BEGIN TRY

  UPDATE [SQLCfg].[tSchedule]
  SET [InstanceName] = UPPER(ISNULL(@InstanceName, [InstanceName]))
   , [Interval] = ISNULL(@Interval, [Interval])
   , [IntervalType] = ISNULL(@IntervalType, [IntervalType])
   , [IntervalBaseDt] = ISNULL(@IntervalBaseDt, [IntervalBaseDt])
   , [UseEventNotifications] = ISNULL(@UseEventNotifications, [UseEventNotifications])
   , [IsActive] = ISNULL(@IsActive, [IsActive])
  WHERE [Id] = @Id;

 END TRY

 BEGIN CATCH

  SET @TextData = '   @InstanceName = ' + ISNULL(CHAR(39) + @InstanceName + CHAR(39),'NULL') + CHAR(13) + CHAR(10)
                + ' , @Interval = ' + ISNULL(CAST(@Interval AS [VARCHAR] (10)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @IntervalType = ' + ISNULL(CHAR(39) + @IntervalType + CHAR(39),'NULL') + CHAR(13) + CHAR(10)
                + ' , @IntervalBaseDt = ' + ISNULL(CHAR(39) + CAST(@IntervalBaseDt AS VARCHAR(20)) + CHAR(39),'NULL') + CHAR(13) + CHAR(10)
                + ' , @UseEventNotifications = ' + ISNULL(CAST(@UseEventNotifications AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @IsActive = ' + ISNULL(CAST(@IsActive AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @Id = ' + ISNULL(CAST(@Id AS [VARCHAR] (10)),'NULL') + ' OUTPUT' + CHAR(13) + CHAR(10);
  EXEC [SQLCfg].[pLogSQLError] @TextData, @@PROCID;

 END CATCH

END
GO

GRANT EXECUTE ON [SQLCfg].[pScheduleUpdate] TO [SQLCfgServiceRole];

GO 

IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pScheduleGet' )
 DROP PROCEDURE [SQLCfg].[pScheduleGet];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: Fetch the specified service settings 
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**    11/10/2009     bw                 remove QueryBaseline references 
**              
*******************************************************************************/

CREATE PROCEDURE [SQLCfg].[pScheduleGet] 
 ( @Id [INT]
 , @InstanceName [NVARCHAR] (128) OUTPUT 
 , @Interval [INT] OUTPUT
 , @IntervalType [NVARCHAR] (10) OUTPUT
 , @IntervalBaseDt [DATETIME] OUTPUT
 , @UseEventNotifications [BIT] OUTPUT
 , @IsActive [BIT] OUTPUT ) 
AS
BEGIN

 SET NOCOUNT ON;

 SELECT @InstanceName 
  , @Interval
  , @IntervalType
  , @IntervalBaseDt
  , @UseEventNotifications
  , @IsActive
 FROM [SQLCfg].[tSchedule]
 WHERE [Id] = @Id;

END
GO

GRANT EXECUTE ON [SQLCfg].[pScheduleGet] TO [SQLCfgReportingRole];

GO

IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pScheduleGetCountForInstance' )
 DROP PROCEDURE [SQLCfg].[pScheduleGetCountForInstance];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: the number of schedules set up for a SQL Instance 
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**    11/10/2009     bw                 remove QueryBaseline references 
**              
*******************************************************************************/

CREATE PROCEDURE [SQLCfg].[pScheduleGetCountForInstance] 
 ( @InstanceName [NVARCHAR] (128)  
 , @Count [INT] OUTPUT) 
AS
BEGIN

 SET NOCOUNT ON;

 SELECT @Count = Count(*) 
 FROM [SQLCfg].[tSchedule]
 WHERE [InstanceName] = @InstanceName;

END
GO

GRANT EXECUTE ON [SQLCfg].[pScheduleGetCountForInstance] TO [SQLCfgReportingRole];

GO 

IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pScheduleGetInstanceNameById' )
 DROP PROCEDURE [SQLCfg].pScheduleGetInstanceNameById;

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: Fetch the specified service settings 
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**              
*******************************************************************************/

CREATE PROCEDURE [SQLCfg].pScheduleGetInstanceNameById 
 ( @Id [INT]
 , @InstanceName [NVARCHAR] (128) OUTPUT ) 
AS
BEGIN

 SET NOCOUNT ON;

 SELECT @InstanceName = InstanceName
 FROM [SQLCfg].[tSchedule]
 WHERE [Id] = @Id;

END
GO

GRANT EXECUTE ON [SQLCfg].pScheduleGetInstanceNameById TO [SQLCfgReportingRole];

GO 

IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pScheduleDelete' )
 DROP PROCEDURE [SQLCfg].[pScheduleDelete];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: Remove the archive schedule for an SQL instance 
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**              
*******************************************************************************/

CREATE PROCEDURE [SQLCfg].[pScheduleDelete] 
 ( @Id [INT] )
AS
BEGIN
 DECLARE @TextData [NVARCHAR](500);

 SET XACT_ABORT ON;
 SET NOCOUNT ON;

 BEGIN TRY

  DELETE [SQLCfg].[tSchedule]
  WHERE [Id] = @Id;

 END TRY

 BEGIN CATCH

  SET @TextData = '   @Id = ' + ISNULL(CAST(@Id AS [VARCHAR] (10)),'NULL');
  EXEC [SQLCfg].[pLogSQLError] @TextData, @@PROCID;

 END CATCH; 

END
GO

GRANT EXECUTE ON [SQLCfg].[pScheduleDelete] TO [SQLCfgAdminRole];

GO 

IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pScheduleSelectAll' )
 DROP PROCEDURE [SQLCfg].[pScheduleSelectAll];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: Fetch the archive Schedules for all SQL Instances 
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**    11/10/2009     bw                 remove QueryBaseline references 
**              
*******************************************************************************/

CREATE PROCEDURE [SQLCfg].[pScheduleSelectAll] 
AS
BEGIN

 SET NOCOUNT ON;

 SELECT [Id] 
  , [InstanceName]
  , [Interval]
  , [IntervalType]
  , [IntervalBaseDt]
  , [UseEventNotifications]
  , [IsActive]
 FROM [SQLCfg].[tSchedule]
 ORDER BY [InstanceName]
  , [IntervalBaseDt]
  , [Id];

END
GO

GRANT EXECUTE ON [SQLCfg].[pScheduleSelectAll] TO [SQLCfgReportingRole];

GO 

IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pScheduleSelectAllWithLastNbrItemsProcessed' )
 DROP PROCEDURE [SQLCfg].[pScheduleSelectAllWithLastNbrItemsProcessed];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: Fetch the archive Schedules for all SQL Instances include the
**          NbrItemsProcessed from the last execution for the schedule or
**          -1 if no history found. 
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**    11/10/2009     bw                 remove QueryBaseline references 
**              
*******************************************************************************/

CREATE PROCEDURE [SQLCfg].[pScheduleSelectAllWithLastNbrItemsProcessed] 
AS
BEGIN

 SET NOCOUNT ON;
--what if plandomized?
 SELECT s.[Id] 
  , s.[InstanceName]
  , s.[Interval]
  , s.[IntervalType]
  , s.[IntervalBaseDt]
  , s.[UseEventNotifications]
  , s.[IsActive]
  , ISNULL((SELECT  Top 1 [NbrItemsProcessed]             
            FROM [SQLCfg].[tArchiveLog]
            WHERE [ScheduleId] = s.[Id]
            ORDER BY [ActualStartDt] Desc), -1) AS [LastNbrItemsProcessed]
 FROM [SQLCfg].[tSchedule] s
 ORDER BY [InstanceName]
  , [IntervalBaseDt]
  , [Id];

END
GO

GRANT EXECUTE ON [SQLCfg].[pScheduleSelectAllWithLastNbrItemsProcessed] TO [SQLCfgReportingRole];

GO 

IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pScheduleSelectAllForInstance' )
 DROP PROCEDURE [SQLCfg].[pScheduleSelectAllForInstance];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: Fetch the archive Schedules for all SQL Instances
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**    11/10/2009     bw                 remove QueryBaseline references 
**              
*******************************************************************************/

CREATE PROCEDURE [SQLCfg].[pScheduleSelectAllForInstance] 
 ( @InstanceName [NVARCHAR] (128) )
AS
BEGIN

 SET NOCOUNT ON;

 SELECT [Id] 
  , [InstanceName]
  , [Interval]
  , [IntervalType]
  , [IntervalBaseDt]
  , [UseEventNotifications]
  , [IsActive]
 FROM [SQLCfg].[tSchedule] 
 WHERE [InstanceName] = @InstanceName;

END
GO

GRANT EXECUTE ON [SQLCfg].[pScheduleSelectAllForInstance] TO [SQLCfgReportingRole];

GO 


IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pServiceSettingsSelect' )
 DROP PROCEDURE [SQLCfg].[pServiceSettingsSelect];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: Fetch the specified service settings 
**    Note: Will only be one row. Used as a result set here for consistency in 
**          the table adapters (and much less text in the proc!) 
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**              
*******************************************************************************/

CREATE PROCEDURE [SQLCfg].[pServiceSettingsSelect] 
 ( @Name [NVARCHAR] (128) = 'DEFAULT' ) 
AS
BEGIN

 SET NOCOUNT ON;

 SELECT [Name]
  , [AddDatabasesUponDiscovery]
  , [TargetEventNotificationDatabase]
  , [Scripting__Options_Batch__Separator]
  , [Misc_Ignore__Blank__Lines]
  , [Misc_Display__Output_Show__Comparison__Details]
  , [Scripting__Options_Include__DROP__In__Script]
  , [Scripting__Options_Include__IF__EXISTS__With__Drop]
  , [Misc_Display__Output_Show__Scripts__For__Unmatched__Items]
  , [Regular__Expressions_LineReplace__Regex__Options_IgnoreCase_5]
  , [Regular__Expressions_LineReplace__Regex__Options_Multiline_7]
  , [Regular__Expressions_LineReplace__Regex__Options_ExplicitCapture_4]
  , [Regular__Expressions_LineReplace__Regex__Options_Compiled_1]
  , [Regular__Expressions_LineReplace__Regex__Options_SingleLine_9]
  , [Regular__Expressions_LineReplace__Regex__Options_IgnorePatternWhiteSpace_6]
  , [Regular__Expressions_LineReplace__Regex__Options_RightToLeft_8]
  , [Regular__Expressions_LineReplace__Regex__Options_ECMAScript_3]
  , [Regular__Expressions_LineReplace__Regex__Options_CultureInvariant_2]
  , [Regular__Expressions_LineReplace__Pattern_1]
  , [Regular__Expressions_LineReplace__Replacement_2]
  , [Regular__Expressions_LineSplit__Regex__Options_IgnoreCase_5]
  , [Regular__Expressions_LineSplit__Regex__Options_Multiline_7]
  , [Regular__Expressions_LineSplit__Regex__Options_ExplicitCapture_4]
  , [Regular__Expressions_LineSplit__Regex__Options_Compiled_1]
  , [Regular__Expressions_LineSplit__Regex__Options_SingleLine_9]
  , [Regular__Expressions_LineSplit__Regex__Options_IgnorePatternWhiteSpace_6]
  , [Regular__Expressions_LineSplit__Regex__Options_RightToLeft_8]
  , [Regular__Expressions_LineSplit__Regex__Options_ECMAScript_3]
  , [Regular__Expressions_LineSplit__Regex__Options_CultureInvariant_2]
  , [Regular__Expressions_LineSplit__Pattern_3]
  , [Regular__Expressions_NameMatch__Regex__Options_IgnoreCase_5]
  , [Regular__Expressions_NameMatch__Regex__Options_Multiline_7]
  , [Regular__Expressions_NameMatch__Regex__Options_ExplicitCapture_4]
  , [Regular__Expressions_NameMatch__Regex__Options_Compiled_1]
  , [Regular__Expressions_NameMatch__Regex__Options_SingleLine_9]
  , [Regular__Expressions_NameMatch__Regex__Options_IgnorePatternWhiteSpace_6]
  , [Regular__Expressions_NameMatch__Regex__Options_RightToLeft_8]
  , [Regular__Expressions_NameMatch__Regex__Options_ECMAScript_3]
  , [Regular__Expressions_NameMatch__Regex__Options_CultureInvariant_2]
  , [Regular__Expressions_NameMatch__Pattern_4]
  , [Scripting__Options_SMO_AgentAlertJob_1]
  , [Scripting__Options_SMO_AgentJobId_2]
  , [Scripting__Options_SMO_AgentNotify_3]
  , [Scripting__Options_SMO_AllowSystemObjects_10]
  , [Scripting__Options_SMO_AnsiFile_20]
  , [Scripting__Options_SMO_AnsiPadding_30]
  , [Scripting__Options_SMO_BatchSize_35]
  , [Scripting__Options_SMO_Bindings_40]
  , [Scripting__Options_SMO_ChangeTracking_45]
  , [Scripting__Options_SMO_ClusteredIndexes_50]
  , [Scripting__Options_SMO_ContinueScriptingOnError_60]
  , [Scripting__Options_SMO_ConvertUserDefinedDataTypesToBaseType_70]
  , [Scripting__Options_SMO_DdlBodyOnly_80]
  , [Scripting__Options_SMO_DdlHeaderOnly_90]
  , [Scripting__Options_SMO_Default_100]
  , [Scripting__Options_SMO_DriAll_110]
  , [Scripting__Options_SMO_DriAllConstraints_120]
  , [Scripting__Options_SMO_DriAllKeys_130]
  , [Scripting__Options_SMO_DriChecks_140]
  , [Scripting__Options_SMO_DriClustered_150]
  , [Scripting__Options_SMO_DriDefaults_160]
  , [Scripting__Options_SMO_DriForeignKeys_170]
  , [Scripting__Options_SMO_DriIncludeSystemNames_180]
  , [Scripting__Options_SMO_DriIndexes_190]
  , [Scripting__Options_SMO_DriNonClustered_200]
  , [Scripting__Options_SMO_DriPrimaryKey_210]
  , [Scripting__Options_SMO_DriUniqueKeys_220]
  , [Scripting__Options_SMO_DriWithNoCheck_230]
  , [Scripting__Options_SMO_Encoding_240]
  , [Scripting__Options_SMO_EnforceScriptingOptions_250]
  , [Scripting__Options_SMO_ExtendedProperties_260]
  , [Scripting__Options_SMO_FullTextCatalogs_270]
  , [Scripting__Options_SMO_FullTextindexes_280]
  , [Scripting__Options_SMO_FullTextStopLists_285]
  , [Scripting__Options_SMO_IncludeDatabaseContext_290]
  , [Scripting__Options_SMO_IncludeDatabaseRoleMemberships_291]
  , [Scripting__Options_SMO_IncludeFullTextCatalogRootPath_295]
  , [Scripting__Options_SMO_IncludeHeaders_300]
  , [Scripting__Options_SMO_IncludeIfNotExists_301]
  , [Scripting__Options_SMO_Indexes_310]
  , [Scripting__Options_SMO_LoginSID_320]
  , [Scripting__Options_SMO_NoAssemblies_330]
  , [Scripting__Options_SMO_NoCollation_340]
  , [Scripting__Options_SMO_NoCommandTerminator_350]
  , [Scripting__Options_SMO_NoExecuteAs_360]
  , [Scripting__Options_SMO_NoFilegroup_370]
  , [Scripting__Options_SMO_NoFileStream_373]
  , [Scripting__Options_SMO_NoFileStreamColumn_376]
  , [Scripting__Options_SMO_NoIdentities_380]
  , [Scripting__Options_SMO_NoIndexPartitioningSchemes_390]
  , [Scripting__Options_SMO_NoMailProfileAccounts_400]
  , [Scripting__Options_SMO_NoMailProfilePrincipals_410]
  , [Scripting__Options_SMO_NonClusteredIndexes_420]
  , [Scripting__Options_SMO_NoTablePartitioningSchemes_430]
  , [Scripting__Options_SMO_NoVarDecimal_431]
  , [Scripting__Options_SMO_NoViewColumns_440]
  , [Scripting__Options_SMO_NoXMLNameSpaces_450]
  , [Scripting__Options_SMO_OptimizerData_460]
  , [Scripting__Options_SMO_Permissions_470]
  , [Scripting__Options_SMO_PrimaryObject_480]
  , [Scripting__Options_SMO_SchemaQualify_490]
  , [Scripting__Options_SMO_SchemaQualifyForeignKeysReferences_500]
  , [Scripting__Options_SMO_ScriptBatchTerminator_502]
  , [Scripting__Options_SMO_ScriptData_503]
  , [Scripting__Options_SMO_ScriptDataCompression_505]
  , [Scripting__Options_SMO_ScriptDrops_506]
  , [Scripting__Options_SMO_ScriptOwner_508]
  , [Scripting__Options_SMO_ScriptSchema_509]
  , [Scripting__Options_SMO_Statistics_510]
  , [Scripting__Options_SMO_TimestampToBinary_520]
  , [Scripting__Options_SMO_TargetServerVersion_530]
  , [Scripting__Options_SMO_Triggers_540]
  , [Scripting__Options_SMO_WithDependencies_550]
  , [Scripting__Options_SMO_XMLIndexes_560]
 FROM [SQLCfg].[tServiceSettings]
 WHERE [Name] = @Name;

END
GO

GRANT EXECUTE ON [SQLCfg].[pServiceSettingsSelect] TO [SQLCfgReportingRole];

GO 

IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pChangeInsert' )
 DROP PROCEDURE [SQLCfg].[pChangeInsert];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: Add a row indicating a change in managed configuration. Used
**        when a server pull identifies a difference and when a change event 
**        notification is received 
**       
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**              
*******************************************************************************/

CREATE PROCEDURE [SQLCfg].[pChangeInsert] 
 ( @Node [NVARCHAR] (786)
 , @Action [NVARCHAR] (30)
 , @EventData [XML]
 , @Definition [VARCHAR] (MAX)
 , @ChangeId [INT] OUTPUT  
 , @Version [INT] OUTPUT )
AS
BEGIN
 DECLARE @TextData [NVARCHAR](500)
  , @ScopeId [INT];

 /*
 rely upon the implicit transaction.  
 keep this to one DML statement in the ap transaction 
 this is to protect the target server Service Broker's integrity
 causes the errorlogging to be lost if we cancel the txn on the SQLClue host
 because aborting the container transaction in pLogSQLError aborts the Try/Catch 
 DO NOT USE XACT_ABORT so that fatal error will then roll back the queue reader 
 no benefit to OUTPUT clause due to trigger
 */
 SET NOCOUNT ON;

  INSERT [SQLCfg].[tChange] 
   ( [Node]
   , [EventData]
   , [Definition]
   , [Action])
  VALUES 
  ( CASE WHEN RIGHT(@Node,1) = '|' THEN  LEFT(@Node, LEN(@Node) - 1) ELSE @Node END
  , CONVERT(XML, '<ROOT>' + CONVERT([NVARCHAR](MAX), @EventData) + '</ROOT>') 
  , @Definition
  , @Action);
  
  IF @@ROWCOUNT = 1 
   SELECT @ChangeId = [Id]
    , @Version = [Version] 
   FROM [SQLCfg].[tChange]
   WHERE [Node] = @Node
   AND [Version] = [SQLCfg].[fLastVersion](@Node);  
  
  -- if a database has been deleted, need to delete all scripts for that db
  
  
END
GO

GRANT EXECUTE ON [SQLCfg].[pChangeInsert] TO [SQLCfgServiceRole];

GO 

IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pChangeAppendEvent' )
 DROP PROCEDURE [SQLCfg].[pChangeAppendEvent];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: update a change row with the current eventdata of an event originated 
**       configuration change. When there is more than one event associated with 
**       a change all events should go into the same rows EventData
**    
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**              
*******************************************************************************/

CREATE PROCEDURE [SQLCfg].[pChangeAppendEvent] 
 ( @ChangeId [INT]
 , @Action [NVARCHAR] (30)
 , @EventData [XML] )
AS
BEGIN
 DECLARE @TextData [NVARCHAR](500)
  , @DDLEvents AS XML;

 /*
 when called async by archive, the error is lost when it fails in a Try/Catch here
 only one DML statement and the ap transaction used to protect the
 target server Service Broker causes the errorlogging to be lost so
 aborting the container transaction aborts the Try/Catch and never logs
 */

 SET NOCOUNT ON;
 
  ---- change events can be applied to Add or Change
  SELECT @DDLEvents = [EventData]  
  FROM [SQLCfg].[tChange] WHERE [Id] = @ChangeId;

  -- intention is that proc is never called unless row exists
  IF @@ROWCOUNT = 1 
   BEGIN
    -- XQuery limitation
    -- .modify a non-NULL valued XML column 
    -- assign to a NULL XML column  
    IF @DDLEvents IS NOT NULL
     SET @DDLEvents = CONVERT( XML
                             , REPLACE(CONVERT( NVARCHAR(MAX)
                                              , @DDLEvents)
                                              , N'</ROOT>',CONVERT(NVARCHAR(MAX), @EventData) + N'</ROOT>'));  
     -- XQuery in SQL Server 2008 but wont compile on 2005 host
     --SET @DDLEvents.modify(N'insert sql:variable("@EventData") as last into (/Root)[1]')
    ELSE
     SET @DDLEvents = CONVERT( XML
                              , N'<ROOT>' + CONVERT(NVARCHAR(MAX)
                              , @EventData) + N'</ROOT>');  
   -- should always end up with the last action and date in that results in unchanged definition
    UPDATE [SQLCfg].[tChange]
    SET [EventData] = @DDLEvents
     , [Action] = @Action
     , [DefinitionDt] = ISNULL(@EventData.[value]('(/EVENT_INSTANCE/PostTime)[1]', '[DATETIME]' ), CURRENT_TIMESTAMP) 
    WHERE [Id] = @ChangeId;
    IF @@ROWCOUNT = 0
     RAISERROR ('Event only update to [SQLCfg].[tChange] failed. Action: "%s" ChangeId: [%d]', 16,1, @Action, @ChangeId);
   END

  ELSE
    BEGIN
     SET @TextData = '   @ChangId = ' + CONVERT([NVARCHAR](10), @ChangeId) + CHAR(13) + CHAR(10)
                   + ' , @EventData = ''' + CONVERT([NVARCHAR](MAX), @EventData) + '''';
     EXEC [SQLCfg].[pLogSQLError] @TextData, @@PROCID;
     RAISERROR ('Expected [SQLCfg].[tChange] row not found. Action: "%s" ChangeId: [%d]', 16,1, @Action, @ChangeId);
    END
END
GO

GRANT EXECUTE ON [SQLCfg].[pChangeAppendEvent] TO [SQLCfgServiceRole];

GO 

IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pChangeApplyLabel' )
 DROP PROCEDURE [SQLCfg].[pChangeApplyLabel];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: associate the current versions at a specific time of all item 
**       Optionally, inclued the definitions for all children of the  
**       specified configuration hierarcy. Primary use case will be to label
**       and instance or database hierarchy 
** Note: NULL label text may be valid, even IF bad style. In this case the label
**       would include a reference to the current user and system time 
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**    11/28/2009     bw                 changed to ISO8601 date conversion           
*******************************************************************************/

CREATE PROCEDURE [SQLCfg].[pChangeApplyLabel] 
 ( @ChangeId [INT]
 , @IncludeChildren [BIT] = 1
 , @Label [NVARCHAR] (MAX) = NULL 
 , @Notes [NVARCHAR] (MAX) = NULL
 , @LabelVersionDate [DATETIME] = NULL)
AS
BEGIN
 DECLARE @LabelId [INT]
  , @RootNode [SQLCfgNode]
  , @LabeledChangeId [INT]
  , @ApLockResource [NVARCHAR] (255)
  , @ApLockMode [NVARCHAR] (32)
  , @ApLockOwner [NVARCHAR] (32)
  , @rc [INT]
  , @rrc [INT]
  , @TextData [NVARCHAR] (MAX);

 SET XACT_ABORT ON;
 SET NOCOUNT ON;

 BEGIN TRY

   BEGIN TRAN
    
     -- if a LabelVersionDate has been provided, get the id of the version of the Change node for that date
     -- if no LabelVersionDate provided then label the most recent version(s) 
     SELECT @LabeledChangeId = [Id]
      , @RootNode = [Node] 
     FROM [SQLCfg].[tChange]
     WHERE [Id] = (SELECT CASE WHEN @LabelVersionDate IS NULL THEN MAX([Id]) ELSE MIN([Id]) END 
                   FROM [SQLCfg].[tChange] 
                   WHERE [Node] = (SELECT [Node] 
                                   FROM [SQLCfg].[tChange]
                                   WHERE [Id] = @ChangeId
                                   AND [RecCreatedDt] > ISNULL(@LabelVersionDate,0)));

     -- create the label
     INSERT [SQLCfg].[tLabel] 
      ( [IncludeChildren]
      , [Label]
      , [Notes])
     VALUES( @IncludeChildren
      , ISNULL(@Label, 'labeled at ' + CAST(CURRENT_TIMESTAMP AS [VARCHAR] (30)) + ' by ' + ORIGINAL_LOGIN())
      , @Notes);

     SET @LabelId = SCOPE_IDENTITY();

     -- apply the label
     INSERT [SQLCfg].[tChangeLabel] ([LabelId], [ChangeId])
     SELECT @LabelId 
      , CASE WHEN @LabelVersionDate IS NULL THEN MAX([Id]) ELSE MIN([Id]) END 
     FROM [SQLCfg].[tChange]
     WHERE CHARINDEX(@RootNode.ToString(), [Node].ToString()) = 1
     AND (@IncludeChildren = 1 OR [Id] = @LabeledChangeId)
     AND [RecCreatedDt] > ISNULL(@LabelVersionDate,0)
     GROUP BY [Node];

   COMMIT TRAN;
  END TRY

  BEGIN CATCH

   SET @TextData = '   @ChangeId = ' + ISNULL(CAST(@ChangeId AS [VARCHAR] (10)),'NULL') + CHAR(13) + CHAR(10)
                 + ' , @IncludeChildren = ' + ISNULL(CAST(@IncludeChildren AS [VARCHAR] (6)),'NULL') + CHAR(13) + CHAR(10)
                 + ' , @Label = ' + ISNULL(CHAR(39) + @Label + CHAR(39),'NULL') + CHAR(13) + CHAR(10)
                 + ' , @Notes = <varchar(max)>' + CHAR(13) + CHAR(10)
                 + ' , @LabelVersionDate = ' + ISNULL(CHAR(39) + CAST(@LabelVersionDate AS VARCHAR(20)) + CHAR(39),'NULL');
   EXEC [SQLCfg].[pLogSQLError] @TextData, @@PROCID;

 END CATCH;

END
GO

GRANT EXECUTE ON [SQLCfg].[pChangeApplyLabel] TO [SQLCfgAdminRole];

GO

IF EXISTS (SELECT * 
       FROM INFORMATION_SCHEMA.ROUTINES 
       WHERE SPECIFIC_SCHEMA = N'SQLCfg'
       AND SPECIFIC_NAME = N'pChangePurgeInstance' )
 DROP PROCEDURE [SQLCfg].[pChangePurgeInstance];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: Jan 18, 2010
**
**    Desc: completey remove a targeted SQL Server from the archive 
**          ArchiveLog rows are not removed
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
** 
*******************************************************************************/
CREATE PROCEDURE [SQLCfg].[pChangePurgeInstance] 
 ( @InstanceName [NVARCHAR] (128))
WITH EXECUTE AS OWNER -- needed to disable triggers 
AS
BEGIN
 DECLARE @TextData [NVARCHAR] (MAX);

 SET XACT_ABORT ON;
 SET NOCOUNT ON;

 BEGIN TRY

   BEGIN TRAN
    
    DELETE [SQLCfg].[tChangeLabel]
    WHERE [ChangeId] IN (SELECT [ChangeId]
                         FROM [SQLCfg].[tChange] 
                         WHERE [Node].[SQLInstance] = @InstanceName) 
       
    -- do not log anything, it would be deleted else inaccessible anyway
    ALTER TABLE [SQLCfg].[tServiceBroker]
    DISABLE TRIGGER ALL

     DELETE [SQLCfg].[tServiceBroker] 
     WHERE [InstanceName] = @InstanceName
    
    ALTER TABLE [SQLCfg].[tServiceBroker]
    ENABLE TRIGGER ALL

    ALTER TABLE [SQLCfg].[tDb]
    DISABLE TRIGGER ALL

     DELETE [SQLCfg].[tDb] 
     WHERE [InstanceName] = @InstanceName

    ALTER TABLE [SQLCfg].[tDb]
    ENABLE TRIGGER ALL

    ALTER TABLE [SQLCfg].[tJobServer]
    DISABLE TRIGGER ALL
 
     DELETE [SQLCfg].[tJobServer] 
     WHERE [InstanceName] = @InstanceName

    ALTER TABLE [SQLCfg].[tJobServer]
    ENABLE TRIGGER ALL

    ALTER TABLE [SQLCfg].[tInstance]
    DISABLE TRIGGER ALL
 
     DELETE [SQLCfg].[tInstance] 
     WHERE [Name] = @InstanceName

    ALTER TABLE [SQLCfg].[tInstance]
    ENABLE TRIGGER ALL

    ALTER TABLE [SQLCfg].[tChange]
    DISABLE TRIGGER ALL

     DELETE [SQLCfg].[tChange] 
     WHERE [Node].[SQLInstance] = @InstanceName
         
    ALTER TABLE [SQLCfg].[tChange]
    ENABLE TRIGGER ALL

    IF EXISTS (SELECT * 
               FROM [SQLCfg].[tSchedule]
               WHERE [InstanceName] = @InstanceName
               AND [UseEventNotifications] = 1)
     RAISERROR ('Important! Run script [uninstSQLClueDDLEventNotifications.sql] from the "SQLClue Application Resources" 
script library in the SQLClue Notification db (msdb is the default) on SQL Server %s to remove Event 
Notification configuration. ', 1, 1, @InstanceName) 

    ALTER TABLE [SQLCfg].[tSchedule]
    DISABLE TRIGGER ALL

     DELETE [SQLCfg].[tSchedule]
     WHERE [InstanceName] = @InstanceName 

    ALTER TABLE [SQLCfg].[tSchedule]
    ENABLE TRIGGER ALL

    ALTER TABLE [SQLCfg].[tConnection]
    DISABLE TRIGGER ALL
     
     DELETE [SQLCfg].[tConnection]
     WHERE [InstanceName] = @InstanceName
     
    ALTER TABLE [SQLCfg].[tConnection]
    ENABLE TRIGGER ALL

    -- decriment the licensed instance count
    UPDATE [SQLCfg].[tSQLCfg]
    SET [LicensedInstanceCount] = [LicensedInstanceCount] - 1 

   COMMIT TRAN;

  END TRY
   
  BEGIN CATCH

   SET @TextData = '  @InstanceName = ' + ISNULL(CHAR(39) + CAST(@InstanceName AS VARCHAR(128)) + CHAR(39),'NULL');
   EXEC [SQLCfg].[pLogSQLError] @TextData, @@PROCID;

 END CATCH;

END
GO

GRANT EXECUTE ON [SQLCfg].[pChangePurgeInstance] TO [SQLCfgAdminRole];

GO
IF EXISTS ( SELECT * 
            FROM INFORMATION_SCHEMA.ROUTINES 
            WHERE SPECIFIC_SCHEMA = N'SQLCfg'
            AND SPECIFIC_NAME = N'pArchiveLogSelectScheduleHistoryByScheduleId' )
 DROP PROCEDURE [SQLCfg].[pArchiveLogSelectScheduleHistoryByScheduleId];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: get the history for an archive Schedule
**       
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**    11/10/2009     bw                 remove QueryBaseline add ArchiveError 
**              
*******************************************************************************/
CREATE Procedure [SQLCfg].[pArchiveLogSelectScheduleHistoryByScheduleId]
 ( @ScheduleId [INT]
 , @BeginDt [DATETIME]
 , @EndDt [DATETIME])
AS
BEGIN

 SET NOCOUNT ON;
 
    SELECT l.[Id] AS [ArchiveLogId]
    , l.[ScheduleId]
    , l.[InstanceName]
    , l.[NbrDDLEventsProcessed]
    , l.[NbrItemsProcessed]
    , l.[NbrItemsAdded]
    , l.[NbrItemsChanged]
    , l.[NbrItemsDeleted]
    , l.[ScheduledStartDt]
    , l.[ActualStartDt]
    , l.[ActualEndDt] 
    , l.[RecCreatedUser]
    , l.[ArchiveError]
    , s1.[Interval]
    , s1.[IntervalType]
    , s1.[IntervalBaseDt]
    , s1.[UseEventNotifications]
    , s1.[IsActive]
   FROM [SQLCfg].[tArchiveLog] l
   JOIN [SQLCfg].[tSchedule] s1
   ON l.[ScheduleId] = s1.[Id] 
   WHERE s1.[Id] = @ScheduleId
   AND (   l.[ScheduledStartDt] BETWEEN @BeginDt AND @EndDt
        OR l.[ActualStartDt]    BETWEEN @BeginDt AND @EndDt); 

END;

GO

GRANT EXECUTE ON [SQLCfg].[pArchiveLogSelectScheduleHistoryByScheduleId] TO [SQLCfgReportingRole];

GO

IF EXISTS ( SELECT * 
            FROM INFORMATION_SCHEMA.ROUTINES 
            WHERE SPECIFIC_SCHEMA = N'SQLCfg'
            AND SPECIFIC_NAME = N'pArchiveLogSelectScheduleHistory' )
 DROP PROCEDURE [SQLCfg].[pArchiveLogSelectScheduleHistory];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: get the history for a SQL Server
**       
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**              
*******************************************************************************/

CREATE Procedure [SQLCfg].[pArchiveLogSelectScheduleHistory]
 ( @SQLInstance [NVARCHAR] (128)
 , @BeginDt [DATETIME]
 , @EndDt [DATETIME])
AS
BEGIN

 SET NOCOUNT ON;
 
    SELECT l.[Id] AS [ArchiveLogId]
    , l.[ScheduleId]
    , l.[InstanceName]
    , l.[NbrDDLEventsProcessed]
    , l.[NbrItemsProcessed]
    , l.[NbrItemsAdded]
    , l.[NbrItemsChanged]
    , l.[NbrItemsDeleted]
    , l.[ScheduledStartDt]
    , l.[ActualStartDt]
    , l.[ActualEndDt] 
    , l.[RecCreatedUser]
    , l.[ArchiveError]
    , s1.[Interval]
    , s1.[IntervalType]
    , s1.[IntervalBaseDt]
    , s1.[UseEventNotifications]
    , s1.[IsActive]
   FROM [SQLCfg].[tArchiveLog] l
   JOIN [SQLCfg].[tSchedule] s1
   ON l.[ScheduleId] = s1.[Id] 
   WHERE s1.[InstanceName] = @SQLInstance
   AND (   l.[ScheduledStartDt] BETWEEN @BeginDt AND @EndDt
        OR l.[ActualStartDt]    BETWEEN @BeginDt AND @EndDt); 

END;

GO

GRANT EXECUTE ON [SQLCfg].[pArchiveLogSelectScheduleHistory] TO [SQLCfgReportingRole];

GO

IF EXISTS ( SELECT * 
            FROM INFORMATION_SCHEMA.ROUTINES 
            WHERE SPECIFIC_SCHEMA = N'SQLCfg'
            AND SPECIFIC_NAME = N'pArchiveLogSelectSQLInstanceHistoryByScheduleId' )
 DROP PROCEDURE [SQLCfg].[pArchiveLogSelectSQLInstanceHistoryByScheduleId];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: get all history for an instance based on archive ScheduleId
**       
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**    11/10/2009     bw                 remove QueryBaseline add ArchiveError 
**              
*******************************************************************************/

CREATE Procedure [SQLCfg].[pArchiveLogSelectSQLInstanceHistoryByScheduleId]
 ( @ScheduleId [INT]
 , @BeginDt [DATETIME]
 , @EndDt [DATETIME])
AS
BEGIN

 SET NOCOUNT ON;
 
    SELECT l.[Id] AS [ArchiveLogId]
    , l.[ScheduleId]
    , l.[InstanceName]
    , l.[NbrDDLEventsProcessed]
    , l.[NbrItemsProcessed]
    , l.[NbrItemsAdded]
    , l.[NbrItemsChanged]
    , l.[NbrItemsDeleted]
    , l.[ScheduledStartDt]
    , l.[ActualStartDt]
    , l.[ActualEndDt] 
    , l.[RecCreatedUser]
    , l.[ArchiveError]
    , s2.[Interval]
    , s2.[IntervalType]
    , s2.[IntervalBaseDt]
    , s2.[UseEventNotifications]
    , s2.[IsActive]
   FROM [SQLCfg].[tArchiveLog] l
   JOIN [SQLCfg].[tSchedule] s1
   ON l.[InstanceName] = s1.[InstanceName] 
   JOIN [SQLCfg].[tSchedule] s2
   ON s2.[Id] = l.[ScheduleId]
   WHERE s1.[Id] = @ScheduleId
   AND (   l.[ScheduledStartDt] BETWEEN @BeginDt AND @EndDt
        OR l.[ActualStartDt]    BETWEEN @BeginDt AND @EndDt); 

END;

GO

GRANT EXECUTE ON [SQLCfg].[pArchiveLogSelectSQLInstanceHistoryByScheduleId] TO [SQLCfgReportingRole];

GO

IF EXISTS ( SELECT * 
            FROM INFORMATION_SCHEMA.ROUTINES 
            WHERE SPECIFIC_SCHEMA = N'SQLCfg'
            AND SPECIFIC_NAME = N'pArchiveLogInsert' )
 DROP PROCEDURE [SQLCfg].[pArchiveLogInsert];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: Add a summary record for an archive
**       
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**    11/10/2009     bw                 add ArchiveError and alert message          
**
*******************************************************************************/

CREATE Procedure [SQLCfg].[pArchiveLogInsert]
 ( @ScheduleId [INT]
  , @InstanceName [NVARCHAR] (128)
  , @NbrDDLEventsProcessed [INT]
  , @NbrItemsProcessed [INT]
  , @NbrItemsAdded [INT]
  , @NbrItemsChanged [INT]
  , @NbrItemsDeleted [INT]
  , @ScheduledStartDt [DATETIME]   
  , @ActualStartDt [DATETIME]  
  , @ActualEndDt [DATETIME] 
  , @ArchiveError [VARCHAR] (MAX))
AS
BEGIN

 DECLARE @TextData [NVARCHAR] (MAX)
       , @LogId [INT];

 SET XACT_ABORT ON;
 SET NOCOUNT ON;

  BEGIN TRY

   INSERT [SQLCfg].[tArchiveLog]
    ( [ScheduleId]
    , [InstanceName]
    , [NbrDDLEventsProcessed]
    , [NbrItemsProcessed]
    , [NbrItemsAdded]
    , [NbrItemsChanged]
    , [NbrItemsDeleted]
    , [ScheduledStartDt]
    , [ActualStartDt]
    , [ActualEndDt] 
    , [ArchiveError])
   VALUES
    ( @ScheduleId 
    , UPPER(@InstanceName) 
    , @NbrDDLEventsProcessed
    , @NbrItemsProcessed
    , @NbrItemsAdded
    , @NbrItemsChanged
    , @NbrItemsDeleted
    , @ScheduledStartDt
    , @ActualStartDt
    , @ActualEndDt 
    , NULLIF(@ArchiveError, '')); -- does no good use a sparse column if empty string is always inserted

    SET @LogId = SCOPE_IDENTITY()

    /*
      the message text must match the keyword of the alert   
      the user can create alerts for individual schedules by specifying enough of
      the message text to identify the schedule in the alert @event_description_keyword 
      example: 'SQLClue SQL Configuration Archive Exception: Schedule Id 18'
      Only configuration of 2 general alerts on archive success or failure are supported
      by the SQLClue Console's Archive Alert Notification dialog. All other Archive alerts 
      must be configured by the user.  
     */ 
    If NULLIF(@ArchiveError, '') IS NULL 
     RAISERROR ('SQLClue SQL Configuration Archive Complete: Schedule Id %d, Archive Log Id %d',1,1,@ScheduleId, @LogId) WITH LOG
    ELSE
     RAISERROR ('SQLClue SQL Configuration Archive Exception: Schedule Id %d, Archive Log Id %d',9,1,@ScheduleId, @LogId) WITH LOG
    
  END TRY

  BEGIN CATCH

   SET @TextData = '   @ScheduleId = ' + ISNULL(CAST(@ScheduleId AS [VARCHAR] (10)),'NULL') + CHAR(13) + CHAR(10)
                 + ' , @InstanceName = ' + ISNULL(CHAR(39) + @InstanceName + CHAR(39),'NULL') + CHAR(13) + CHAR(10)
                 + ' , @NbrDDLEventsProcessed = ' + ISNULL(CAST(@NbrDDLEventsProcessed AS [VARCHAR] (10)),'NULL') + CHAR(13) + CHAR(10)
                 + ' , @NbrItemsProcessed = ' + ISNULL(CAST(@NbrItemsProcessed AS [VARCHAR] (10)),'NULL') + CHAR(13) + CHAR(10)
                 + ' , @NbrItemsAdded = ' + ISNULL(CAST(@NbrItemsAdded AS [VARCHAR] (10)),'NULL') + CHAR(13) + CHAR(10)
                 + ' , @NbrItemsChanged = ' + ISNULL(CAST(@NbrItemsChanged AS [VARCHAR] (10)),'NULL') + CHAR(13) + CHAR(10)
                 + ' , @NbrItemsDeleted = ' + ISNULL(CAST(@NbrItemsDeleted AS [VARCHAR] (10)),'NULL') + CHAR(13) + CHAR(10)
                 + ' , @ScheduledStartDt = ' + ISNULL(CHAR(39) + CAST(@ScheduledStartDt AS [VARCHAR] (21)),'NULL') + CHAR(13) + CHAR(10)
                 + ' , @ActualStartDt = ' + ISNULL(CHAR(39) + CAST(@ActualStartDt AS [VARCHAR] (21)) + CHAR(39),'NULL') + CHAR(13) + CHAR(10)
                 + ' , @ActualEndDt = ' + ISNULL(CHAR(39) + CAST(@ActualEndDt AS [VARCHAR] (21)) + CHAR(39),'NULL')
                 + ' , @ArchiveError = ' + ISNULL(CHAR(39) + @ArchiveError  + CHAR(39),'NULL');
    EXEC [SQLCfg].[pLogSQLError] @TextData, @@PROCID;

 END CATCH;

END;

GO

GRANT EXECUTE ON [SQLCfg].[pArchiveLogInsert] TO [SQLCfgServiceRole];

GO

If EXISTS (SELECT *
           FROM msdb.dbo.sysalerts
           WHERE name = 'SQLClue: SQL Configuration Archive Succeeded')
 EXEC msdb.dbo.sp_delete_alert @name = 'SQLClue: SQL Configuration Archive Succeeded'             
GO

-- by default the alert does not fire, use UI or SSMS to enable  
-- notification must be configured - can use SQLClue UI for simple notification
-- to set up separate alert for individual schedules - add schedule id to name & message   
EXEC msdb.dbo.sp_add_alert @name = 'SQLClue: SQL Configuration Archive Succeeded' 
     , @message_id = 0 
     , @severity = 1 
     , @enabled = 0
     , @notification_message = 'Archive notifications can be enabled/disabled from the SQLClue Console'  
     , @event_description_keyword = 'SQLClue SQL Configuration Archive Complete:' 

GO

If EXISTS (SELECT *
           FROM msdb.dbo.sysalerts
           WHERE name = 'SQLClue: SQL Configuration Archive Failed')
 EXEC msdb.dbo.sp_delete_alert @name = 'SQLClue: SQL Configuration Archive Failed'             
GO

-- by default the alert is active, use UI or SSMS to disable  
-- notification must be configured - can use SQLClue UI for simple notification
EXEC msdb.dbo.sp_add_alert @name = 'SQLClue: SQL Configuration Archive Failed' 
     , @message_id = 0 
     , @severity = 9  
     , @enabled = 1
     , @notification_message = 'See the Application Event Log and the ArchiveLog table for additional details.'  
     , @event_description_keyword = 'SQLClue SQL Configuration Archive Exception:' 

GO

IF EXISTS ( SELECT * 
            FROM INFORMATION_SCHEMA.ROUTINES 
            WHERE SPECIFIC_SCHEMA = N'SQLCfg'
            AND SPECIFIC_NAME = N'pChangeActionSummaryByNodeForDays' )
 DROP PROCEDURE [SQLCfg].[pChangeActionSummaryByNodeForDays];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: Get the number of changes for the last @DaysToShow days
**       optionally filter by Instance, Database, Schema, ItemType and/or Name
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**    11/28/2009     bw                 remove locale specific date conversion          
**              
*******************************************************************************/

CREATE Procedure [SQLCfg].[pChangeActionSummaryByNodeForDays]
 ( @DaysToShow [INT] = 30 
 , @Node [NVARCHAR] (786) = 'All' )
AS
BEGIN

SET NOCOUNT ON;

SELECT [Node].[SQLInstance] As [SQLInstance] 
 , [Node].[Type] As [Type]
 , CAST([RecCreatedDt] AS [DATE]) AS [Date]
 , CASE WHEN @Node = 'All' THEN 'All Nodes' ELSE @Node END AS [Node]
    , Count(*) AS [TotalChangeCount] 
 , SUM(CASE WHEN Action = 'Include' THEN 1 ELSE 0 END) AS [MetadataRowInserts] 
 , SUM(CASE WHEN Action = 'Modify' THEN 1 ELSE 0 END) AS [MetadataRowUpdates] 
 , SUM(CASE WHEN Action = 'Remove' THEN 1 ELSE 0 END) AS [MetadataRowDeletes] 
 , SUM(CASE WHEN Action = 'Add' THEN 1 ELSE 0 END) AS [SQLConfigurationAdded] 
 , SUM(CASE WHEN Action = 'Change' THEN 1 ELSE 0 END) AS [SQLConfigurationChanged] 
 , SUM(CASE WHEN Action = 'Delete' THEN 1 ELSE 0 END) AS [SQLConfigurationRemoved] 
FROM [SQLCfg].[tChange]
WHERE [RecCreatedDt] > CAST(CURRENT_TIMESTAMP - @DaysToShow AS [DATE])
AND [Node] = CASE WHEN @Node = 'All' THEN [Node] ELSE @Node END
GROUP BY [Node].[SQLInstance], [Node].[Type]
 , CAST([RecCreatedDt] AS [DATE])
ORDER BY [Date]
 , [SQLInstance]
 , [Type];

END
GO

GRANT EXECUTE ON [SQLCfg].[pChangeActionSummaryByNodeForDays] TO [SQLCfgReportingRole];

GO
IF EXISTS ( SELECT * 
            FROM INFORMATION_SCHEMA.ROUTINES 
            WHERE SPECIFIC_SCHEMA = N'SQLCfg'
            AND SPECIFIC_NAME = N'pChangeActionByNodeForDays' )
 DROP PROCEDURE [SQLCfg].[pChangeActionByNodeForDays];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: Get the list of changes for the last @DaysToShow days
**       optionally filter by Instance, Database, Schema, ItemType and/or Name
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**    11/28/2009     bw                 remove locale specific date conversion          
**              
*******************************************************************************/

CREATE Procedure [SQLCfg].[pChangeActionByNodeForDays]
 ( @DaysToShow [INT] = 30 
 , @Node [NVARCHAR] (786) = 'All' )
AS
BEGIN

SET NOCOUNT ON;

SELECT [Node].[SQLInstance] As [SQLInstance] 
 , [Node].[Type] As [Type]
 , CAST([RecCreatedDt] AS [DATE]) AS [Date]
 , CASE WHEN @Node = 'All' THEN 'All Nodes' ELSE @Node END AS [Node]
 , Action 
FROM [SQLCfg].[tChange]
WHERE [RecCreatedDt] > CAST(CURRENT_TIMESTAMP - @DaysToShow AS [DATE])
AND [Node] = CASE WHEN @Node = 'All' THEN [Node] ELSE @Node END
ORDER BY [Date], [SQLInstance], [Type];

END
GO

GRANT EXECUTE ON [SQLCfg].[pChangeActionByNodeForDays] TO [SQLCfgReportingRole];

GO 

IF EXISTS ( SELECT * 
            FROM INFORMATION_SCHEMA.ROUTINES 
            WHERE SPECIFIC_SCHEMA = N'SQLCfg'
            AND SPECIFIC_NAME = N'pChangesForDate' )
 DROP PROCEDURE [SQLCfg].[pChangesForDate];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: List items changed for a date
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**    11/28/2009     bw                 remove locale specific date conversion          
**                                      include change type and action filters 
*******************************************************************************/

CREATE Procedure [SQLCfg].[pChangesForDate]
 ( @ChangeDate [DATETIME]
 , @SQLInstance [NVARCHAR] (786)
 , @NodeType [NVARCHAR] (30)
 , @Action [NVARCHAR] (30))
AS
BEGIN

SET NOCOUNT ON;

SELECT Id 
 , [Node].ToString() AS [Node]
 , [Node].[Database] AS [Database]
 , [Node].[Collection] AS [Collection]
 , [Node].[Item] AS [ChangeItem]
 , [Version]
 , [Action]
 , [RecCreatedDt]
FROM [SQLCfg].[tChange]
WHERE Node.SQLInstance = @SQLInstance
AND [Node].[Type] = CASE WHEN @NodeType = 'All' THEN [Node].[Type] ELSE @NodeType END
AND [Action] = CASE WHEN @Action = 'All' THEN [Action] ELSE @Action END
AND CAST([RecCreatedDt] AS [DATE]) = CAST(ISNULL(@ChangeDate, CURRENT_TIMESTAMP) AS [DATE])
ORDER BY [Database] DESC, [Collection] DESC, [ChangeItem] DESC; 

END
GO

GRANT EXECUTE ON [SQLCfg].[pChangesForDate] TO [SQLCfgReportingRole];

GO 

IF EXISTS ( SELECT * 
            FROM INFORMATION_SCHEMA.ROUTINES 
            WHERE SPECIFIC_SCHEMA = N'SQLCfg'
            AND SPECIFIC_NAME = N'pChangesForArchive' )
 DROP PROCEDURE [SQLCfg].[pChangesForArchive];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: The items represented by the count of the tArchiveLog row
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**    
*******************************************************************************/

CREATE Procedure [SQLCfg].[pChangesForArchive]
 ( @ArchiveLogId [INT]
 , @RootNode [NVARCHAR] (786))
AS
BEGIN

SET NOCOUNT ON;

SELECT c.Id 
 , c.[Node].ToString() AS [Node]
 , c.[Node].[Database] AS [Database]
 , c.[Node].[Collection] AS [Collection]
 , c.[Node].[Item] AS [ChangeItem]
 , c.[Version]
 , c.[Action]
 , c.[RecCreatedDt]
FROM [SQLCfg].[tChange] c
JOIN [SQLCfg].[tArchiveLog] l
ON c.[RecCreatedDt] BETWEEN l.[ActualStartDt] AND l.[ActualEndDt]
WHERE l.[Id] = @ArchiveLogId
AND CHARINDEX(@RootNode, c.Node.ToString()) = 1
ORDER BY c.[Node].[Database] DESC
 , c.[Node].[Collection] DESC
 , c.[Node].[Item] DESC; 

END
GO

GRANT EXECUTE ON [SQLCfg].[pChangesForArchive] TO [SQLCfgReportingRole];

GO 

IF EXISTS ( SELECT * 
            FROM INFORMATION_SCHEMA.ROUTINES 
            WHERE SPECIFIC_SCHEMA = N'SQLCfg'
            AND SPECIFIC_NAME = N'pChangeHistoryByItem' )
 DROP PROCEDURE [SQLCfg].[pChangeHistoryByItem];
GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: List changes on server for an item, most recent changes first
**       Business rule, any thing older than @DaystoShow will not be 
**       considered as candididate for the 'revert' status. Instead a 
**       new - and possibly duplicated version - will be added.
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**    11/28/2009     bw                 remove locale specific date conversion          
**
*******************************************************************************/
CREATE Procedure [SQLCfg].[pChangeHistoryByItem]
 ( @Node [NVARCHAR] (786)
 , @DaysToShow [INT] = 10000 )
AS
BEGIN

SET NOCOUNT ON;

SELECT [Id] 
 , [Version]
 , [Action]
 , CAST([RecCreatedDt] AS [DATE]) AS [Date]
FROM [SQLCfg].[tChange]
WHERE [Node] = @Node
AND [RecCreatedDt] > CAST(CURRENT_TIMESTAMP - @DaysToShow AS [DATE])
ORDER BY [Id] DESC; 

END
GO

GRANT EXECUTE ON [SQLCfg].[pChangeHistoryByItem] TO [SQLCfgReportingRole];

GO 

IF EXISTS ( SELECT * 
            FROM INFORMATION_SCHEMA.ROUTINES 
            WHERE SPECIFIC_SCHEMA = N'SQLCfg'
            AND SPECIFIC_NAME = N'pChangeLatestByItem' )
 DROP PROCEDURE [SQLCfg].[pChangeLatestByItem];

GO

/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: Fetch last archived change definition for an item
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**
*******************************************************************************/
CREATE Procedure [SQLCfg].[pChangeLatestByItem]
 ( @Node [NVARCHAR] (786) 
 , @Id [INT] OUTPUT
 , @Definition [NVARCHAR] (MAX) OUTPUT ) 
AS
BEGIN

SET NOCOUNT ON;

-- do not output nulls
SET @Id = 0;
SET @Definition = '';

SELECT @Id = Id
 , @Definition = Definition 
FROM (SELECT Top 1 [Id], [Definition] 
      FROM [SQLCfg].[tChange]
      WHERE [Node] = @Node
      ORDER BY [Id] DESC) derived; 

END
GO

GRANT EXECUTE ON [SQLCfg].[pChangeLatestByItem] TO [SQLCfgReportingRole];

GO 

IF EXISTS ( SELECT * 
            FROM INFORMATION_SCHEMA.ROUTINES 
            WHERE SPECIFIC_SCHEMA = N'SQLCfg'
            AND SPECIFIC_NAME = N'pChangeSelectDefinitionByVersion' )
 DROP PROCEDURE [SQLCfg].[pChangeSelectDefinitionByVersion]; 

GO

/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: Fetch an archived change definition 
**          Output parms not used because this is called by report server
**          need same out columns as pChangeSelectDefinitionById
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**
*******************************************************************************/
CREATE Procedure [SQLCfg].[pChangeSelectDefinitionByVersion] 
 ( @Node [NVARCHAR] (786)
 , @Version [INT] ) 
AS
BEGIN

 SET NOCOUNT ON;

 SELECT c.[Id]
  , c.[Node].ToString() AS [Node]
  , c.[Node].[Item] AS [Item]
  , c.[Node].[Type] AS [Type]
  , c.[Version]
  , c.[Action]
  , IsNull(c.[EventData],'') AS [EventData]
  , c.[Definition]
  , c.[DefinitionDt]
  , c.[RecCreatedDt] 
  , c1.[MinVersion]
  , c1.[MaxVersion]
 FROM [SQLCfg].[tChange] c
 JOIN (SELECT [Node]
        , Min([Version]) AS [MinVersion]
        , Max([Version]) AS [MaxVersion] 
       FROM [SQLCfg].[tChange]
       GROUP BY [Node]) c1
 ON c.[Node] = c1.[Node] 
 WHERE c.[Node] = @Node
 AND c.[Version] = @Version;

END
GO

GRANT EXECUTE ON [SQLCfg].[pChangeSelectDefinitionByVersion] TO [SQLCfgReportingRole];

GO 

IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pChangeSelectLastestBySQLInstance' )
 DROP PROCEDURE [SQLCfg].[pChangeSelectLastestBySQLInstance];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: Get a list of the most recent nodes on a server  
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**              
*******************************************************************************/

CREATE PROCEDURE [SQLCfg].[pChangeSelectLastestBySQLInstance] 
 ( @SQLInstance [NVARCHAR](128) )
AS
BEGIN

    SELECT [Id]
     , [Action]
     , [Type]
     , [SubType]
     , [SQLInstance]
     , [Database]
     , [Collection]
     , [Item]
    FROM (SELECT c.[Id] AS [Id]
           , c.[Action] AS [Action]
           , c.[Node].[Type] AS [Type]
           , c.[Node].[SubType] AS [SubType]
           , c.[Node].[SQLInstance] AS [SQLInstance]
           , c.[Node].[Database] AS [Database]
           , c.[Node].[Collection] AS [Collection]
           , c.[Node].[Item] AS [Item]
          FROM [SQLCfg].[tChange] c
          JOIN (SELECT MAX([Version]) as [Version], [Node] 
                FROM [SQLCfg].[tChange]
                WHERE [Node].[SQLInstance] = @SQLInstance 
                AND [Node].[Type] = 'SQLInstance' 
                GROUP BY [Node]) AS latest
          ON c.[Node] = latest.[Node]
          AND c.[Version] = latest.[Version]) derived
    ORDER BY CASE WHEN [SubType] = 'Server' THEN 1
                  WHEN [SubType] = 'JobServer' THEN 2
                  ELSE 3 END
     , [Database] 
     , [Collection]
     , [Item];
 
END

GO

GRANT EXECUTE ON [SQLCfg].[pChangeSelectLastestBySQLInstance] TO [SQLCfgReportingRole];

GO

IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pChangeGetLatestHierarchyForInstance' )
 DROP PROCEDURE [SQLCfg].[pChangeGetLatestHierarchyForInstance];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: Get a list of the most recent nodes on a server  
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**    Jan 16, 2010   bw                 sorting done in application       
**              
*******************************************************************************/

CREATE PROCEDURE [SQLCfg].[pChangeGetLatestHierarchyForInstance] 
 ( @SQLInstance [NVARCHAR](128) )
AS
BEGIN

    SELECT c.[Node].ToString() AS [TreeViewNodePath]
     , c.[Id] AS [ChangeId]  
     , latest.[Version]  
    FROM [SQLCfg].[tChange] c
    JOIN (SELECT MAX([Version]) as [Version], [Node]
          FROM [SQLCfg].[tChange]
          GROUP BY [Node]) AS latest
    ON c.[Node] = latest.[Node]
    AND c.Version = latest.Version
    WHERE c.[Node].[SQLInstance] = @SQLInstance 
    AND c.[Node].[Type] = 'SQLInstance'


END
GO

GRANT EXECUTE ON [SQLCfg].[pChangeGetLatestHierarchyForInstance] TO [SQLCfgReportingRole]

GO

IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pChangeSelectByContains' )
 DROP PROCEDURE [SQLCfg].[pChangeSelectByContains];

GO

/******************************************************************************
**    Auth: Bill Wunder
**    Date: January 21, 2010
**
**    Desc: all archive nodes matching the specified CONTAINS predicate    
**       
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**              
*******************************************************************************/
CREATE PROCEDURE [SQLCfg].[pChangeSelectByContains] 
 ( @SearchString [NVARCHAR] (4000)
 , @LatestVersion [Bit]
 , @Type [NVARCHAR] (12))
AS
BEGIN

    SELECT c.[Node].[SQLInstance] AS [SQLInstance]
        , c.[Node].[Type] AS [Type]
        , c.[Node].[SubType] AS [SubType]
        , c.[Node].[Database] AS [Database]
        , c.[Node].[Collection] As [Collection]
        , c.[Node].[Item] AS [Item]
        , c.[Version] as [Version]
        , c.[Node].ToString() as [Node]
    FROM SQLCfg.tChange c
    LEFT JOIN (SELECT MAX([Version]) as [Version], [Node]
               FROM [SQLCfg].[tChange]
               GROUP BY [Node]) AS latest
    ON c.[Node] = latest.[Node]
    AND c.[Version] = latest.[Version]
    WHERE c.[Node].[Type]  = @Type 
    AND (CONTAINS((c.[Definition]), @SearchString)
         OR CHARINDEX(REPLACE(REPLACE(REPLACE(@SearchString, '"', ''),'[',''),']',''), c.[Node].ToString()) > 1)
    AND (@LatestVersion = 0 
         OR c.[Version] = latest.[Version])
    ORDER BY [Node], [Version]

END
GO

GRANT EXECUTE ON [SQLCfg].[pChangeSelectByContains] TO [SQLCfgReportingRole];

GO

IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pChangeGetAllNodesForInstance' )
 DROP PROCEDURE [SQLCfg].[pChangeGetAllNodesForInstance];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: list of all repository nodes for a SQL Server  
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**              
*******************************************************************************/

CREATE PROCEDURE [SQLCfg].[pChangeGetAllNodesForInstance] 
 ( @SQLInstance [NVARCHAR](128) )
AS
BEGIN

 SELECT [Id]
  , [Node]
  , [Database]
  , [SubType]
  , [Collection]
  , [Item]
  , [Length]
  , [Version]
  , [Action]
  , [HasEventData] 
  , [ChangeDate]
 FROM (SELECT [Id]
        , [Node].ToString() AS [Node]
        , ISNULL([Node].[Database],'') AS [Database]
        , [Node].[SubType] AS [SubType]
        , [Node].[Collection] AS [Collection]
        , [Node].[Item] AS [Item]
        , [Node].[Length] AS [Length]
        , [Version]
        , [Action]
        , CASE WHEN [EventData] IS NULL THEN 0 ELSE 1 END AS [HasEventData] 
        , ISNULL([DefinitionDt], [RecCreatedDt]) AS [ChangeDate]
       FROM [SQLCfg].[tChange]
       WHERE [Node].[Type] = 'SQLInstance'
       AND [Node].[SQLInstance] = @SQLInstance) derived
 ORDER BY [Database] ASC
  , CASE WHEN [SubType] = 'Server' Then 1
         WHEN [SubType] = 'JobServer' Then 2
         WHEN [SubType] = 'Database' Then 3
         WHEN [SubType] = 'ServiceBroker' Then 4
         END  
  , [Collection] ASC
  , [Item] ASC
  , [Version] DESC;

END
GO

GRANT EXECUTE ON [SQLCfg].[pChangeGetAllNodesForInstance] TO [SQLCfgReportingRole];

GO

IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pChangeGetLatestItemsForNode' )
 DROP PROCEDURE [SQLCfg].[pChangeGetLatestItemsForNode];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: Get a list of the most recent nodes on a server  
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**              
*******************************************************************************/

CREATE PROCEDURE [SQLCfg].[pChangeGetLatestItemsForNode] 
 ( @Node [NVARCHAR](786) )
AS
BEGIN

  -- exploits that versions and changeids are always increasing
  SELECT MAX(c.Id) AS [ChangeId]
   , c.[Node]
   , c.[Node].[Item] as [Item]
   , MAX(c.[Version]) as [Version]
    FROM [SQLCfg].[tChange] c
  WHERE c.[Node].[Type] = 'SQLInstance' 
  AND c.[Node].Path = @Node  
  GROUP BY [Node]
  ORDER BY [Item];

END
GO

GRANT EXECUTE ON [SQLCfg].[pChangeGetLatestItemsForNode] TO [SQLCfgReportingRole];

GO

IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pChangeSelectNodesForDateRange' )
 DROP PROCEDURE [SQLCfg].[pChangeSelectNodesForDateRange];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: changes that occurred on an instance during a time interval
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**              
*******************************************************************************/

CREATE PROCEDURE [SQLCfg].[pChangeSelectNodesForDateRange] 
 ( @BeginDt [DATETIME]
 , @EndDt [DATETIME] )
AS
BEGIN

  --assert: versions and changeids are always increasing
  SELECT c.[Node].[SQLInstance] AS [SQLInstance]
   , COUNT(c.[Action]) AS [NbrChanges]
   , SUM(CASE WHEN c.[Action] = 'Add' THEN 1 ELSE 0 END) AS [Add]
   , SUM(CASE WHEN c.[Action] = 'Change' THEN 1 ELSE 0 END) AS [Change] 
   , SUM(CASE WHEN c.[Action] = 'Delete' THEN 1 ELSE 0 END) AS [Delete]
   , CAST(c.[RecCreatedDt] AS [DATE]) AS [RecordDate]
  FROM [SQLCfg].[tChange] c
  WHERE c.[Node].[Type] = 'SQLInstance' 
  AND c.[RecCreatedDt] BETWEEN @BeginDt AND @EndDt  
  GROUP BY c.[Node].[SQLInstance]
   , CAST(c.[RecCreatedDt] AS [DATE])
  ORDER BY [RecordDate];

END
GO

GRANT EXECUTE ON [SQLCfg].[pChangeSelectNodesForDateRange] TO [SQLCfgReportingRole];

GO

IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pChangeSelectLatestByNodeParent' )
 DROP PROCEDURE [SQLCfg].[pChangeSelectLatestByNodeParent];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: Get a list of the most recent immediate descendants (1 level only)   
**       
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**              
*******************************************************************************/
CREATE PROCEDURE [SQLCfg].[pChangeSelectLatestByNodeParent] 
 ( @NodeParent [NVARCHAR] (786) )
AS
BEGIN

SELECT [Node].[Item]
 , MAX([Version]) AS [Version]  
FROM [SQLCfg].[tChange]
WHERE [Node].[Path] = @NodeParent 
GROUP BY [Node]	    	    
ORDER By [Node].[Item];

END
GO

GRANT EXECUTE ON [SQLCfg].[pChangeSelectLatestByNodeParent] TO [SQLCfgReportingRole];

GO

IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pChangeGetLastCountByNodeParent' )
 DROP PROCEDURE [SQLCfg].[pChangeGetLastCountByNodeParent];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: Get a count of all latest version nodes under a hierarchy level   
**       
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**              
*******************************************************************************/
CREATE PROCEDURE [SQLCfg].[pChangeGetLastCountByNodeParent] 
 ( @NodeParent [NVARCHAR] (786)
 , @NbrDescendents [INT] OUTPUT )
AS
BEGIN
 SELECT @NbrDescendents = COUNT(c.[Node].[Item])  
 FROM [SQLCfg].[tChange] c  
 JOIN (SELECT MAX([Version]) AS [Version], [Node]   
       FROM [SQLCfg].[tChange]  
       WHERE [Node].ToString() Like @NodeParent + '%'   
       GROUP BY [Node]) AS latest  
 ON c.[Node] = latest.[Node]  
 AND c.[Version] = latest.[Version];  
 
 SELECT @NbrDescendents = COUNT(c.[Node].[Item])
 FROM [SQLCfg].[tChange] c
 JOIN (SELECT MAX([Version]) AS [Version], [Node] 
       FROM [SQLCfg].[tChange]
       WHERE [Node].[Path] = @NodeParent 
       GROUP BY [Node]) AS latest
 ON c.[Node] = latest.[Node]
 AND c.[Version] = latest.[Version];
 
END

GO

GRANT EXECUTE ON [SQLCfg].[pChangeGetLastCountByNodeParent] TO [SQLCfgReportingRole];

GO

IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pChangeSelectDatabaseListForInstance' )
 DROP PROCEDURE [SQLCfg].[pChangeSelectDatabaseListForInstance];

GO

/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: all databases containing archive records on an SQL Server instance    
**       
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**              
*******************************************************************************/
CREATE PROCEDURE [SQLCfg].[pChangeSelectDatabaseListForInstance] 
 ( @SQLInstance [NVARCHAR] (128) )
AS
BEGIN

SELECT DISTINCT [Node].[Database] AS [DatabaseName]
FROM [SQLCfg].[tChange]
WHERE [Node].[SQLInstance] = @SQLInstance
ORDER BY [Node].[Database]

END
GO

GRANT EXECUTE ON [SQLCfg].[pChangeSelectDatabaseListForInstance] TO [SQLCfgReportingRole];

GO

IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pChangeSelectScheduleListForInstance' )
 DROP PROCEDURE [SQLCfg].[pChangeSelectScheduleListForInstance];

GO

/******************************************************************************
**    Auth: Bill Wunder
**    Date: January 21, 2010
**
**    Desc: Node path for all schedules that belong to a SQL Server instance    
**       
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**              
*******************************************************************************/
CREATE PROCEDURE [SQLCfg].[pChangeSelectScheduleListForInstance] 
 ( @SQLInstance [NVARCHAR] (128) )
AS
BEGIN

    SELECT Distinct [Node].[Path] AS [CfgCollection]
    FROM SQLCfg.tChange 
    WHERE [Node].[Type]  = 'metadata' 
    AND [Node].[SubType] = 'Schedule'
    AND [Node].[Item] = @SQLInstance
    ORDER BY [CfgCollection]

END
GO

GRANT EXECUTE ON [SQLCfg].[pChangeSelectScheduleListForInstance] TO [SQLCfgReportingRole];

GO

IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pSQLErrorLogSelectMostRecent' )
 DROP PROCEDURE [SQLCfg].[pSQLErrorLogSelectMostRecent];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: Get the SQL errors for the the last n days  
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**    11/28/2009     bw                 add date conversion          
**              
*******************************************************************************/

CREATE PROCEDURE [SQLCfg].[pSQLErrorLogSelectMostRecent] 
 ( @DaysToGet [INT] = 30 )
AS
BEGIN

 SELECT [UserName]
  , [DBName]
  , [ErrorNumber]
  , [ErrorSeverity]
  , [ErrorState]
  , [ErrorProcedure]
  , [ErrorLine]
  , [ErrorMessage]
  , [TextData]
  , [Notes]
  , [RecCreatedDt] 
 FROM [SQLCfg].[tSQLErrorLog]  
 WHERE [RecCreatedDt] > CAST(CURRENT_TIMESTAMP - @DaysToGet AS DATE);
 
END
GO

GRANT EXECUTE ON [SQLCfg].[pSQLErrorLogSelectMostRecent] TO [SQLCfgReportingRole];

GO

IF EXISTS ( SELECT * 
            FROM INFORMATION_SCHEMA.ROUTINES 
            WHERE SPECIFIC_SCHEMA = N'SQLCfg'
            AND SPECIFIC_NAME = N'pInstanceInit' )
 DROP PROCEDURE [SQLCfg].[pInstanceInit];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: Init the scripting actions for a specified remote server  
**       state for the Repository SQL Instance. Relies on db/called proc  
**       defaults. Called at setup. Idempotent. All metadata inserts are 
**       serialized using the 'Create SQLConfigRepository Metadata' applock 
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**
*******************************************************************************/

CREATE PROCEDURE [SQLCfg].[pInstanceInit]
 ( @InstanceName [NVARCHAR](128)
 , @VersionMajor [INT]
 , @EngineEdition [INT])
AS
BEGIN
 DECLARE @rc [INT]
  , @TextData [NVARCHAR] (500)
  , @Use2005Features [BIT]
  , @Use2008Features [BIT]
  , @HasJobServer [BIT];

 SET XACT_ABORT ON;
 SET NOCOUNT ON;

 BEGIN TRY

  SET @InstanceName = UPPER(@InstanceName)
  
  -- Express and MSDE have no jobserver
  IF @EngineEdition in (1,4)
   SET @HasJobServer = 0;
  ELSE
   SET @HasJobServer = 1;

  IF @VersionMajor < 9
   SET @Use2005Features = 0
  ELSE
   SET @Use2005Features = 1

  IF @VersionMajor < 10
   SET @Use2008Features = 0
  ELSE
   SET @Use2008Features = 1

  BEGIN TRAN

   -- server
   EXEC @rc = [SQLCfg].[pInstanceInsert] @Name = @InstanceName
                                          , @ActiveDirectory  = @Use2005Features
                                          , @Audits = @Use2008Features
                                          , @BackupDevices = 1
                                          , @Configuration = 1
                                          , @Credentials = @Use2005Features
                                          , @CryptographicProviders = @Use2008Features
                                          , @Databases = 1
                                          , @EndPoints = @Use2005Features
                                          , @FullTextService = @Use2005Features
                                          , @Information = 1
                                          , @JobServer = @HasJobServer
                                          , @Logins = 1
                                          , @LinkedServers = 1
                                          , @Mail = @Use2005Features
                                          , @ProxyAccount = @Use2005Features
                                          , @ResourceGovernor = @Use2008Features
                                          , @Roles = 1
                                          , @ServerAuditSpecifications = @Use2008Features
                                          , @Settings = 1
                                          , @Triggers = @Use2005Features
                                          , @UserDefinedMessages = 1;
   IF @rc <> 0
    RAISERROR('[SQLCfg].[pInstanceInsert] Insert Failed @rc: %d; SQLInstance: %s',16,1, @rc, @InstanceName);   

   -- SQLExpress has no JobServer support
   EXEC @rc = [SQLCfg].[pJobServerInsert] @InstanceName = @InstanceName
                                           , @Alerts = @HasJobServer
                                           , @AlertSystem = @HasJobServer
                                           , @Jobs = @HasJobServer
                                           , @Operators = @HasJobServer
                                           , @ProxyAccounts = @HasJobServer
                                           , @TargetServers = @HasJobServer;
                             
                                             
   IF @rc <> 0
    RAISERROR('[SQLCfg].[pJobServerInsert] Insert Failed @rc: %d; SQLInstance: %s',16,1, @rc, @InstanceName);  

   COMMIT TRAN;
  END TRY

  BEGIN CATCH

  SET @TextData = '   @InstanceName = ' + ISNULL(CHAR(39) + @InstanceName + CHAR(39),'NULL') + CHAR(13) + CHAR(10)
                + ' , @VersionMajor = ' + ISNULL(CAST(@VersionMajor AS [VARCHAR] (10)),'NULL') + CHAR(13) + CHAR(10)
                + ' , @EngineEdition = ' + ISNULL(CAST(@EngineEdition AS [VARCHAR] (10)),'NULL'); 
  EXEC [SQLCfg].[pLogSQLError] @TextData, @@PROCID;

 END CATCH;

END
GO

GRANT EXECUTE ON [SQLCfg].[pInstanceInit] TO [SQLCfgAdminRole];

GO

IF EXISTS ( SELECT * 
            FROM INFORMATION_SCHEMA.ROUTINES 
            WHERE SPECIFIC_SCHEMA = N'SQLCfg'
            AND SPECIFIC_NAME = N'pDbInit' )
 DROP PROCEDURE [SQLCfg].[pDbInit];

GO

/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: Init the scripting actions for a specified database. Idempotent.  
**       All metadata DMA is serialized using the 'Create   
**       SQLConfigRepository Metadata' applock 
**
** Note: default configuration of new databases on managed instances will 
**       use db level options specified here. Changing the values here will
**       affect settings for all new databases added by application.  
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**
*******************************************************************************/

CREATE PROCEDURE [SQLCfg].[pDbInit]
 ( @InstanceName [NVARCHAR](128)
 , @DBName [NVARCHAR](128)
 , @VersionMajor [INT])
AS
BEGIN
 DECLARE @rc [INT]
  , @TextData [NVARCHAR] (500) 
  , @Use2005Features [BIT]
  , @Use2008Features [BIT];

 SET XACT_ABORT ON;
 SET NOCOUNT ON;

 SET @InstanceName = UPPER(@InstanceName) 

  -- for best security sample databases should never be installed in a production or Internet exposed system
  IF @DBName NOT IN ('tempdb') --'AdventureWorks','AdventureWorksDB','AdventureWorksLT','AdventureWorksLTSub','Pubs','Northwind'
  AND NOT EXISTS(SELECT * FROM [SQLCfg].[tDb] WHERE [Name] = @DBName AND [InstanceName] = @InstanceName) 
   BEGIN 

    BEGIN TRY

     IF @VersionMajor < 9
      SET @Use2005Features = 0;
     ELSE
      SET @Use2005Features = 1;

     IF @VersionMajor < 10
      SET @Use2008Features = 0;
     ELSE
      SET @Use2008Features = 1;

      BEGIN TRAN

       -- add any databases to this list that should get the restricted system db scripting options
       -- additiional branches could be added if there are databases that should get a different
       -- but fixed option set. 
       IF @DBName IN ('master','msdb','distribution','ReportServer', 'ReportServerTempDB')
        BEGIN  
          -- changing the table defaults is not recommended! change here instead 
          -- for increased security and maintainability, user configuration should 
          -- not be created in "System" databases  
          EXEC @rc = [SQLCfg].[pDbInsert] @Name = @DBName
                                            , @InstanceName = @InstanceName
                                            , @ActiveDirectory = @Use2005Features
                                            , @ApplicationRoles = 1
                                            , @Assemblies = @Use2005Features
                                            , @AsymmetricKeys = @Use2005Features
                                            , @Certificates = @Use2005Features
                                            , @DatabaseAuditSpecifications = @Use2008Features
                                            , @DatabaseOptions = 1
                                            , @Defaults = 0
                                            , @FullTextCatalogs = 0
                                            , @FullTextStopLists = 0
                                            , @PartitionFunctions = 0
                                            , @PartitionSchemes = 0
                                            , @PlanGuides = 0
                                            , @Roles = 1
                                            , @Rules = 0
                                            , @Schemas = @Use2005Features
                                            , @ServiceBroker = @Use2005Features
                                            , @StoredProcedures = 1
                                            , @SymmetricKeys = @Use2005Features
                                            , @Synonyms = @Use2005Features
                                            , @Tables = 1
                                            , @Triggers = 1
                                            , @UserDefinedAggregates = 0
                                            , @UserDefinedDataTypes = 1
                                            , @UserDefinedFunctions = 1
                                            , @UserDefinedTableTypes = 0
                                            , @UserDefinedTypes = 0
                                            , @Users = 1
                                            , @Views = 0 
                                            , @XMLSchemaCollections = 0;
           END
          ELSE -- everything else is a "User" database
           BEGIN
            IF (SELECT AddDatabasesUponDiscovery FROM SQLCfg.tServiceSettings WHERE Name = 'Default') = 1
               -- changing the table defaults is not recommended! 
              EXEC @rc = [SQLCfg].[pDbInsert] @Name = @DBName
                                               , @InstanceName = @InstanceName
                                               , @ActiveDirectory = @Use2005Features
                                               , @ApplicationRoles = 1
                                               , @Assemblies = @Use2005Features
                                               , @AsymmetricKeys = @Use2005Features
                                               , @Certificates = @Use2005Features
                                               , @DatabaseAuditSpecifications = @Use2008Features
                                               , @DatabaseOptions = 1
                                               , @Defaults = 1
                                               , @FullTextCatalogs = @Use2005Features
                                               , @FullTextStopLists = @Use2008Features
                                               , @PartitionFunctions = @Use2005Features
                                               , @PartitionSchemes = @Use2005Features
                                               , @PlanGuides = @Use2008Features
                                               , @Roles = 1
                                               , @Rules = 1
                                               , @Schemas = @Use2005Features
                                               , @ServiceBroker = @Use2005Features
                                               , @StoredProcedures = 1
                                               , @SymmetricKeys = @Use2005Features
                                               , @Synonyms = @Use2005Features
                                               , @Tables = 1
                                               , @Triggers = 1
                                               , @UserDefinedAggregates = @Use2005Features
                                               , @UserDefinedDataTypes = 1
                                               , @UserDefinedFunctions = 1
                                               , @UserDefinedTableTypes = @Use2008Features
                                               , @UserDefinedTypes = @Use2005Features
                                               , @Users = 1
                                               , @Views = 1
                                               , @XMLSchemaCollections = @Use2005Features;      
            ELSE
             BEGIN
              -- still need to insert the row, just set to do nothing if autodiscovery off
              EXEC @rc = [SQLCfg].[pDbInsert] @Name = @DBName
                                               , @InstanceName = @InstanceName
                                               , @ActiveDirectory = 0
                                               , @ApplicationRoles = 0
                                               , @Assemblies = 0
                                               , @AsymmetricKeys = 0
                                               , @Certificates = 0
                                               , @DatabaseAuditSpecifications = 0
                                               , @DatabaseOptions = 0
                                               , @Defaults = 0
                                               , @FullTextCatalogs = 0
                                               , @FullTextStopLists = 0
                                               , @PartitionFunctions = 0
                                               , @PartitionSchemes = 0
                                               , @PlanGuides = 0 
                                               , @Roles = 0
                                               , @Rules = 0
                                               , @Schemas = 0
                                               , @ServiceBroker = 0
                                               , @StoredProcedures = 0
                                               , @SymmetricKeys = 0
                                               , @Synonyms = 0
                                               , @Tables = 0
                                               , @Triggers = 0
                                               , @UserDefinedAggregates = 0
                                               , @UserDefinedDataTypes = 0
                                               , @UserDefinedFunctions = 0
                                               , @UserDefinedTableTypes = 0
                                               , @UserDefinedTypes = 0
                                               , @Users = 0
                                               , @Views = 0
                                               , @XMLSchemaCollections = 0;
              -- a little slight of hand to make the SB config go in as all off
              SET @Use2005Features = 0;      
             END
          END -- systen dbs get diff settings
         IF @rc <> 0
          RAISERROR('[SQLCfg].[pDbInsert] Failed @rc: %d',16,1, @rc);  
       
          -- could easily have implicit SB config in MSDB so add even to system dbs
          EXEC @rc = [SQLCfg].[pServiceBrokerInsert] @DatabaseName = @DBName
                                                      , @InstanceName = @InstanceName
                                                      , @MessageTypes = @Use2005Features
                                                      , @Priorities = @Use2008Features
                                                      , @Queues = @Use2005Features
                                                      , @RemoteServiceBindings = @Use2005Features
                                                      , @Routes = @Use2005Features
                                                      , @ServiceContracts = @Use2005Features
                                                      , @Services = @Use2005Features; 
          IF @rc <> 0
           RAISERROR('[SQLCfg].[pServiceBrokerInsert] Insert Failed @rc: %d',16,1, @rc);  

       COMMIT TRAN;
      END TRY

      BEGIN CATCH
 
       SET @TextData = '   @InstanceName = ' + ISNULL(CHAR(39) + @InstanceName + CHAR(39),'NULL') + CHAR(13) + CHAR(10)
                     + ' , @DbName = ' + ISNULL(CHAR(39) + @DbName + CHAR(39),'NULL') + CHAR(13) + CHAR(10)
                     + ' , @VersionMajor = ' + ISNULL(CAST(@VersionMajor AS [VARCHAR] (10)),'NULL');
      EXEC [SQLCfg].[pLogSQLError] @TextData, @@PROCID;

     END CATCH;

  END -- tempdb no-op

END
GO

GRANT EXECUTE ON [SQLCfg].[pDbInit] TO [SQLCfgServiceRole];

GO

IF EXISTS ( SELECT * 
            FROM INFORMATION_SCHEMA.ROUTINES 
            WHERE SPECIFIC_SCHEMA = N'SQLCfg'
            AND SPECIFIC_NAME = N'pRepositoryInit' )
 DROP PROCEDURE [SQLCfg].[pRepositoryInit];

GO
/******************************************************************************
**    Auth: Bill Wunder
**    Date: April 1, 2007
**
**    Desc: Init the scripting actions for configuration sync with the current  
**       state for the Repository SQL Instance/db. Relies on db/called proc  
**       defaults. Called at setup. Idempotent. All metadata inserts are 
**       serialized using the 'Create SQLConfigRepository Metadata' applock 
**
*******************************************************************************
**    Change History
*******************************************************************************
**    Date           Author             Description of Change
**
*******************************************************************************/

CREATE PROCEDURE [SQLCfg].[pRepositoryInit]
AS
BEGIN
 DECLARE @rc [INT]
  , @rrc [INT]
  , @InstanceName [NVARCHAR] (128) 
  , @DBName [NVARCHAR] (128) 
  , @TextData [NVARCHAR] (500) 
  , @ApLockResource [NVARCHAR] (255)
  , @ApLockMode [NVARCHAR] (32)
  , @ApLockOwner [NVARCHAR] (32)
  , @VersionMajor [INT]
  , @EngineEdition [INT];

 SET XACT_ABORT ON;
 SET NOCOUNT ON;

 BEGIN TRY

  BEGIN TRAN
   
   SET @InstanceName = UPPER(@@SERVERNAME)
   
   SET @VersionMajor = LEFT(CAST(SERVERPROPERTY('ProductVersion') AS [VARCHAR](128))
                            , CHARINDEX('.', CAST(SERVERPROPERTY('ProductVersion') AS VARCHAR(128))) - 1);
   SET @EngineEdition = CAST(SERVERPROPERTY('EngineEdition') AS [INT]);

    -- metadata
    IF NOT EXISTS (SELECT * FROM [SQLCfg].[tSQLCfg])
     BEGIN
      EXEC @rc = [SQLCfg].[pSQLCfgInsert];
 
      IF @rc <> 0        
       RAISERROR('[SQLCfg].[pSQLCfgInsert] Failed with @rc: %d',16,1, @rc);
     END

    -- server
    IF NOT EXISTS (SELECT * FROM [SQLCfg].[tConnection] 
                   WHERE [InstanceName] = @InstanceName
                   AND [IsDeleted] = 0)
     BEGIN
      EXEC @rc = [SQLCfg].[pConnectionInsert] @InstanceName = @InstanceName
                                               , @EncryptedConnection = 0
                                               , @TrustServerCertificate = 0
                                               , @NetworkProtocol = 'dbmslpcn (Shared Memory)'
                                               , @ConnectionTimeout = 60
                                               , @LoginSecure = 1;

      IF @rc <> 0        
       RAISERROR('[SQLCfg].[pConnectionInsert] Failed with @rc: %d',16,1, @rc);
     END 

    If NOT EXISTS (SELECT * FROM [SQLCfg].[tServiceSettings])
     BEGIN
      -- set the service application settings 
      ALTER TABLE [SQLCfg].[tServiceSettings]
      DISABLE TRIGGER ALL;

      INSERT [SQLCfg].[tServiceSettings] (Name) VALUES('DEFAULT');

      ALTER TABLE [SQLCfg].[tServiceSettings]
      ENABLE TRIGGER ALL;
     END
 
    IF NOT EXISTS (SELECT * FROM [SQLCfg].[tInstance] 
                   WHERE [Name] = @InstanceName)
     BEGIN
      EXEC @rc = [SQLCfg].[pInstanceInit] @InstanceName = @InstanceName
                                        , @VersionMajor = @VersionMajor
                                        , @EngineEdition = @EngineEdition;     
      IF @rc <> 0        
       RAISERROR('[SQLCfg].[pInstanceInit] Failed with @rc: %d',16,1, @rc);  
     END 
     
    -- all databases
    SELECT @DBName = MIN([name]) 
    FROM [master].[sys].[databases] 
    WHERE [name] not in ('tempdb');

    WHILE @DBName IS NOT NULL
     BEGIN 
      -- assert: user objects are not created in system databases
      -- permissions configuration change will be captured by monitoring principals in those databases
      IF NOT EXISTS (SELECT * FROM [SQLCfg].[tDb] 
                     WHERE [InstanceName] = @InstanceName
                     AND [Name] = @DbName) 
        BEGIN  
         EXEC @rc = [SQLCfg].[pDbInit] @InstanceName = @InstanceName
                                        , @DBName = @DBName 
                                        , @VersionMajor = @VersionMajor;
         IF @rc <> 0
          RAISERROR('[SQLCfg].[pDbInsert] Failed at Database [%s] with @rc = d.',16,1, @DBName, @rc);  
        END 

      SELECT @DBName = MIN(name) 
      FROM [master].[sys].[databases]
      WHERE [name] > @DBName
      AND [name] NOT IN ('tempdb');
     END 

    -- label the init change history
    EXEC [SQLCfg].[pChangeApplyLabel] @ChangeId = 1
                                       , @IncludeChildren = 1
                                       , @Label ='Repository Init';

   COMMIT TRAN;

   -- if it ran successfully, don't want it around anymore
   EXEC sp_executesql N'DROP PROCEDURE [SQLCfg].[pRepositoryInit]';

  END TRY

  BEGIN CATCH

    SET @TextData = '';
    EXEC [SQLCfg].[pLogSQLError] @TextData, @@PROCID;

  END CATCH;

END

GO

IF EXISTS (SELECT * 
           FROM INFORMATION_SCHEMA.ROUTINES 
           WHERE SPECIFIC_SCHEMA = N'SQLCfg'
           AND SPECIFIC_NAME = N'pConfigurationCatalog' )
 DROP PROCEDURE [SQLCfg].[pConfigurationCatalog];

GO

/******************************************************************************
**	Auth: Bill Wunder
**	Date: April 1, 2007
**
**	Desc: Catalog of all current configuration items   
**
*******************************************************************************
**	Change History
*******************************************************************************
**	Date		   Author		     Description of Change
**	          
*******************************************************************************/
CREATE PROCEDURE [SQLCfg].[pConfigurationCatalog] 
AS
BEGIN

 SELECT [Node].[SQLInstance] AS [SQLInstance]
  , [Node].[Database] AS [Database]
  , [Node].[Type] AS [Type]
  , [Node].[SubType] AS [SubType]
  , [Node].[Collection] AS [Collection] 
  , [Node].[Item] AS [Item]
  , MAX([Version]) AS [Version]
  , [Node].ToString() AS [Node]
 FROM [SQLCfg].[tChange] c
 GROUP BY Node.ToString()
  , [Node].[SQLInstance]
  , [Node].[Database]
  , [Node].[Type]
  , [Node].[SubType]
  , [Node].[Collection]
  , [Node].[Item]
 ORDER BY Node.ToString()
  , [Node].[SQLInstance]
  , [Node].[Database]
  , [Node].[Type]
  , [Node].[SubType]
  , [Node].[Collection]
  , [Node].[Item];

END;
GO

GRANT EXECUTE ON [SQLCfg].[pConfigurationCatalog] TO [SQLCfgReportingRole];

GO

