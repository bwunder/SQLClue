'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.468
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="SQLClue")>  _
Partial Public Class DataClassesSQLConfigurationDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InserttSchedule(instance As tSchedule)
    End Sub
  Partial Private Sub UpdatetSchedule(instance As tSchedule)
    End Sub
  Partial Private Sub DeletetSchedule(instance As tSchedule)
    End Sub
  Partial Private Sub InserttConnection(instance As tConnection)
    End Sub
  Partial Private Sub UpdatetConnection(instance As tConnection)
    End Sub
  Partial Private Sub DeletetConnection(instance As tConnection)
    End Sub
  Partial Private Sub InserttSQLErrorLog(instance As tSQLErrorLog)
    End Sub
  Partial Private Sub UpdatetSQLErrorLog(instance As tSQLErrorLog)
    End Sub
  Partial Private Sub DeletetSQLErrorLog(instance As tSQLErrorLog)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.cCommon.My.MySettings.Default.SQLClueConnectionString1, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property tSchedules() As System.Data.Linq.Table(Of tSchedule)
		Get
			Return Me.GetTable(Of tSchedule)
		End Get
	End Property
	
	Public ReadOnly Property tConnections() As System.Data.Linq.Table(Of tConnection)
		Get
			Return Me.GetTable(Of tConnection)
		End Get
	End Property
	
	Public ReadOnly Property tSQLErrorLogs() As System.Data.Linq.Table(Of tSQLErrorLog)
		Get
			Return Me.GetTable(Of tSQLErrorLog)
		End Get
	End Property
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="SQLCfg.pScheduleDelete")>  _
	Public Function pScheduleDelete(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Id", DbType:="Int")> ByVal id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="SQLCfg.pConnectionGet")>  _
	Public Function pConnectionGet(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="InstanceName", DbType:="NVarChar(128)")> ByVal instanceName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="EncryptedConnection", DbType:="Bit")> ByRef encryptedConnection As System.Nullable(Of Boolean), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="TrustServerCertificate", DbType:="Bit")> ByRef trustServerCertificate As System.Nullable(Of Boolean), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="NetworkProtocol", DbType:="NVarChar(128)")> ByRef networkProtocol As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ConnectionTimeout", DbType:="Int")> ByRef connectionTimeout As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="LoginSecure", DbType:="Bit")> ByRef loginSecure As System.Nullable(Of Boolean)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), instanceName, encryptedConnection, trustServerCertificate, networkProtocol, connectionTimeout, loginSecure)
		encryptedConnection = CType(result.GetParameterValue(1),System.Nullable(Of Boolean))
		trustServerCertificate = CType(result.GetParameterValue(2),System.Nullable(Of Boolean))
		networkProtocol = CType(result.GetParameterValue(3),String)
		connectionTimeout = CType(result.GetParameterValue(4),System.Nullable(Of Integer))
		loginSecure = CType(result.GetParameterValue(5),System.Nullable(Of Boolean))
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="SQLCfg.pConnectionSelectAll")>  _
	Public Function pConnectionSelectAll() As ISingleResult(Of pConnectionSelectAllResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of pConnectionSelectAllResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="SQLCfg.pConnectionUserGet")>  _
	Public Function pConnectionUserGet(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="InstanceName", DbType:="NVarChar(128)")> ByVal instanceName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="LoginName", DbType:="NVarChar(128)")> ByRef loginName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Password", DbType:="NVarChar(128)")> ByRef password As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), instanceName, loginName, password)
		loginName = CType(result.GetParameterValue(1),String)
		password = CType(result.GetParameterValue(2),String)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="SQLCfg.pScheduleGet")>  _
	Public Function pScheduleGet(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Id", DbType:="Int")> ByVal id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="InstanceName", DbType:="NVarChar(128)")> ByRef instanceName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Interval", DbType:="Int")> ByRef interval As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IntervalType", DbType:="NVarChar(10)")> ByRef intervalType As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IntervalBaseDt", DbType:="DateTime")> ByRef intervalBaseDt As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UseEventNotifications", DbType:="Bit")> ByRef useEventNotifications As System.Nullable(Of Boolean), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IsActive", DbType:="Bit")> ByRef isActive As System.Nullable(Of Boolean)) As ISingleResult(Of pScheduleGetResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), id, instanceName, interval, intervalType, intervalBaseDt, useEventNotifications, isActive)
		instanceName = CType(result.GetParameterValue(1),String)
		interval = CType(result.GetParameterValue(2),System.Nullable(Of Integer))
		intervalType = CType(result.GetParameterValue(3),String)
		intervalBaseDt = CType(result.GetParameterValue(4),System.Nullable(Of Date))
		useEventNotifications = CType(result.GetParameterValue(5),System.Nullable(Of Boolean))
		isActive = CType(result.GetParameterValue(6),System.Nullable(Of Boolean))
		Return CType(result.ReturnValue,ISingleResult(Of pScheduleGetResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="SQLCfg.pScheduleInsert")>  _
	Public Function pScheduleInsert(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="InstanceName", DbType:="NVarChar(128)")> ByVal instanceName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Interval", DbType:="Int")> ByVal interval As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IntervalType", DbType:="NVarChar(10)")> ByVal intervalType As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IntervalBaseDt", DbType:="DateTime")> ByVal intervalBaseDt As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UseEventNotifications", DbType:="Bit")> ByVal useEventNotifications As System.Nullable(Of Boolean), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IsActive", DbType:="Bit")> ByVal isActive As System.Nullable(Of Boolean), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Id", DbType:="Int")> ByRef id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), instanceName, interval, intervalType, intervalBaseDt, useEventNotifications, isActive, id)
		id = CType(result.GetParameterValue(6),System.Nullable(Of Integer))
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="SQLCfg.pScheduleSelectAll")>  _
	Public Function pScheduleSelectAll() As ISingleResult(Of pScheduleSelectAllResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of pScheduleSelectAllResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="SQLCfg.pScheduleSelectAllForInstance")>  _
	Public Function pScheduleSelectAllForInstance(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="InstanceName", DbType:="NVarChar(128)")> ByVal instanceName As String) As ISingleResult(Of pScheduleSelectAllForInstanceResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), instanceName)
		Return CType(result.ReturnValue,ISingleResult(Of pScheduleSelectAllForInstanceResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="SQLCfg.pScheduleUpdate")>  _
	Public Function pScheduleUpdate(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Id", DbType:="Int")> ByVal id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="InstanceName", DbType:="NVarChar(128)")> ByVal instanceName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Interval", DbType:="Int")> ByVal interval As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IntervalType", DbType:="NVarChar(10)")> ByVal intervalType As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IntervalBaseDt", DbType:="DateTime")> ByVal intervalBaseDt As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UseEventNotifications", DbType:="Bit")> ByVal useEventNotifications As System.Nullable(Of Boolean), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IsActive", DbType:="Bit")> ByVal isActive As System.Nullable(Of Boolean)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), id, instanceName, interval, intervalType, intervalBaseDt, useEventNotifications, isActive)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="SQLCfg.pSQLErrorLogSelectMostRecent")>  _
	Public Function pSQLErrorLogSelectMostRecent(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="DaysToGet", DbType:="Int")> ByVal daysToGet As System.Nullable(Of Integer)) As ISingleResult(Of pSQLErrorLogSelectMostRecentResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), daysToGet)
		Return CType(result.ReturnValue,ISingleResult(Of pSQLErrorLogSelectMostRecentResult))
	End Function
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="SQLCfg.tSchedule")>  _
Partial Public Class tSchedule
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _InstanceName As String
	
	Private _Interval As Integer
	
	Private _IntervalType As String
	
	Private _IntervalBaseDt As System.Nullable(Of Date)
	
	Private _UseEventNotifications As Boolean
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Private _RecCreatedDt As Date
	
	Private _RecCreatedUser As String
	
	Private _RecUpdatedDt As Date
	
	Private _RecUpdatedUser As String
	
	Private _tConnection As EntityRef(Of tConnection)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnInstanceNameChanging(value As String)
    End Sub
    Partial Private Sub OnInstanceNameChanged()
    End Sub
    Partial Private Sub OnIntervalChanging(value As Integer)
    End Sub
    Partial Private Sub OnIntervalChanged()
    End Sub
    Partial Private Sub OnIntervalTypeChanging(value As String)
    End Sub
    Partial Private Sub OnIntervalTypeChanged()
    End Sub
    Partial Private Sub OnIntervalBaseDtChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnIntervalBaseDtChanged()
    End Sub
    Partial Private Sub OnUseEventNotificationsChanging(value As Boolean)
    End Sub
    Partial Private Sub OnUseEventNotificationsChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    Partial Private Sub OnRecCreatedDtChanging(value As Date)
    End Sub
    Partial Private Sub OnRecCreatedDtChanged()
    End Sub
    Partial Private Sub OnRecCreatedUserChanging(value As String)
    End Sub
    Partial Private Sub OnRecCreatedUserChanged()
    End Sub
    Partial Private Sub OnRecUpdatedDtChanging(value As Date)
    End Sub
    Partial Private Sub OnRecUpdatedDtChanged()
    End Sub
    Partial Private Sub OnRecUpdatedUserChanging(value As String)
    End Sub
    Partial Private Sub OnRecUpdatedUserChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tConnection = CType(Nothing, EntityRef(Of tConnection))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InstanceName", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property InstanceName() As String
		Get
			Return Me._InstanceName
		End Get
		Set
			If (String.Equals(Me._InstanceName, value) = false) Then
				If Me._tConnection.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnInstanceNameChanging(value)
				Me.SendPropertyChanging
				Me._InstanceName = value
				Me.SendPropertyChanged("InstanceName")
				Me.OnInstanceNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Interval", DbType:="Int NOT NULL")>  _
	Public Property Interval() As Integer
		Get
			Return Me._Interval
		End Get
		Set
			If ((Me._Interval = value)  _
						= false) Then
				Me.OnIntervalChanging(value)
				Me.SendPropertyChanging
				Me._Interval = value
				Me.SendPropertyChanged("Interval")
				Me.OnIntervalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IntervalType", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property IntervalType() As String
		Get
			Return Me._IntervalType
		End Get
		Set
			If (String.Equals(Me._IntervalType, value) = false) Then
				Me.OnIntervalTypeChanging(value)
				Me.SendPropertyChanging
				Me._IntervalType = value
				Me.SendPropertyChanged("IntervalType")
				Me.OnIntervalTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IntervalBaseDt", DbType:="DateTime")>  _
	Public Property IntervalBaseDt() As System.Nullable(Of Date)
		Get
			Return Me._IntervalBaseDt
		End Get
		Set
			If (Me._IntervalBaseDt.Equals(value) = false) Then
				Me.OnIntervalBaseDtChanging(value)
				Me.SendPropertyChanging
				Me._IntervalBaseDt = value
				Me.SendPropertyChanged("IntervalBaseDt")
				Me.OnIntervalBaseDtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UseEventNotifications", DbType:="Bit NOT NULL")>  _
	Public Property UseEventNotifications() As Boolean
		Get
			Return Me._UseEventNotifications
		End Get
		Set
			If ((Me._UseEventNotifications = value)  _
						= false) Then
				Me.OnUseEventNotificationsChanging(value)
				Me.SendPropertyChanging
				Me._UseEventNotifications = value
				Me.SendPropertyChanged("UseEventNotifications")
				Me.OnUseEventNotificationsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecCreatedDt", DbType:="DateTime NOT NULL")>  _
	Public Property RecCreatedDt() As Date
		Get
			Return Me._RecCreatedDt
		End Get
		Set
			If ((Me._RecCreatedDt = value)  _
						= false) Then
				Me.OnRecCreatedDtChanging(value)
				Me.SendPropertyChanging
				Me._RecCreatedDt = value
				Me.SendPropertyChanged("RecCreatedDt")
				Me.OnRecCreatedDtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecCreatedUser", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property RecCreatedUser() As String
		Get
			Return Me._RecCreatedUser
		End Get
		Set
			If (String.Equals(Me._RecCreatedUser, value) = false) Then
				Me.OnRecCreatedUserChanging(value)
				Me.SendPropertyChanging
				Me._RecCreatedUser = value
				Me.SendPropertyChanged("RecCreatedUser")
				Me.OnRecCreatedUserChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecUpdatedDt", DbType:="DateTime NOT NULL")>  _
	Public Property RecUpdatedDt() As Date
		Get
			Return Me._RecUpdatedDt
		End Get
		Set
			If ((Me._RecUpdatedDt = value)  _
						= false) Then
				Me.OnRecUpdatedDtChanging(value)
				Me.SendPropertyChanging
				Me._RecUpdatedDt = value
				Me.SendPropertyChanged("RecUpdatedDt")
				Me.OnRecUpdatedDtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecUpdatedUser", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property RecUpdatedUser() As String
		Get
			Return Me._RecUpdatedUser
		End Get
		Set
			If (String.Equals(Me._RecUpdatedUser, value) = false) Then
				Me.OnRecUpdatedUserChanging(value)
				Me.SendPropertyChanging
				Me._RecUpdatedUser = value
				Me.SendPropertyChanged("RecUpdatedUser")
				Me.OnRecUpdatedUserChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tConnection_tSchedule", Storage:="_tConnection", ThisKey:="InstanceName", OtherKey:="InstanceName", IsForeignKey:=true)>  _
	Public Property tConnection() As tConnection
		Get
			Return Me._tConnection.Entity
		End Get
		Set
			Dim previousValue As tConnection = Me._tConnection.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tConnection.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tConnection.Entity = Nothing
					previousValue.tSchedules.Remove(Me)
				End If
				Me._tConnection.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tSchedules.Add(Me)
					Me._InstanceName = value.InstanceName
				Else
					Me._InstanceName = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("tConnection")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="SQLCfg.tConnection")>  _
Partial Public Class tConnection
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _InstanceName As String
	
	Private _EncryptedConnection As Boolean
	
	Private _TrustServerCertificate As Boolean
	
	Private _NetworkProtocol As String
	
	Private _ConnectionTimeout As Integer
	
	Private _LoginSecure As Boolean
	
	Private _LoginName As String
	
	Private _EncryptedPassword As System.Data.Linq.Binary
	
	Private _IsDeleted As Boolean
	
	Private _RecCreatedDt As Date
	
	Private _RecCreatedUser As String
	
	Private _RecUpdatedDt As Date
	
	Private _RecUpdatedUser As String
	
	Private _tSchedules As EntitySet(Of tSchedule)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnInstanceNameChanging(value As String)
    End Sub
    Partial Private Sub OnInstanceNameChanged()
    End Sub
    Partial Private Sub OnEncryptedConnectionChanging(value As Boolean)
    End Sub
    Partial Private Sub OnEncryptedConnectionChanged()
    End Sub
    Partial Private Sub OnTrustServerCertificateChanging(value As Boolean)
    End Sub
    Partial Private Sub OnTrustServerCertificateChanged()
    End Sub
    Partial Private Sub OnNetworkProtocolChanging(value As String)
    End Sub
    Partial Private Sub OnNetworkProtocolChanged()
    End Sub
    Partial Private Sub OnConnectionTimeoutChanging(value As Integer)
    End Sub
    Partial Private Sub OnConnectionTimeoutChanged()
    End Sub
    Partial Private Sub OnLoginSecureChanging(value As Boolean)
    End Sub
    Partial Private Sub OnLoginSecureChanged()
    End Sub
    Partial Private Sub OnLoginNameChanging(value As String)
    End Sub
    Partial Private Sub OnLoginNameChanged()
    End Sub
    Partial Private Sub OnEncryptedPasswordChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnEncryptedPasswordChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnRecCreatedDtChanging(value As Date)
    End Sub
    Partial Private Sub OnRecCreatedDtChanged()
    End Sub
    Partial Private Sub OnRecCreatedUserChanging(value As String)
    End Sub
    Partial Private Sub OnRecCreatedUserChanged()
    End Sub
    Partial Private Sub OnRecUpdatedDtChanging(value As Date)
    End Sub
    Partial Private Sub OnRecUpdatedDtChanged()
    End Sub
    Partial Private Sub OnRecUpdatedUserChanging(value As String)
    End Sub
    Partial Private Sub OnRecUpdatedUserChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tSchedules = New EntitySet(Of tSchedule)(AddressOf Me.attach_tSchedules, AddressOf Me.detach_tSchedules)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InstanceName", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property InstanceName() As String
		Get
			Return Me._InstanceName
		End Get
		Set
			If (String.Equals(Me._InstanceName, value) = false) Then
				Me.OnInstanceNameChanging(value)
				Me.SendPropertyChanging
				Me._InstanceName = value
				Me.SendPropertyChanged("InstanceName")
				Me.OnInstanceNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EncryptedConnection", DbType:="Bit NOT NULL")>  _
	Public Property EncryptedConnection() As Boolean
		Get
			Return Me._EncryptedConnection
		End Get
		Set
			If ((Me._EncryptedConnection = value)  _
						= false) Then
				Me.OnEncryptedConnectionChanging(value)
				Me.SendPropertyChanging
				Me._EncryptedConnection = value
				Me.SendPropertyChanged("EncryptedConnection")
				Me.OnEncryptedConnectionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TrustServerCertificate", DbType:="Bit NOT NULL")>  _
	Public Property TrustServerCertificate() As Boolean
		Get
			Return Me._TrustServerCertificate
		End Get
		Set
			If ((Me._TrustServerCertificate = value)  _
						= false) Then
				Me.OnTrustServerCertificateChanging(value)
				Me.SendPropertyChanging
				Me._TrustServerCertificate = value
				Me.SendPropertyChanged("TrustServerCertificate")
				Me.OnTrustServerCertificateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NetworkProtocol", DbType:="NVarChar(128)")>  _
	Public Property NetworkProtocol() As String
		Get
			Return Me._NetworkProtocol
		End Get
		Set
			If (String.Equals(Me._NetworkProtocol, value) = false) Then
				Me.OnNetworkProtocolChanging(value)
				Me.SendPropertyChanging
				Me._NetworkProtocol = value
				Me.SendPropertyChanged("NetworkProtocol")
				Me.OnNetworkProtocolChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ConnectionTimeout", DbType:="Int NOT NULL")>  _
	Public Property ConnectionTimeout() As Integer
		Get
			Return Me._ConnectionTimeout
		End Get
		Set
			If ((Me._ConnectionTimeout = value)  _
						= false) Then
				Me.OnConnectionTimeoutChanging(value)
				Me.SendPropertyChanging
				Me._ConnectionTimeout = value
				Me.SendPropertyChanged("ConnectionTimeout")
				Me.OnConnectionTimeoutChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LoginSecure", DbType:="Bit NOT NULL")>  _
	Public Property LoginSecure() As Boolean
		Get
			Return Me._LoginSecure
		End Get
		Set
			If ((Me._LoginSecure = value)  _
						= false) Then
				Me.OnLoginSecureChanging(value)
				Me.SendPropertyChanging
				Me._LoginSecure = value
				Me.SendPropertyChanged("LoginSecure")
				Me.OnLoginSecureChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LoginName", DbType:="NVarChar(128)")>  _
	Public Property LoginName() As String
		Get
			Return Me._LoginName
		End Get
		Set
			If (String.Equals(Me._LoginName, value) = false) Then
				Me.OnLoginNameChanging(value)
				Me.SendPropertyChanging
				Me._LoginName = value
				Me.SendPropertyChanged("LoginName")
				Me.OnLoginNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EncryptedPassword", DbType:="VarBinary(256)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property EncryptedPassword() As System.Data.Linq.Binary
		Get
			Return Me._EncryptedPassword
		End Get
		Set
			If (Object.Equals(Me._EncryptedPassword, value) = false) Then
				Me.OnEncryptedPasswordChanging(value)
				Me.SendPropertyChanging
				Me._EncryptedPassword = value
				Me.SendPropertyChanged("EncryptedPassword")
				Me.OnEncryptedPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property IsDeleted() As Boolean
		Get
			Return Me._IsDeleted
		End Get
		Set
			If ((Me._IsDeleted = value)  _
						= false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecCreatedDt", DbType:="DateTime NOT NULL")>  _
	Public Property RecCreatedDt() As Date
		Get
			Return Me._RecCreatedDt
		End Get
		Set
			If ((Me._RecCreatedDt = value)  _
						= false) Then
				Me.OnRecCreatedDtChanging(value)
				Me.SendPropertyChanging
				Me._RecCreatedDt = value
				Me.SendPropertyChanged("RecCreatedDt")
				Me.OnRecCreatedDtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecCreatedUser", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property RecCreatedUser() As String
		Get
			Return Me._RecCreatedUser
		End Get
		Set
			If (String.Equals(Me._RecCreatedUser, value) = false) Then
				Me.OnRecCreatedUserChanging(value)
				Me.SendPropertyChanging
				Me._RecCreatedUser = value
				Me.SendPropertyChanged("RecCreatedUser")
				Me.OnRecCreatedUserChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecUpdatedDt", DbType:="DateTime NOT NULL")>  _
	Public Property RecUpdatedDt() As Date
		Get
			Return Me._RecUpdatedDt
		End Get
		Set
			If ((Me._RecUpdatedDt = value)  _
						= false) Then
				Me.OnRecUpdatedDtChanging(value)
				Me.SendPropertyChanging
				Me._RecUpdatedDt = value
				Me.SendPropertyChanged("RecUpdatedDt")
				Me.OnRecUpdatedDtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecUpdatedUser", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property RecUpdatedUser() As String
		Get
			Return Me._RecUpdatedUser
		End Get
		Set
			If (String.Equals(Me._RecUpdatedUser, value) = false) Then
				Me.OnRecUpdatedUserChanging(value)
				Me.SendPropertyChanging
				Me._RecUpdatedUser = value
				Me.SendPropertyChanged("RecUpdatedUser")
				Me.OnRecUpdatedUserChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tConnection_tSchedule", Storage:="_tSchedules", ThisKey:="InstanceName", OtherKey:="InstanceName")>  _
	Public Property tSchedules() As EntitySet(Of tSchedule)
		Get
			Return Me._tSchedules
		End Get
		Set
			Me._tSchedules.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tSchedules(ByVal entity As tSchedule)
		Me.SendPropertyChanging
		entity.tConnection = Me
	End Sub
	
	Private Sub detach_tSchedules(ByVal entity As tSchedule)
		Me.SendPropertyChanging
		entity.tConnection = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="SQLCfg.tSQLErrorLog")>  _
Partial Public Class tSQLErrorLog
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _UserName As String
	
	Private _DBName As String
	
	Private _ErrorNumber As System.Nullable(Of Integer)
	
	Private _ErrorSeverity As System.Nullable(Of Integer)
	
	Private _ErrorState As System.Nullable(Of Integer)
	
	Private _ErrorProcedure As String
	
	Private _ErrorLine As System.Nullable(Of Integer)
	
	Private _ErrorMessage As String
	
	Private _TextData As String
	
	Private _Notes As String
	
	Private _RecCreatedDt As Date
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnUserNameChanged()
    End Sub
    Partial Private Sub OnDBNameChanging(value As String)
    End Sub
    Partial Private Sub OnDBNameChanged()
    End Sub
    Partial Private Sub OnErrorNumberChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnErrorNumberChanged()
    End Sub
    Partial Private Sub OnErrorSeverityChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnErrorSeverityChanged()
    End Sub
    Partial Private Sub OnErrorStateChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnErrorStateChanged()
    End Sub
    Partial Private Sub OnErrorProcedureChanging(value As String)
    End Sub
    Partial Private Sub OnErrorProcedureChanged()
    End Sub
    Partial Private Sub OnErrorLineChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnErrorLineChanged()
    End Sub
    Partial Private Sub OnErrorMessageChanging(value As String)
    End Sub
    Partial Private Sub OnErrorMessageChanged()
    End Sub
    Partial Private Sub OnTextDataChanging(value As String)
    End Sub
    Partial Private Sub OnTextDataChanged()
    End Sub
    Partial Private Sub OnNotesChanging(value As String)
    End Sub
    Partial Private Sub OnNotesChanged()
    End Sub
    Partial Private Sub OnRecCreatedDtChanging(value As Date)
    End Sub
    Partial Private Sub OnRecCreatedDtChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NVarChar(256)")>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me.OnUserNameChanging(value)
				Me.SendPropertyChanging
				Me._UserName = value
				Me.SendPropertyChanged("UserName")
				Me.OnUserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DBName", DbType:="NVarChar(128)")>  _
	Public Property DBName() As String
		Get
			Return Me._DBName
		End Get
		Set
			If (String.Equals(Me._DBName, value) = false) Then
				Me.OnDBNameChanging(value)
				Me.SendPropertyChanging
				Me._DBName = value
				Me.SendPropertyChanged("DBName")
				Me.OnDBNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ErrorNumber", DbType:="Int")>  _
	Public Property ErrorNumber() As System.Nullable(Of Integer)
		Get
			Return Me._ErrorNumber
		End Get
		Set
			If (Me._ErrorNumber.Equals(value) = false) Then
				Me.OnErrorNumberChanging(value)
				Me.SendPropertyChanging
				Me._ErrorNumber = value
				Me.SendPropertyChanged("ErrorNumber")
				Me.OnErrorNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ErrorSeverity", DbType:="Int")>  _
	Public Property ErrorSeverity() As System.Nullable(Of Integer)
		Get
			Return Me._ErrorSeverity
		End Get
		Set
			If (Me._ErrorSeverity.Equals(value) = false) Then
				Me.OnErrorSeverityChanging(value)
				Me.SendPropertyChanging
				Me._ErrorSeverity = value
				Me.SendPropertyChanged("ErrorSeverity")
				Me.OnErrorSeverityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ErrorState", DbType:="Int")>  _
	Public Property ErrorState() As System.Nullable(Of Integer)
		Get
			Return Me._ErrorState
		End Get
		Set
			If (Me._ErrorState.Equals(value) = false) Then
				Me.OnErrorStateChanging(value)
				Me.SendPropertyChanging
				Me._ErrorState = value
				Me.SendPropertyChanged("ErrorState")
				Me.OnErrorStateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ErrorProcedure", DbType:="NVarChar(126)")>  _
	Public Property ErrorProcedure() As String
		Get
			Return Me._ErrorProcedure
		End Get
		Set
			If (String.Equals(Me._ErrorProcedure, value) = false) Then
				Me.OnErrorProcedureChanging(value)
				Me.SendPropertyChanging
				Me._ErrorProcedure = value
				Me.SendPropertyChanged("ErrorProcedure")
				Me.OnErrorProcedureChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ErrorLine", DbType:="Int")>  _
	Public Property ErrorLine() As System.Nullable(Of Integer)
		Get
			Return Me._ErrorLine
		End Get
		Set
			If (Me._ErrorLine.Equals(value) = false) Then
				Me.OnErrorLineChanging(value)
				Me.SendPropertyChanging
				Me._ErrorLine = value
				Me.SendPropertyChanged("ErrorLine")
				Me.OnErrorLineChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ErrorMessage", DbType:="NVarChar(2048)")>  _
	Public Property ErrorMessage() As String
		Get
			Return Me._ErrorMessage
		End Get
		Set
			If (String.Equals(Me._ErrorMessage, value) = false) Then
				Me.OnErrorMessageChanging(value)
				Me.SendPropertyChanging
				Me._ErrorMessage = value
				Me.SendPropertyChanged("ErrorMessage")
				Me.OnErrorMessageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TextData", DbType:="NVarChar(MAX)")>  _
	Public Property TextData() As String
		Get
			Return Me._TextData
		End Get
		Set
			If (String.Equals(Me._TextData, value) = false) Then
				Me.OnTextDataChanging(value)
				Me.SendPropertyChanging
				Me._TextData = value
				Me.SendPropertyChanged("TextData")
				Me.OnTextDataChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Notes", DbType:="NVarChar(MAX)")>  _
	Public Property Notes() As String
		Get
			Return Me._Notes
		End Get
		Set
			If (String.Equals(Me._Notes, value) = false) Then
				Me.OnNotesChanging(value)
				Me.SendPropertyChanging
				Me._Notes = value
				Me.SendPropertyChanged("Notes")
				Me.OnNotesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecCreatedDt", DbType:="DateTime NOT NULL")>  _
	Public Property RecCreatedDt() As Date
		Get
			Return Me._RecCreatedDt
		End Get
		Set
			If ((Me._RecCreatedDt = value)  _
						= false) Then
				Me.OnRecCreatedDtChanging(value)
				Me.SendPropertyChanging
				Me._RecCreatedDt = value
				Me.SendPropertyChanged("RecCreatedDt")
				Me.OnRecCreatedDtChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

Partial Public Class pConnectionSelectAllResult
	
	Private _InstanceName As String
	
	Private _EncryptedConnection As Boolean
	
	Private _TrustServerCertificate As Boolean
	
	Private _NetworkProtocol As String
	
	Private _ConnectionTimeout As Integer
	
	Private _LoginSecure As Boolean
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InstanceName", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property InstanceName() As String
		Get
			Return Me._InstanceName
		End Get
		Set
			If (String.Equals(Me._InstanceName, value) = false) Then
				Me._InstanceName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EncryptedConnection", DbType:="Bit NOT NULL")>  _
	Public Property EncryptedConnection() As Boolean
		Get
			Return Me._EncryptedConnection
		End Get
		Set
			If ((Me._EncryptedConnection = value)  _
						= false) Then
				Me._EncryptedConnection = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TrustServerCertificate", DbType:="Bit NOT NULL")>  _
	Public Property TrustServerCertificate() As Boolean
		Get
			Return Me._TrustServerCertificate
		End Get
		Set
			If ((Me._TrustServerCertificate = value)  _
						= false) Then
				Me._TrustServerCertificate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NetworkProtocol", DbType:="NVarChar(128)")>  _
	Public Property NetworkProtocol() As String
		Get
			Return Me._NetworkProtocol
		End Get
		Set
			If (String.Equals(Me._NetworkProtocol, value) = false) Then
				Me._NetworkProtocol = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ConnectionTimeout", DbType:="Int NOT NULL")>  _
	Public Property ConnectionTimeout() As Integer
		Get
			Return Me._ConnectionTimeout
		End Get
		Set
			If ((Me._ConnectionTimeout = value)  _
						= false) Then
				Me._ConnectionTimeout = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LoginSecure", DbType:="Bit NOT NULL")>  _
	Public Property LoginSecure() As Boolean
		Get
			Return Me._LoginSecure
		End Get
		Set
			If ((Me._LoginSecure = value)  _
						= false) Then
				Me._LoginSecure = value
			End If
		End Set
	End Property
End Class

Partial Public Class pScheduleGetResult
	
	Private _Column1 As String
	
	Private _Column2 As System.Nullable(Of Integer)
	
	Private _Column3 As String
	
	Private _Column4 As System.Nullable(Of Date)
	
	Private _Column5 As System.Nullable(Of Boolean)
	
	Private _Column6 As System.Nullable(Of Boolean)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Column1", DbType:="NVarChar(128)")>  _
	Public Property Column1() As String
		Get
			Return Me._Column1
		End Get
		Set
			If (String.Equals(Me._Column1, value) = false) Then
				Me._Column1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Column2", DbType:="Int")>  _
	Public Property Column2() As System.Nullable(Of Integer)
		Get
			Return Me._Column2
		End Get
		Set
			If (Me._Column2.Equals(value) = false) Then
				Me._Column2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Column3", DbType:="NVarChar(10)")>  _
	Public Property Column3() As String
		Get
			Return Me._Column3
		End Get
		Set
			If (String.Equals(Me._Column3, value) = false) Then
				Me._Column3 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Column4", DbType:="DateTime")>  _
	Public Property Column4() As System.Nullable(Of Date)
		Get
			Return Me._Column4
		End Get
		Set
			If (Me._Column4.Equals(value) = false) Then
				Me._Column4 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Column5", DbType:="Bit")>  _
	Public Property Column5() As System.Nullable(Of Boolean)
		Get
			Return Me._Column5
		End Get
		Set
			If (Me._Column5.Equals(value) = false) Then
				Me._Column5 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Column6", DbType:="Bit")>  _
	Public Property Column6() As System.Nullable(Of Boolean)
		Get
			Return Me._Column6
		End Get
		Set
			If (Me._Column6.Equals(value) = false) Then
				Me._Column6 = value
			End If
		End Set
	End Property
End Class

Partial Public Class pScheduleSelectAllResult
	
	Private _Id As Integer
	
	Private _InstanceName As String
	
	Private _Interval As Integer
	
	Private _IntervalType As String
	
	Private _IntervalBaseDt As System.Nullable(Of Date)
	
	Private _UseEventNotifications As Boolean
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="Int NOT NULL")>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me._Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InstanceName", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property InstanceName() As String
		Get
			Return Me._InstanceName
		End Get
		Set
			If (String.Equals(Me._InstanceName, value) = false) Then
				Me._InstanceName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Interval", DbType:="Int NOT NULL")>  _
	Public Property Interval() As Integer
		Get
			Return Me._Interval
		End Get
		Set
			If ((Me._Interval = value)  _
						= false) Then
				Me._Interval = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IntervalType", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property IntervalType() As String
		Get
			Return Me._IntervalType
		End Get
		Set
			If (String.Equals(Me._IntervalType, value) = false) Then
				Me._IntervalType = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IntervalBaseDt", DbType:="DateTime")>  _
	Public Property IntervalBaseDt() As System.Nullable(Of Date)
		Get
			Return Me._IntervalBaseDt
		End Get
		Set
			If (Me._IntervalBaseDt.Equals(value) = false) Then
				Me._IntervalBaseDt = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UseEventNotifications", DbType:="Bit NOT NULL")>  _
	Public Property UseEventNotifications() As Boolean
		Get
			Return Me._UseEventNotifications
		End Get
		Set
			If ((Me._UseEventNotifications = value)  _
						= false) Then
				Me._UseEventNotifications = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me._IsActive = value
			End If
		End Set
	End Property
End Class

Partial Public Class pScheduleSelectAllForInstanceResult
	
	Private _Id As Integer
	
	Private _InstanceName As String
	
	Private _Interval As Integer
	
	Private _IntervalType As String
	
	Private _IntervalBaseDt As System.Nullable(Of Date)
	
	Private _UseEventNotifications As Boolean
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="Int NOT NULL")>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me._Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InstanceName", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property InstanceName() As String
		Get
			Return Me._InstanceName
		End Get
		Set
			If (String.Equals(Me._InstanceName, value) = false) Then
				Me._InstanceName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Interval", DbType:="Int NOT NULL")>  _
	Public Property Interval() As Integer
		Get
			Return Me._Interval
		End Get
		Set
			If ((Me._Interval = value)  _
						= false) Then
				Me._Interval = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IntervalType", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property IntervalType() As String
		Get
			Return Me._IntervalType
		End Get
		Set
			If (String.Equals(Me._IntervalType, value) = false) Then
				Me._IntervalType = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IntervalBaseDt", DbType:="DateTime")>  _
	Public Property IntervalBaseDt() As System.Nullable(Of Date)
		Get
			Return Me._IntervalBaseDt
		End Get
		Set
			If (Me._IntervalBaseDt.Equals(value) = false) Then
				Me._IntervalBaseDt = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UseEventNotifications", DbType:="Bit NOT NULL")>  _
	Public Property UseEventNotifications() As Boolean
		Get
			Return Me._UseEventNotifications
		End Get
		Set
			If ((Me._UseEventNotifications = value)  _
						= false) Then
				Me._UseEventNotifications = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me._IsActive = value
			End If
		End Set
	End Property
End Class

Partial Public Class pSQLErrorLogSelectMostRecentResult
	
	Private _UserName As String
	
	Private _DBName As String
	
	Private _ErrorNumber As System.Nullable(Of Integer)
	
	Private _ErrorSeverity As System.Nullable(Of Integer)
	
	Private _ErrorState As System.Nullable(Of Integer)
	
	Private _ErrorProcedure As String
	
	Private _ErrorLine As System.Nullable(Of Integer)
	
	Private _ErrorMessage As String
	
	Private _TextData As String
	
	Private _Notes As String
	
	Private _RecCreatedDt As Date
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NVarChar(256)")>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me._UserName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DBName", DbType:="NVarChar(128)")>  _
	Public Property DBName() As String
		Get
			Return Me._DBName
		End Get
		Set
			If (String.Equals(Me._DBName, value) = false) Then
				Me._DBName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ErrorNumber", DbType:="Int")>  _
	Public Property ErrorNumber() As System.Nullable(Of Integer)
		Get
			Return Me._ErrorNumber
		End Get
		Set
			If (Me._ErrorNumber.Equals(value) = false) Then
				Me._ErrorNumber = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ErrorSeverity", DbType:="Int")>  _
	Public Property ErrorSeverity() As System.Nullable(Of Integer)
		Get
			Return Me._ErrorSeverity
		End Get
		Set
			If (Me._ErrorSeverity.Equals(value) = false) Then
				Me._ErrorSeverity = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ErrorState", DbType:="Int")>  _
	Public Property ErrorState() As System.Nullable(Of Integer)
		Get
			Return Me._ErrorState
		End Get
		Set
			If (Me._ErrorState.Equals(value) = false) Then
				Me._ErrorState = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ErrorProcedure", DbType:="NVarChar(126)")>  _
	Public Property ErrorProcedure() As String
		Get
			Return Me._ErrorProcedure
		End Get
		Set
			If (String.Equals(Me._ErrorProcedure, value) = false) Then
				Me._ErrorProcedure = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ErrorLine", DbType:="Int")>  _
	Public Property ErrorLine() As System.Nullable(Of Integer)
		Get
			Return Me._ErrorLine
		End Get
		Set
			If (Me._ErrorLine.Equals(value) = false) Then
				Me._ErrorLine = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ErrorMessage", DbType:="NVarChar(2048)")>  _
	Public Property ErrorMessage() As String
		Get
			Return Me._ErrorMessage
		End Get
		Set
			If (String.Equals(Me._ErrorMessage, value) = false) Then
				Me._ErrorMessage = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TextData", DbType:="NVarChar(MAX)")>  _
	Public Property TextData() As String
		Get
			Return Me._TextData
		End Get
		Set
			If (String.Equals(Me._TextData, value) = false) Then
				Me._TextData = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Notes", DbType:="NVarChar(MAX)")>  _
	Public Property Notes() As String
		Get
			Return Me._Notes
		End Get
		Set
			If (String.Equals(Me._Notes, value) = false) Then
				Me._Notes = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecCreatedDt", DbType:="DateTime NOT NULL")>  _
	Public Property RecCreatedDt() As Date
		Get
			Return Me._RecCreatedDt
		End Get
		Set
			If ((Me._RecCreatedDt = value)  _
						= false) Then
				Me._RecCreatedDt = value
			End If
		End Set
	End Property
End Class
