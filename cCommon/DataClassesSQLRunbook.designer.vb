'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.468
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="SQLClue")>  _
Partial Public Class DataClassesSQLRunbookDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InserttUser(instance As tUser)
    End Sub
  Partial Private Sub UpdatetUser(instance As tUser)
    End Sub
  Partial Private Sub DeletetUser(instance As tUser)
    End Sub
  Partial Private Sub InserttTopicRating(instance As tTopicRating)
    End Sub
  Partial Private Sub UpdatetTopicRating(instance As tTopicRating)
    End Sub
  Partial Private Sub DeletetTopicRating(instance As tTopicRating)
    End Sub
  Partial Private Sub InserttTopicDocument(instance As tTopicDocument)
    End Sub
  Partial Private Sub UpdatetTopicDocument(instance As tTopicDocument)
    End Sub
  Partial Private Sub DeletetTopicDocument(instance As tTopicDocument)
    End Sub
  Partial Private Sub InserttTopic(instance As tTopic)
    End Sub
  Partial Private Sub UpdatetTopic(instance As tTopic)
    End Sub
  Partial Private Sub DeletetTopic(instance As tTopic)
    End Sub
  Partial Private Sub InserttRating(instance As tRating)
    End Sub
  Partial Private Sub UpdatetRating(instance As tRating)
    End Sub
  Partial Private Sub DeletetRating(instance As tRating)
    End Sub
  Partial Private Sub InserttDocumentRating(instance As tDocumentRating)
    End Sub
  Partial Private Sub UpdatetDocumentRating(instance As tDocumentRating)
    End Sub
  Partial Private Sub DeletetDocumentRating(instance As tDocumentRating)
    End Sub
  Partial Private Sub InserttDocument(instance As tDocument)
    End Sub
  Partial Private Sub UpdatetDocument(instance As tDocument)
    End Sub
  Partial Private Sub DeletetDocument(instance As tDocument)
    End Sub
  Partial Private Sub InserttCategoryTopic(instance As tCategoryTopic)
    End Sub
  Partial Private Sub UpdatetCategoryTopic(instance As tCategoryTopic)
    End Sub
  Partial Private Sub DeletetCategoryTopic(instance As tCategoryTopic)
    End Sub
  Partial Private Sub InserttCategoryRating(instance As tCategoryRating)
    End Sub
  Partial Private Sub UpdatetCategoryRating(instance As tCategoryRating)
    End Sub
  Partial Private Sub DeletetCategoryRating(instance As tCategoryRating)
    End Sub
  Partial Private Sub InserttCategory(instance As tCategory)
    End Sub
  Partial Private Sub UpdatetCategory(instance As tCategory)
    End Sub
  Partial Private Sub DeletetCategory(instance As tCategory)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.cCommon.My.MySettings.Default.SQLClueConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property tUsers() As System.Data.Linq.Table(Of tUser)
		Get
			Return Me.GetTable(Of tUser)
		End Get
	End Property
	
	Public ReadOnly Property tTopicRatings() As System.Data.Linq.Table(Of tTopicRating)
		Get
			Return Me.GetTable(Of tTopicRating)
		End Get
	End Property
	
	Public ReadOnly Property tTopicDocuments() As System.Data.Linq.Table(Of tTopicDocument)
		Get
			Return Me.GetTable(Of tTopicDocument)
		End Get
	End Property
	
	Public ReadOnly Property tTopics() As System.Data.Linq.Table(Of tTopic)
		Get
			Return Me.GetTable(Of tTopic)
		End Get
	End Property
	
	Public ReadOnly Property tRatings() As System.Data.Linq.Table(Of tRating)
		Get
			Return Me.GetTable(Of tRating)
		End Get
	End Property
	
	Public ReadOnly Property tOptions() As System.Data.Linq.Table(Of tOption)
		Get
			Return Me.GetTable(Of tOption)
		End Get
	End Property
	
	Public ReadOnly Property tDocumentRatings() As System.Data.Linq.Table(Of tDocumentRating)
		Get
			Return Me.GetTable(Of tDocumentRating)
		End Get
	End Property
	
	Public ReadOnly Property tDocuments() As System.Data.Linq.Table(Of tDocument)
		Get
			Return Me.GetTable(Of tDocument)
		End Get
	End Property
	
	Public ReadOnly Property tCategoryTopics() As System.Data.Linq.Table(Of tCategoryTopic)
		Get
			Return Me.GetTable(Of tCategoryTopic)
		End Get
	End Property
	
	Public ReadOnly Property tCategoryRatings() As System.Data.Linq.Table(Of tCategoryRating)
		Get
			Return Me.GetTable(Of tCategoryRating)
		End Get
	End Property
	
	Public ReadOnly Property tCategories() As System.Data.Linq.Table(Of tCategory)
		Get
			Return Me.GetTable(Of tCategory)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="SQLRunbook.tUser")>  _
Partial Public Class tUser
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _OriginalLogin As String
	
	Private _FriendlyName As String
	
	Private _Notes As String
	
	Private _CategoriesAdded As System.Nullable(Of Integer)
	
	Private _CategoriesUpdated As System.Nullable(Of Integer)
	
	Private _CategoriesDeleted As System.Nullable(Of Integer)
	
	Private _CategoriesRated As System.Nullable(Of Integer)
	
	Private _CategoriesReRated As System.Nullable(Of Integer)
	
	Private _CategoryTopicsAdded As System.Nullable(Of Integer)
	
	Private _CategoryTopicsDeleted As System.Nullable(Of Integer)
	
	Private _TopicsAdded As System.Nullable(Of Integer)
	
	Private _TopicsUpdated As System.Nullable(Of Integer)
	
	Private _TopicsDeleted As System.Nullable(Of Integer)
	
	Private _TopicsRated As System.Nullable(Of Integer)
	
	Private _TopicsReRated As System.Nullable(Of Integer)
	
	Private _TopicDocumentsAdded As System.Nullable(Of Integer)
	
	Private _TopicDocumentsDeleted As System.Nullable(Of Integer)
	
	Private _DocumentsAdded As System.Nullable(Of Integer)
	
	Private _DocumentsUpdated As System.Nullable(Of Integer)
	
	Private _DocumentsDeleted As System.Nullable(Of Integer)
	
	Private _DocumentsRated As System.Nullable(Of Integer)
	
	Private _DocumentsReRated As System.Nullable(Of Integer)
	
	Private _LastContributionDt As Date
	
	Private _RecCreatedDt As Date
	
	Private _RecCreatedUser As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnOriginalLoginChanging(value As String)
    End Sub
    Partial Private Sub OnOriginalLoginChanged()
    End Sub
    Partial Private Sub OnFriendlyNameChanging(value As String)
    End Sub
    Partial Private Sub OnFriendlyNameChanged()
    End Sub
    Partial Private Sub OnNotesChanging(value As String)
    End Sub
    Partial Private Sub OnNotesChanged()
    End Sub
    Partial Private Sub OnCategoriesAddedChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCategoriesAddedChanged()
    End Sub
    Partial Private Sub OnCategoriesUpdatedChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCategoriesUpdatedChanged()
    End Sub
    Partial Private Sub OnCategoriesDeletedChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCategoriesDeletedChanged()
    End Sub
    Partial Private Sub OnCategoriesRatedChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCategoriesRatedChanged()
    End Sub
    Partial Private Sub OnCategoriesReRatedChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCategoriesReRatedChanged()
    End Sub
    Partial Private Sub OnCategoryTopicsAddedChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCategoryTopicsAddedChanged()
    End Sub
    Partial Private Sub OnCategoryTopicsDeletedChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCategoryTopicsDeletedChanged()
    End Sub
    Partial Private Sub OnTopicsAddedChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTopicsAddedChanged()
    End Sub
    Partial Private Sub OnTopicsUpdatedChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTopicsUpdatedChanged()
    End Sub
    Partial Private Sub OnTopicsDeletedChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTopicsDeletedChanged()
    End Sub
    Partial Private Sub OnTopicsRatedChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTopicsRatedChanged()
    End Sub
    Partial Private Sub OnTopicsReRatedChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTopicsReRatedChanged()
    End Sub
    Partial Private Sub OnTopicDocumentsAddedChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTopicDocumentsAddedChanged()
    End Sub
    Partial Private Sub OnTopicDocumentsDeletedChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTopicDocumentsDeletedChanged()
    End Sub
    Partial Private Sub OnDocumentsAddedChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDocumentsAddedChanged()
    End Sub
    Partial Private Sub OnDocumentsUpdatedChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDocumentsUpdatedChanged()
    End Sub
    Partial Private Sub OnDocumentsDeletedChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDocumentsDeletedChanged()
    End Sub
    Partial Private Sub OnDocumentsRatedChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDocumentsRatedChanged()
    End Sub
    Partial Private Sub OnDocumentsReRatedChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDocumentsReRatedChanged()
    End Sub
    Partial Private Sub OnLastContributionDtChanging(value As Date)
    End Sub
    Partial Private Sub OnLastContributionDtChanged()
    End Sub
    Partial Private Sub OnRecCreatedDtChanging(value As Date)
    End Sub
    Partial Private Sub OnRecCreatedDtChanged()
    End Sub
    Partial Private Sub OnRecCreatedUserChanging(value As String)
    End Sub
    Partial Private Sub OnRecCreatedUserChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OriginalLogin", DbType:="NVarChar(256)")>  _
	Public Property OriginalLogin() As String
		Get
			Return Me._OriginalLogin
		End Get
		Set
			If (String.Equals(Me._OriginalLogin, value) = false) Then
				Me.OnOriginalLoginChanging(value)
				Me.SendPropertyChanging
				Me._OriginalLogin = value
				Me.SendPropertyChanged("OriginalLogin")
				Me.OnOriginalLoginChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FriendlyName", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property FriendlyName() As String
		Get
			Return Me._FriendlyName
		End Get
		Set
			If (String.Equals(Me._FriendlyName, value) = false) Then
				Me.OnFriendlyNameChanging(value)
				Me.SendPropertyChanging
				Me._FriendlyName = value
				Me.SendPropertyChanged("FriendlyName")
				Me.OnFriendlyNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Notes", DbType:="NVarChar(MAX)")>  _
	Public Property Notes() As String
		Get
			Return Me._Notes
		End Get
		Set
			If (String.Equals(Me._Notes, value) = false) Then
				Me.OnNotesChanging(value)
				Me.SendPropertyChanging
				Me._Notes = value
				Me.SendPropertyChanged("Notes")
				Me.OnNotesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoriesAdded", DbType:="Int")>  _
	Public Property CategoriesAdded() As System.Nullable(Of Integer)
		Get
			Return Me._CategoriesAdded
		End Get
		Set
			If (Me._CategoriesAdded.Equals(value) = false) Then
				Me.OnCategoriesAddedChanging(value)
				Me.SendPropertyChanging
				Me._CategoriesAdded = value
				Me.SendPropertyChanged("CategoriesAdded")
				Me.OnCategoriesAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoriesUpdated", DbType:="Int")>  _
	Public Property CategoriesUpdated() As System.Nullable(Of Integer)
		Get
			Return Me._CategoriesUpdated
		End Get
		Set
			If (Me._CategoriesUpdated.Equals(value) = false) Then
				Me.OnCategoriesUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._CategoriesUpdated = value
				Me.SendPropertyChanged("CategoriesUpdated")
				Me.OnCategoriesUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoriesDeleted", DbType:="Int")>  _
	Public Property CategoriesDeleted() As System.Nullable(Of Integer)
		Get
			Return Me._CategoriesDeleted
		End Get
		Set
			If (Me._CategoriesDeleted.Equals(value) = false) Then
				Me.OnCategoriesDeletedChanging(value)
				Me.SendPropertyChanging
				Me._CategoriesDeleted = value
				Me.SendPropertyChanged("CategoriesDeleted")
				Me.OnCategoriesDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoriesRated", DbType:="Int")>  _
	Public Property CategoriesRated() As System.Nullable(Of Integer)
		Get
			Return Me._CategoriesRated
		End Get
		Set
			If (Me._CategoriesRated.Equals(value) = false) Then
				Me.OnCategoriesRatedChanging(value)
				Me.SendPropertyChanging
				Me._CategoriesRated = value
				Me.SendPropertyChanged("CategoriesRated")
				Me.OnCategoriesRatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoriesReRated", DbType:="Int")>  _
	Public Property CategoriesReRated() As System.Nullable(Of Integer)
		Get
			Return Me._CategoriesReRated
		End Get
		Set
			If (Me._CategoriesReRated.Equals(value) = false) Then
				Me.OnCategoriesReRatedChanging(value)
				Me.SendPropertyChanging
				Me._CategoriesReRated = value
				Me.SendPropertyChanged("CategoriesReRated")
				Me.OnCategoriesReRatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryTopicsAdded", DbType:="Int")>  _
	Public Property CategoryTopicsAdded() As System.Nullable(Of Integer)
		Get
			Return Me._CategoryTopicsAdded
		End Get
		Set
			If (Me._CategoryTopicsAdded.Equals(value) = false) Then
				Me.OnCategoryTopicsAddedChanging(value)
				Me.SendPropertyChanging
				Me._CategoryTopicsAdded = value
				Me.SendPropertyChanged("CategoryTopicsAdded")
				Me.OnCategoryTopicsAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryTopicsDeleted", DbType:="Int")>  _
	Public Property CategoryTopicsDeleted() As System.Nullable(Of Integer)
		Get
			Return Me._CategoryTopicsDeleted
		End Get
		Set
			If (Me._CategoryTopicsDeleted.Equals(value) = false) Then
				Me.OnCategoryTopicsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._CategoryTopicsDeleted = value
				Me.SendPropertyChanged("CategoryTopicsDeleted")
				Me.OnCategoryTopicsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TopicsAdded", DbType:="Int")>  _
	Public Property TopicsAdded() As System.Nullable(Of Integer)
		Get
			Return Me._TopicsAdded
		End Get
		Set
			If (Me._TopicsAdded.Equals(value) = false) Then
				Me.OnTopicsAddedChanging(value)
				Me.SendPropertyChanging
				Me._TopicsAdded = value
				Me.SendPropertyChanged("TopicsAdded")
				Me.OnTopicsAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TopicsUpdated", DbType:="Int")>  _
	Public Property TopicsUpdated() As System.Nullable(Of Integer)
		Get
			Return Me._TopicsUpdated
		End Get
		Set
			If (Me._TopicsUpdated.Equals(value) = false) Then
				Me.OnTopicsUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._TopicsUpdated = value
				Me.SendPropertyChanged("TopicsUpdated")
				Me.OnTopicsUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TopicsDeleted", DbType:="Int")>  _
	Public Property TopicsDeleted() As System.Nullable(Of Integer)
		Get
			Return Me._TopicsDeleted
		End Get
		Set
			If (Me._TopicsDeleted.Equals(value) = false) Then
				Me.OnTopicsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._TopicsDeleted = value
				Me.SendPropertyChanged("TopicsDeleted")
				Me.OnTopicsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TopicsRated", DbType:="Int")>  _
	Public Property TopicsRated() As System.Nullable(Of Integer)
		Get
			Return Me._TopicsRated
		End Get
		Set
			If (Me._TopicsRated.Equals(value) = false) Then
				Me.OnTopicsRatedChanging(value)
				Me.SendPropertyChanging
				Me._TopicsRated = value
				Me.SendPropertyChanged("TopicsRated")
				Me.OnTopicsRatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TopicsReRated", DbType:="Int")>  _
	Public Property TopicsReRated() As System.Nullable(Of Integer)
		Get
			Return Me._TopicsReRated
		End Get
		Set
			If (Me._TopicsReRated.Equals(value) = false) Then
				Me.OnTopicsReRatedChanging(value)
				Me.SendPropertyChanging
				Me._TopicsReRated = value
				Me.SendPropertyChanged("TopicsReRated")
				Me.OnTopicsReRatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TopicDocumentsAdded", DbType:="Int")>  _
	Public Property TopicDocumentsAdded() As System.Nullable(Of Integer)
		Get
			Return Me._TopicDocumentsAdded
		End Get
		Set
			If (Me._TopicDocumentsAdded.Equals(value) = false) Then
				Me.OnTopicDocumentsAddedChanging(value)
				Me.SendPropertyChanging
				Me._TopicDocumentsAdded = value
				Me.SendPropertyChanged("TopicDocumentsAdded")
				Me.OnTopicDocumentsAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TopicDocumentsDeleted", DbType:="Int")>  _
	Public Property TopicDocumentsDeleted() As System.Nullable(Of Integer)
		Get
			Return Me._TopicDocumentsDeleted
		End Get
		Set
			If (Me._TopicDocumentsDeleted.Equals(value) = false) Then
				Me.OnTopicDocumentsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._TopicDocumentsDeleted = value
				Me.SendPropertyChanged("TopicDocumentsDeleted")
				Me.OnTopicDocumentsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DocumentsAdded", DbType:="Int")>  _
	Public Property DocumentsAdded() As System.Nullable(Of Integer)
		Get
			Return Me._DocumentsAdded
		End Get
		Set
			If (Me._DocumentsAdded.Equals(value) = false) Then
				Me.OnDocumentsAddedChanging(value)
				Me.SendPropertyChanging
				Me._DocumentsAdded = value
				Me.SendPropertyChanged("DocumentsAdded")
				Me.OnDocumentsAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DocumentsUpdated", DbType:="Int")>  _
	Public Property DocumentsUpdated() As System.Nullable(Of Integer)
		Get
			Return Me._DocumentsUpdated
		End Get
		Set
			If (Me._DocumentsUpdated.Equals(value) = false) Then
				Me.OnDocumentsUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DocumentsUpdated = value
				Me.SendPropertyChanged("DocumentsUpdated")
				Me.OnDocumentsUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DocumentsDeleted", DbType:="Int")>  _
	Public Property DocumentsDeleted() As System.Nullable(Of Integer)
		Get
			Return Me._DocumentsDeleted
		End Get
		Set
			If (Me._DocumentsDeleted.Equals(value) = false) Then
				Me.OnDocumentsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._DocumentsDeleted = value
				Me.SendPropertyChanged("DocumentsDeleted")
				Me.OnDocumentsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DocumentsRated", DbType:="Int")>  _
	Public Property DocumentsRated() As System.Nullable(Of Integer)
		Get
			Return Me._DocumentsRated
		End Get
		Set
			If (Me._DocumentsRated.Equals(value) = false) Then
				Me.OnDocumentsRatedChanging(value)
				Me.SendPropertyChanging
				Me._DocumentsRated = value
				Me.SendPropertyChanged("DocumentsRated")
				Me.OnDocumentsRatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DocumentsReRated", DbType:="Int")>  _
	Public Property DocumentsReRated() As System.Nullable(Of Integer)
		Get
			Return Me._DocumentsReRated
		End Get
		Set
			If (Me._DocumentsReRated.Equals(value) = false) Then
				Me.OnDocumentsReRatedChanging(value)
				Me.SendPropertyChanging
				Me._DocumentsReRated = value
				Me.SendPropertyChanged("DocumentsReRated")
				Me.OnDocumentsReRatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastContributionDt", DbType:="DateTime NOT NULL")>  _
	Public Property LastContributionDt() As Date
		Get
			Return Me._LastContributionDt
		End Get
		Set
			If ((Me._LastContributionDt = value)  _
						= false) Then
				Me.OnLastContributionDtChanging(value)
				Me.SendPropertyChanging
				Me._LastContributionDt = value
				Me.SendPropertyChanged("LastContributionDt")
				Me.OnLastContributionDtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecCreatedDt", DbType:="DateTime NOT NULL")>  _
	Public Property RecCreatedDt() As Date
		Get
			Return Me._RecCreatedDt
		End Get
		Set
			If ((Me._RecCreatedDt = value)  _
						= false) Then
				Me.OnRecCreatedDtChanging(value)
				Me.SendPropertyChanging
				Me._RecCreatedDt = value
				Me.SendPropertyChanged("RecCreatedDt")
				Me.OnRecCreatedDtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecCreatedUser", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property RecCreatedUser() As String
		Get
			Return Me._RecCreatedUser
		End Get
		Set
			If (String.Equals(Me._RecCreatedUser, value) = false) Then
				Me.OnRecCreatedUserChanging(value)
				Me.SendPropertyChanging
				Me._RecCreatedUser = value
				Me.SendPropertyChanged("RecCreatedUser")
				Me.OnRecCreatedUserChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="SQLRunbook.tTopicRating")>  _
Partial Public Class tTopicRating
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _TopicId As Integer
	
	Private _RatingId As Integer
	
	Private _Notes As String
	
	Private _RecCreatedDt As Date
	
	Private _RecCreatedUser As String
	
	Private _LastUpdatedDt As Date
	
	Private _LastUpdatedUser As String
	
	Private _tTopic As EntityRef(Of tTopic)
	
	Private _tRating As EntityRef(Of tRating)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnTopicIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnTopicIdChanged()
    End Sub
    Partial Private Sub OnRatingIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnRatingIdChanged()
    End Sub
    Partial Private Sub OnNotesChanging(value As String)
    End Sub
    Partial Private Sub OnNotesChanged()
    End Sub
    Partial Private Sub OnRecCreatedDtChanging(value As Date)
    End Sub
    Partial Private Sub OnRecCreatedDtChanged()
    End Sub
    Partial Private Sub OnRecCreatedUserChanging(value As String)
    End Sub
    Partial Private Sub OnRecCreatedUserChanged()
    End Sub
    Partial Private Sub OnLastUpdatedDtChanging(value As Date)
    End Sub
    Partial Private Sub OnLastUpdatedDtChanged()
    End Sub
    Partial Private Sub OnLastUpdatedUserChanging(value As String)
    End Sub
    Partial Private Sub OnLastUpdatedUserChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tTopic = CType(Nothing, EntityRef(Of tTopic))
		Me._tRating = CType(Nothing, EntityRef(Of tRating))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TopicId", DbType:="Int NOT NULL")>  _
	Public Property TopicId() As Integer
		Get
			Return Me._TopicId
		End Get
		Set
			If ((Me._TopicId = value)  _
						= false) Then
				If Me._tTopic.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTopicIdChanging(value)
				Me.SendPropertyChanging
				Me._TopicId = value
				Me.SendPropertyChanged("TopicId")
				Me.OnTopicIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RatingId", DbType:="Int NOT NULL")>  _
	Public Property RatingId() As Integer
		Get
			Return Me._RatingId
		End Get
		Set
			If ((Me._RatingId = value)  _
						= false) Then
				If Me._tRating.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnRatingIdChanging(value)
				Me.SendPropertyChanging
				Me._RatingId = value
				Me.SendPropertyChanged("RatingId")
				Me.OnRatingIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Notes", DbType:="NVarChar(MAX)")>  _
	Public Property Notes() As String
		Get
			Return Me._Notes
		End Get
		Set
			If (String.Equals(Me._Notes, value) = false) Then
				Me.OnNotesChanging(value)
				Me.SendPropertyChanging
				Me._Notes = value
				Me.SendPropertyChanged("Notes")
				Me.OnNotesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecCreatedDt", DbType:="DateTime NOT NULL")>  _
	Public Property RecCreatedDt() As Date
		Get
			Return Me._RecCreatedDt
		End Get
		Set
			If ((Me._RecCreatedDt = value)  _
						= false) Then
				Me.OnRecCreatedDtChanging(value)
				Me.SendPropertyChanging
				Me._RecCreatedDt = value
				Me.SendPropertyChanged("RecCreatedDt")
				Me.OnRecCreatedDtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecCreatedUser", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property RecCreatedUser() As String
		Get
			Return Me._RecCreatedUser
		End Get
		Set
			If (String.Equals(Me._RecCreatedUser, value) = false) Then
				Me.OnRecCreatedUserChanging(value)
				Me.SendPropertyChanging
				Me._RecCreatedUser = value
				Me.SendPropertyChanged("RecCreatedUser")
				Me.OnRecCreatedUserChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdatedDt", DbType:="DateTime NOT NULL")>  _
	Public Property LastUpdatedDt() As Date
		Get
			Return Me._LastUpdatedDt
		End Get
		Set
			If ((Me._LastUpdatedDt = value)  _
						= false) Then
				Me.OnLastUpdatedDtChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdatedDt = value
				Me.SendPropertyChanged("LastUpdatedDt")
				Me.OnLastUpdatedDtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdatedUser", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property LastUpdatedUser() As String
		Get
			Return Me._LastUpdatedUser
		End Get
		Set
			If (String.Equals(Me._LastUpdatedUser, value) = false) Then
				Me.OnLastUpdatedUserChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdatedUser = value
				Me.SendPropertyChanged("LastUpdatedUser")
				Me.OnLastUpdatedUserChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tTopic_tTopicRating", Storage:="_tTopic", ThisKey:="TopicId", OtherKey:="Id", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property tTopic() As tTopic
		Get
			Return Me._tTopic.Entity
		End Get
		Set
			Dim previousValue As tTopic = Me._tTopic.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tTopic.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tTopic.Entity = Nothing
					previousValue.tTopicRatings.Remove(Me)
				End If
				Me._tTopic.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tTopicRatings.Add(Me)
					Me._TopicId = value.Id
				Else
					Me._TopicId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("tTopic")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tRating_tTopicRating", Storage:="_tRating", ThisKey:="RatingId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property tRating() As tRating
		Get
			Return Me._tRating.Entity
		End Get
		Set
			Dim previousValue As tRating = Me._tRating.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tRating.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tRating.Entity = Nothing
					previousValue.tTopicRatings.Remove(Me)
				End If
				Me._tRating.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tTopicRatings.Add(Me)
					Me._RatingId = value.Id
				Else
					Me._RatingId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("tRating")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="SQLRunbook.tTopicDocument")>  _
Partial Public Class tTopicDocument
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _TopicId As Integer
	
	Private _DocumentId As Integer
	
	Private _RecCreatedDt As Date
	
	Private _RecCreatedUser As String
	
	Private _tTopic As EntityRef(Of tTopic)
	
	Private _tDocument As EntityRef(Of tDocument)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTopicIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnTopicIdChanged()
    End Sub
    Partial Private Sub OnDocumentIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnDocumentIdChanged()
    End Sub
    Partial Private Sub OnRecCreatedDtChanging(value As Date)
    End Sub
    Partial Private Sub OnRecCreatedDtChanged()
    End Sub
    Partial Private Sub OnRecCreatedUserChanging(value As String)
    End Sub
    Partial Private Sub OnRecCreatedUserChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tTopic = CType(Nothing, EntityRef(Of tTopic))
		Me._tDocument = CType(Nothing, EntityRef(Of tDocument))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TopicId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property TopicId() As Integer
		Get
			Return Me._TopicId
		End Get
		Set
			If ((Me._TopicId = value)  _
						= false) Then
				If Me._tTopic.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTopicIdChanging(value)
				Me.SendPropertyChanging
				Me._TopicId = value
				Me.SendPropertyChanged("TopicId")
				Me.OnTopicIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DocumentId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property DocumentId() As Integer
		Get
			Return Me._DocumentId
		End Get
		Set
			If ((Me._DocumentId = value)  _
						= false) Then
				If Me._tDocument.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDocumentIdChanging(value)
				Me.SendPropertyChanging
				Me._DocumentId = value
				Me.SendPropertyChanged("DocumentId")
				Me.OnDocumentIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecCreatedDt", DbType:="DateTime NOT NULL")>  _
	Public Property RecCreatedDt() As Date
		Get
			Return Me._RecCreatedDt
		End Get
		Set
			If ((Me._RecCreatedDt = value)  _
						= false) Then
				Me.OnRecCreatedDtChanging(value)
				Me.SendPropertyChanging
				Me._RecCreatedDt = value
				Me.SendPropertyChanged("RecCreatedDt")
				Me.OnRecCreatedDtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecCreatedUser", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property RecCreatedUser() As String
		Get
			Return Me._RecCreatedUser
		End Get
		Set
			If (String.Equals(Me._RecCreatedUser, value) = false) Then
				Me.OnRecCreatedUserChanging(value)
				Me.SendPropertyChanging
				Me._RecCreatedUser = value
				Me.SendPropertyChanged("RecCreatedUser")
				Me.OnRecCreatedUserChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tTopic_tTopicDocument", Storage:="_tTopic", ThisKey:="TopicId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property tTopic() As tTopic
		Get
			Return Me._tTopic.Entity
		End Get
		Set
			Dim previousValue As tTopic = Me._tTopic.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tTopic.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tTopic.Entity = Nothing
					previousValue.tTopicDocuments.Remove(Me)
				End If
				Me._tTopic.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tTopicDocuments.Add(Me)
					Me._TopicId = value.Id
				Else
					Me._TopicId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("tTopic")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tDocument_tTopicDocument", Storage:="_tDocument", ThisKey:="DocumentId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property tDocument() As tDocument
		Get
			Return Me._tDocument.Entity
		End Get
		Set
			Dim previousValue As tDocument = Me._tDocument.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tDocument.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tDocument.Entity = Nothing
					previousValue.tTopicDocuments.Remove(Me)
				End If
				Me._tDocument.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tTopicDocuments.Add(Me)
					Me._DocumentId = value.Id
				Else
					Me._DocumentId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("tDocument")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="SQLRunbook.tTopic")>  _
Partial Public Class tTopic
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Name As String
	
	Private _Notes As String
	
	Private _Owner As String
	
	Private _RecCreatedDt As Date
	
	Private _RecCreatedUser As String
	
	Private _LastUpdatedDt As Date
	
	Private _LastUpdatedUser As String
	
	Private _tTopicRatings As EntitySet(Of tTopicRating)
	
	Private _tTopicDocuments As EntitySet(Of tTopicDocument)
	
	Private _tCategoryTopics As EntitySet(Of tCategoryTopic)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnNotesChanging(value As String)
    End Sub
    Partial Private Sub OnNotesChanged()
    End Sub
    Partial Private Sub OnOwnerChanging(value As String)
    End Sub
    Partial Private Sub OnOwnerChanged()
    End Sub
    Partial Private Sub OnRecCreatedDtChanging(value As Date)
    End Sub
    Partial Private Sub OnRecCreatedDtChanged()
    End Sub
    Partial Private Sub OnRecCreatedUserChanging(value As String)
    End Sub
    Partial Private Sub OnRecCreatedUserChanged()
    End Sub
    Partial Private Sub OnLastUpdatedDtChanging(value As Date)
    End Sub
    Partial Private Sub OnLastUpdatedDtChanged()
    End Sub
    Partial Private Sub OnLastUpdatedUserChanging(value As String)
    End Sub
    Partial Private Sub OnLastUpdatedUserChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tTopicRatings = New EntitySet(Of tTopicRating)(AddressOf Me.attach_tTopicRatings, AddressOf Me.detach_tTopicRatings)
		Me._tTopicDocuments = New EntitySet(Of tTopicDocument)(AddressOf Me.attach_tTopicDocuments, AddressOf Me.detach_tTopicDocuments)
		Me._tCategoryTopics = New EntitySet(Of tCategoryTopic)(AddressOf Me.attach_tCategoryTopics, AddressOf Me.detach_tCategoryTopics)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Notes", DbType:="NVarChar(MAX)")>  _
	Public Property Notes() As String
		Get
			Return Me._Notes
		End Get
		Set
			If (String.Equals(Me._Notes, value) = false) Then
				Me.OnNotesChanging(value)
				Me.SendPropertyChanging
				Me._Notes = value
				Me.SendPropertyChanged("Notes")
				Me.OnNotesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Owner", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property Owner() As String
		Get
			Return Me._Owner
		End Get
		Set
			If (String.Equals(Me._Owner, value) = false) Then
				Me.OnOwnerChanging(value)
				Me.SendPropertyChanging
				Me._Owner = value
				Me.SendPropertyChanged("Owner")
				Me.OnOwnerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecCreatedDt", DbType:="DateTime NOT NULL")>  _
	Public Property RecCreatedDt() As Date
		Get
			Return Me._RecCreatedDt
		End Get
		Set
			If ((Me._RecCreatedDt = value)  _
						= false) Then
				Me.OnRecCreatedDtChanging(value)
				Me.SendPropertyChanging
				Me._RecCreatedDt = value
				Me.SendPropertyChanged("RecCreatedDt")
				Me.OnRecCreatedDtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecCreatedUser", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property RecCreatedUser() As String
		Get
			Return Me._RecCreatedUser
		End Get
		Set
			If (String.Equals(Me._RecCreatedUser, value) = false) Then
				Me.OnRecCreatedUserChanging(value)
				Me.SendPropertyChanging
				Me._RecCreatedUser = value
				Me.SendPropertyChanged("RecCreatedUser")
				Me.OnRecCreatedUserChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdatedDt", DbType:="DateTime NOT NULL")>  _
	Public Property LastUpdatedDt() As Date
		Get
			Return Me._LastUpdatedDt
		End Get
		Set
			If ((Me._LastUpdatedDt = value)  _
						= false) Then
				Me.OnLastUpdatedDtChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdatedDt = value
				Me.SendPropertyChanged("LastUpdatedDt")
				Me.OnLastUpdatedDtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdatedUser", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property LastUpdatedUser() As String
		Get
			Return Me._LastUpdatedUser
		End Get
		Set
			If (String.Equals(Me._LastUpdatedUser, value) = false) Then
				Me.OnLastUpdatedUserChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdatedUser = value
				Me.SendPropertyChanged("LastUpdatedUser")
				Me.OnLastUpdatedUserChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tTopic_tTopicRating", Storage:="_tTopicRatings", ThisKey:="Id", OtherKey:="TopicId")>  _
	Public Property tTopicRatings() As EntitySet(Of tTopicRating)
		Get
			Return Me._tTopicRatings
		End Get
		Set
			Me._tTopicRatings.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tTopic_tTopicDocument", Storage:="_tTopicDocuments", ThisKey:="Id", OtherKey:="TopicId")>  _
	Public Property tTopicDocuments() As EntitySet(Of tTopicDocument)
		Get
			Return Me._tTopicDocuments
		End Get
		Set
			Me._tTopicDocuments.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tTopic_tCategoryTopic", Storage:="_tCategoryTopics", ThisKey:="Id", OtherKey:="TopicId")>  _
	Public Property tCategoryTopics() As EntitySet(Of tCategoryTopic)
		Get
			Return Me._tCategoryTopics
		End Get
		Set
			Me._tCategoryTopics.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tTopicRatings(ByVal entity As tTopicRating)
		Me.SendPropertyChanging
		entity.tTopic = Me
	End Sub
	
	Private Sub detach_tTopicRatings(ByVal entity As tTopicRating)
		Me.SendPropertyChanging
		entity.tTopic = Nothing
	End Sub
	
	Private Sub attach_tTopicDocuments(ByVal entity As tTopicDocument)
		Me.SendPropertyChanging
		entity.tTopic = Me
	End Sub
	
	Private Sub detach_tTopicDocuments(ByVal entity As tTopicDocument)
		Me.SendPropertyChanging
		entity.tTopic = Nothing
	End Sub
	
	Private Sub attach_tCategoryTopics(ByVal entity As tCategoryTopic)
		Me.SendPropertyChanging
		entity.tTopic = Me
	End Sub
	
	Private Sub detach_tCategoryTopics(ByVal entity As tCategoryTopic)
		Me.SendPropertyChanging
		entity.tTopic = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="SQLRunbook.tRating")>  _
Partial Public Class tRating
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Name As String
	
	Private _Notes As String
	
	Private _RecCreatedDt As Date
	
	Private _RecCreatedUser As String
	
	Private _tTopicRatings As EntitySet(Of tTopicRating)
	
	Private _tDocumentRatings As EntitySet(Of tDocumentRating)
	
	Private _tCategoryRatings As EntitySet(Of tCategoryRating)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnNotesChanging(value As String)
    End Sub
    Partial Private Sub OnNotesChanged()
    End Sub
    Partial Private Sub OnRecCreatedDtChanging(value As Date)
    End Sub
    Partial Private Sub OnRecCreatedDtChanged()
    End Sub
    Partial Private Sub OnRecCreatedUserChanging(value As String)
    End Sub
    Partial Private Sub OnRecCreatedUserChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tTopicRatings = New EntitySet(Of tTopicRating)(AddressOf Me.attach_tTopicRatings, AddressOf Me.detach_tTopicRatings)
		Me._tDocumentRatings = New EntitySet(Of tDocumentRating)(AddressOf Me.attach_tDocumentRatings, AddressOf Me.detach_tDocumentRatings)
		Me._tCategoryRatings = New EntitySet(Of tCategoryRating)(AddressOf Me.attach_tCategoryRatings, AddressOf Me.detach_tCategoryRatings)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Notes", DbType:="NVarChar(MAX)")>  _
	Public Property Notes() As String
		Get
			Return Me._Notes
		End Get
		Set
			If (String.Equals(Me._Notes, value) = false) Then
				Me.OnNotesChanging(value)
				Me.SendPropertyChanging
				Me._Notes = value
				Me.SendPropertyChanged("Notes")
				Me.OnNotesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecCreatedDt", DbType:="DateTime NOT NULL")>  _
	Public Property RecCreatedDt() As Date
		Get
			Return Me._RecCreatedDt
		End Get
		Set
			If ((Me._RecCreatedDt = value)  _
						= false) Then
				Me.OnRecCreatedDtChanging(value)
				Me.SendPropertyChanging
				Me._RecCreatedDt = value
				Me.SendPropertyChanged("RecCreatedDt")
				Me.OnRecCreatedDtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecCreatedUser", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property RecCreatedUser() As String
		Get
			Return Me._RecCreatedUser
		End Get
		Set
			If (String.Equals(Me._RecCreatedUser, value) = false) Then
				Me.OnRecCreatedUserChanging(value)
				Me.SendPropertyChanging
				Me._RecCreatedUser = value
				Me.SendPropertyChanged("RecCreatedUser")
				Me.OnRecCreatedUserChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tRating_tTopicRating", Storage:="_tTopicRatings", ThisKey:="Id", OtherKey:="RatingId")>  _
	Public Property tTopicRatings() As EntitySet(Of tTopicRating)
		Get
			Return Me._tTopicRatings
		End Get
		Set
			Me._tTopicRatings.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tRating_tDocumentRating", Storage:="_tDocumentRatings", ThisKey:="Id", OtherKey:="RatingId")>  _
	Public Property tDocumentRatings() As EntitySet(Of tDocumentRating)
		Get
			Return Me._tDocumentRatings
		End Get
		Set
			Me._tDocumentRatings.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tRating_tCategoryRating", Storage:="_tCategoryRatings", ThisKey:="Id", OtherKey:="RatingId")>  _
	Public Property tCategoryRatings() As EntitySet(Of tCategoryRating)
		Get
			Return Me._tCategoryRatings
		End Get
		Set
			Me._tCategoryRatings.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tTopicRatings(ByVal entity As tTopicRating)
		Me.SendPropertyChanging
		entity.tRating = Me
	End Sub
	
	Private Sub detach_tTopicRatings(ByVal entity As tTopicRating)
		Me.SendPropertyChanging
		entity.tRating = Nothing
	End Sub
	
	Private Sub attach_tDocumentRatings(ByVal entity As tDocumentRating)
		Me.SendPropertyChanging
		entity.tRating = Me
	End Sub
	
	Private Sub detach_tDocumentRatings(ByVal entity As tDocumentRating)
		Me.SendPropertyChanging
		entity.tRating = Nothing
	End Sub
	
	Private Sub attach_tCategoryRatings(ByVal entity As tCategoryRating)
		Me.SendPropertyChanging
		entity.tRating = Me
	End Sub
	
	Private Sub detach_tCategoryRatings(ByVal entity As tCategoryRating)
		Me.SendPropertyChanging
		entity.tRating = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="SQLRunbook.tOption")>  _
Partial Public Class tOption
	
	Private _EnforceOwnership As Boolean
	
	Private _ScanForDocumentChanges As System.Nullable(Of Boolean)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EnforceOwnership", DbType:="Bit NOT NULL")>  _
	Public Property EnforceOwnership() As Boolean
		Get
			Return Me._EnforceOwnership
		End Get
		Set
			If ((Me._EnforceOwnership = value)  _
						= false) Then
				Me._EnforceOwnership = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ScanForDocumentChanges", DbType:="Bit")>  _
	Public Property ScanForDocumentChanges() As System.Nullable(Of Boolean)
		Get
			Return Me._ScanForDocumentChanges
		End Get
		Set
			If (Me._ScanForDocumentChanges.Equals(value) = false) Then
				Me._ScanForDocumentChanges = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="SQLRunbook.tDocumentRating")>  _
Partial Public Class tDocumentRating
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _DocumentId As Integer
	
	Private _RatingId As Integer
	
	Private _Notes As String
	
	Private _RecCreatedDt As Date
	
	Private _RecCreatedUser As String
	
	Private _LastUpdatedDt As Date
	
	Private _LastUpdatedUser As String
	
	Private _tRating As EntityRef(Of tRating)
	
	Private _tDocument As EntityRef(Of tDocument)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnDocumentIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnDocumentIdChanged()
    End Sub
    Partial Private Sub OnRatingIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnRatingIdChanged()
    End Sub
    Partial Private Sub OnNotesChanging(value As String)
    End Sub
    Partial Private Sub OnNotesChanged()
    End Sub
    Partial Private Sub OnRecCreatedDtChanging(value As Date)
    End Sub
    Partial Private Sub OnRecCreatedDtChanged()
    End Sub
    Partial Private Sub OnRecCreatedUserChanging(value As String)
    End Sub
    Partial Private Sub OnRecCreatedUserChanged()
    End Sub
    Partial Private Sub OnLastUpdatedDtChanging(value As Date)
    End Sub
    Partial Private Sub OnLastUpdatedDtChanged()
    End Sub
    Partial Private Sub OnLastUpdatedUserChanging(value As String)
    End Sub
    Partial Private Sub OnLastUpdatedUserChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tRating = CType(Nothing, EntityRef(Of tRating))
		Me._tDocument = CType(Nothing, EntityRef(Of tDocument))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DocumentId", DbType:="Int NOT NULL")>  _
	Public Property DocumentId() As Integer
		Get
			Return Me._DocumentId
		End Get
		Set
			If ((Me._DocumentId = value)  _
						= false) Then
				If Me._tDocument.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDocumentIdChanging(value)
				Me.SendPropertyChanging
				Me._DocumentId = value
				Me.SendPropertyChanged("DocumentId")
				Me.OnDocumentIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RatingId", DbType:="Int NOT NULL")>  _
	Public Property RatingId() As Integer
		Get
			Return Me._RatingId
		End Get
		Set
			If ((Me._RatingId = value)  _
						= false) Then
				If Me._tRating.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnRatingIdChanging(value)
				Me.SendPropertyChanging
				Me._RatingId = value
				Me.SendPropertyChanged("RatingId")
				Me.OnRatingIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Notes", DbType:="NVarChar(MAX)")>  _
	Public Property Notes() As String
		Get
			Return Me._Notes
		End Get
		Set
			If (String.Equals(Me._Notes, value) = false) Then
				Me.OnNotesChanging(value)
				Me.SendPropertyChanging
				Me._Notes = value
				Me.SendPropertyChanged("Notes")
				Me.OnNotesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecCreatedDt", DbType:="DateTime NOT NULL")>  _
	Public Property RecCreatedDt() As Date
		Get
			Return Me._RecCreatedDt
		End Get
		Set
			If ((Me._RecCreatedDt = value)  _
						= false) Then
				Me.OnRecCreatedDtChanging(value)
				Me.SendPropertyChanging
				Me._RecCreatedDt = value
				Me.SendPropertyChanged("RecCreatedDt")
				Me.OnRecCreatedDtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecCreatedUser", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property RecCreatedUser() As String
		Get
			Return Me._RecCreatedUser
		End Get
		Set
			If (String.Equals(Me._RecCreatedUser, value) = false) Then
				Me.OnRecCreatedUserChanging(value)
				Me.SendPropertyChanging
				Me._RecCreatedUser = value
				Me.SendPropertyChanged("RecCreatedUser")
				Me.OnRecCreatedUserChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdatedDt", DbType:="DateTime NOT NULL")>  _
	Public Property LastUpdatedDt() As Date
		Get
			Return Me._LastUpdatedDt
		End Get
		Set
			If ((Me._LastUpdatedDt = value)  _
						= false) Then
				Me.OnLastUpdatedDtChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdatedDt = value
				Me.SendPropertyChanged("LastUpdatedDt")
				Me.OnLastUpdatedDtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdatedUser", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property LastUpdatedUser() As String
		Get
			Return Me._LastUpdatedUser
		End Get
		Set
			If (String.Equals(Me._LastUpdatedUser, value) = false) Then
				Me.OnLastUpdatedUserChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdatedUser = value
				Me.SendPropertyChanged("LastUpdatedUser")
				Me.OnLastUpdatedUserChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tRating_tDocumentRating", Storage:="_tRating", ThisKey:="RatingId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property tRating() As tRating
		Get
			Return Me._tRating.Entity
		End Get
		Set
			Dim previousValue As tRating = Me._tRating.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tRating.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tRating.Entity = Nothing
					previousValue.tDocumentRatings.Remove(Me)
				End If
				Me._tRating.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tDocumentRatings.Add(Me)
					Me._RatingId = value.Id
				Else
					Me._RatingId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("tRating")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tDocument_tDocumentRating", Storage:="_tDocument", ThisKey:="DocumentId", OtherKey:="Id", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property tDocument() As tDocument
		Get
			Return Me._tDocument.Entity
		End Get
		Set
			Dim previousValue As tDocument = Me._tDocument.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tDocument.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tDocument.Entity = Nothing
					previousValue.tDocumentRatings.Remove(Me)
				End If
				Me._tDocument.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tDocumentRatings.Add(Me)
					Me._DocumentId = value.Id
				Else
					Me._DocumentId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("tDocument")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="SQLRunbook.tDocument")>  _
Partial Public Class tDocument
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _File As String
	
	Private _Document As System.Data.Linq.Binary
	
	Private _DocumentType As String
	
	Private _LastModifiedDt As System.Nullable(Of Date)
	
	Private _Owner As String
	
	Private _WatchFileForChange As Boolean
	
	Private _RecCreatedDt As Date
	
	Private _RecCreatedUser As String
	
	Private _tTopicDocuments As EntitySet(Of tTopicDocument)
	
	Private _tDocumentRatings As EntitySet(Of tDocumentRating)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnFileChanging(value As String)
    End Sub
    Partial Private Sub OnFileChanged()
    End Sub
    Partial Private Sub OnDocumentChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnDocumentChanged()
    End Sub
    Partial Private Sub OnDocumentTypeChanging(value As String)
    End Sub
    Partial Private Sub OnDocumentTypeChanged()
    End Sub
    Partial Private Sub OnLastModifiedDtChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastModifiedDtChanged()
    End Sub
    Partial Private Sub OnOwnerChanging(value As String)
    End Sub
    Partial Private Sub OnOwnerChanged()
    End Sub
    Partial Private Sub OnWatchFileForChangeChanging(value As Boolean)
    End Sub
    Partial Private Sub OnWatchFileForChangeChanged()
    End Sub
    Partial Private Sub OnRecCreatedDtChanging(value As Date)
    End Sub
    Partial Private Sub OnRecCreatedDtChanged()
    End Sub
    Partial Private Sub OnRecCreatedUserChanging(value As String)
    End Sub
    Partial Private Sub OnRecCreatedUserChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tTopicDocuments = New EntitySet(Of tTopicDocument)(AddressOf Me.attach_tTopicDocuments, AddressOf Me.detach_tTopicDocuments)
		Me._tDocumentRatings = New EntitySet(Of tDocumentRating)(AddressOf Me.attach_tDocumentRatings, AddressOf Me.detach_tDocumentRatings)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[File]", Storage:="_File", DbType:="NVarChar(450)")>  _
	Public Property File() As String
		Get
			Return Me._File
		End Get
		Set
			If (String.Equals(Me._File, value) = false) Then
				Me.OnFileChanging(value)
				Me.SendPropertyChanging
				Me._File = value
				Me.SendPropertyChanged("File")
				Me.OnFileChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Document", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Document() As System.Data.Linq.Binary
		Get
			Return Me._Document
		End Get
		Set
			If (Object.Equals(Me._Document, value) = false) Then
				Me.OnDocumentChanging(value)
				Me.SendPropertyChanging
				Me._Document = value
				Me.SendPropertyChanged("Document")
				Me.OnDocumentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DocumentType", DbType:="NVarChar(8)")>  _
	Public Property DocumentType() As String
		Get
			Return Me._DocumentType
		End Get
		Set
			If (String.Equals(Me._DocumentType, value) = false) Then
				Me.OnDocumentTypeChanging(value)
				Me.SendPropertyChanging
				Me._DocumentType = value
				Me.SendPropertyChanged("DocumentType")
				Me.OnDocumentTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastModifiedDt", DbType:="DateTime")>  _
	Public Property LastModifiedDt() As System.Nullable(Of Date)
		Get
			Return Me._LastModifiedDt
		End Get
		Set
			If (Me._LastModifiedDt.Equals(value) = false) Then
				Me.OnLastModifiedDtChanging(value)
				Me.SendPropertyChanging
				Me._LastModifiedDt = value
				Me.SendPropertyChanged("LastModifiedDt")
				Me.OnLastModifiedDtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Owner", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property Owner() As String
		Get
			Return Me._Owner
		End Get
		Set
			If (String.Equals(Me._Owner, value) = false) Then
				Me.OnOwnerChanging(value)
				Me.SendPropertyChanging
				Me._Owner = value
				Me.SendPropertyChanged("Owner")
				Me.OnOwnerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WatchFileForChange", DbType:="Bit NOT NULL")>  _
	Public Property WatchFileForChange() As Boolean
		Get
			Return Me._WatchFileForChange
		End Get
		Set
			If ((Me._WatchFileForChange = value)  _
						= false) Then
				Me.OnWatchFileForChangeChanging(value)
				Me.SendPropertyChanging
				Me._WatchFileForChange = value
				Me.SendPropertyChanged("WatchFileForChange")
				Me.OnWatchFileForChangeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecCreatedDt", DbType:="DateTime NOT NULL")>  _
	Public Property RecCreatedDt() As Date
		Get
			Return Me._RecCreatedDt
		End Get
		Set
			If ((Me._RecCreatedDt = value)  _
						= false) Then
				Me.OnRecCreatedDtChanging(value)
				Me.SendPropertyChanging
				Me._RecCreatedDt = value
				Me.SendPropertyChanged("RecCreatedDt")
				Me.OnRecCreatedDtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecCreatedUser", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property RecCreatedUser() As String
		Get
			Return Me._RecCreatedUser
		End Get
		Set
			If (String.Equals(Me._RecCreatedUser, value) = false) Then
				Me.OnRecCreatedUserChanging(value)
				Me.SendPropertyChanging
				Me._RecCreatedUser = value
				Me.SendPropertyChanged("RecCreatedUser")
				Me.OnRecCreatedUserChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tDocument_tTopicDocument", Storage:="_tTopicDocuments", ThisKey:="Id", OtherKey:="DocumentId")>  _
	Public Property tTopicDocuments() As EntitySet(Of tTopicDocument)
		Get
			Return Me._tTopicDocuments
		End Get
		Set
			Me._tTopicDocuments.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tDocument_tDocumentRating", Storage:="_tDocumentRatings", ThisKey:="Id", OtherKey:="DocumentId")>  _
	Public Property tDocumentRatings() As EntitySet(Of tDocumentRating)
		Get
			Return Me._tDocumentRatings
		End Get
		Set
			Me._tDocumentRatings.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tTopicDocuments(ByVal entity As tTopicDocument)
		Me.SendPropertyChanging
		entity.tDocument = Me
	End Sub
	
	Private Sub detach_tTopicDocuments(ByVal entity As tTopicDocument)
		Me.SendPropertyChanging
		entity.tDocument = Nothing
	End Sub
	
	Private Sub attach_tDocumentRatings(ByVal entity As tDocumentRating)
		Me.SendPropertyChanging
		entity.tDocument = Me
	End Sub
	
	Private Sub detach_tDocumentRatings(ByVal entity As tDocumentRating)
		Me.SendPropertyChanging
		entity.tDocument = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="SQLRunbook.tCategoryTopic")>  _
Partial Public Class tCategoryTopic
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CategoryId As Integer
	
	Private _TopicId As Integer
	
	Private _RecCreatedDt As Date
	
	Private _RecCreatedUser As String
	
	Private _tTopic As EntityRef(Of tTopic)
	
	Private _tCategory As EntityRef(Of tCategory)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCategoryIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnCategoryIdChanged()
    End Sub
    Partial Private Sub OnTopicIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnTopicIdChanged()
    End Sub
    Partial Private Sub OnRecCreatedDtChanging(value As Date)
    End Sub
    Partial Private Sub OnRecCreatedDtChanged()
    End Sub
    Partial Private Sub OnRecCreatedUserChanging(value As String)
    End Sub
    Partial Private Sub OnRecCreatedUserChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tTopic = CType(Nothing, EntityRef(Of tTopic))
		Me._tCategory = CType(Nothing, EntityRef(Of tCategory))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property CategoryId() As Integer
		Get
			Return Me._CategoryId
		End Get
		Set
			If ((Me._CategoryId = value)  _
						= false) Then
				If Me._tCategory.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCategoryIdChanging(value)
				Me.SendPropertyChanging
				Me._CategoryId = value
				Me.SendPropertyChanged("CategoryId")
				Me.OnCategoryIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TopicId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property TopicId() As Integer
		Get
			Return Me._TopicId
		End Get
		Set
			If ((Me._TopicId = value)  _
						= false) Then
				If Me._tTopic.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTopicIdChanging(value)
				Me.SendPropertyChanging
				Me._TopicId = value
				Me.SendPropertyChanged("TopicId")
				Me.OnTopicIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecCreatedDt", DbType:="DateTime NOT NULL")>  _
	Public Property RecCreatedDt() As Date
		Get
			Return Me._RecCreatedDt
		End Get
		Set
			If ((Me._RecCreatedDt = value)  _
						= false) Then
				Me.OnRecCreatedDtChanging(value)
				Me.SendPropertyChanging
				Me._RecCreatedDt = value
				Me.SendPropertyChanged("RecCreatedDt")
				Me.OnRecCreatedDtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecCreatedUser", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property RecCreatedUser() As String
		Get
			Return Me._RecCreatedUser
		End Get
		Set
			If (String.Equals(Me._RecCreatedUser, value) = false) Then
				Me.OnRecCreatedUserChanging(value)
				Me.SendPropertyChanging
				Me._RecCreatedUser = value
				Me.SendPropertyChanged("RecCreatedUser")
				Me.OnRecCreatedUserChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tTopic_tCategoryTopic", Storage:="_tTopic", ThisKey:="TopicId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property tTopic() As tTopic
		Get
			Return Me._tTopic.Entity
		End Get
		Set
			Dim previousValue As tTopic = Me._tTopic.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tTopic.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tTopic.Entity = Nothing
					previousValue.tCategoryTopics.Remove(Me)
				End If
				Me._tTopic.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tCategoryTopics.Add(Me)
					Me._TopicId = value.Id
				Else
					Me._TopicId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("tTopic")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tCategory_tCategoryTopic", Storage:="_tCategory", ThisKey:="CategoryId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property tCategory() As tCategory
		Get
			Return Me._tCategory.Entity
		End Get
		Set
			Dim previousValue As tCategory = Me._tCategory.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tCategory.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tCategory.Entity = Nothing
					previousValue.tCategoryTopics.Remove(Me)
				End If
				Me._tCategory.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tCategoryTopics.Add(Me)
					Me._CategoryId = value.Id
				Else
					Me._CategoryId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("tCategory")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="SQLRunbook.tCategoryRating")>  _
Partial Public Class tCategoryRating
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _CategoryId As Integer
	
	Private _RatingId As Integer
	
	Private _Notes As String
	
	Private _RecCreatedDt As Date
	
	Private _RecCreatedUser As String
	
	Private _LastUpdatedDt As Date
	
	Private _LastUpdatedUser As String
	
	Private _tRating As EntityRef(Of tRating)
	
	Private _tCategory As EntityRef(Of tCategory)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnCategoryIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnCategoryIdChanged()
    End Sub
    Partial Private Sub OnRatingIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnRatingIdChanged()
    End Sub
    Partial Private Sub OnNotesChanging(value As String)
    End Sub
    Partial Private Sub OnNotesChanged()
    End Sub
    Partial Private Sub OnRecCreatedDtChanging(value As Date)
    End Sub
    Partial Private Sub OnRecCreatedDtChanged()
    End Sub
    Partial Private Sub OnRecCreatedUserChanging(value As String)
    End Sub
    Partial Private Sub OnRecCreatedUserChanged()
    End Sub
    Partial Private Sub OnLastUpdatedDtChanging(value As Date)
    End Sub
    Partial Private Sub OnLastUpdatedDtChanged()
    End Sub
    Partial Private Sub OnLastUpdatedUserChanging(value As String)
    End Sub
    Partial Private Sub OnLastUpdatedUserChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tRating = CType(Nothing, EntityRef(Of tRating))
		Me._tCategory = CType(Nothing, EntityRef(Of tCategory))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryId", DbType:="Int NOT NULL")>  _
	Public Property CategoryId() As Integer
		Get
			Return Me._CategoryId
		End Get
		Set
			If ((Me._CategoryId = value)  _
						= false) Then
				If Me._tCategory.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCategoryIdChanging(value)
				Me.SendPropertyChanging
				Me._CategoryId = value
				Me.SendPropertyChanged("CategoryId")
				Me.OnCategoryIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RatingId", DbType:="Int NOT NULL")>  _
	Public Property RatingId() As Integer
		Get
			Return Me._RatingId
		End Get
		Set
			If ((Me._RatingId = value)  _
						= false) Then
				If Me._tRating.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnRatingIdChanging(value)
				Me.SendPropertyChanging
				Me._RatingId = value
				Me.SendPropertyChanged("RatingId")
				Me.OnRatingIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Notes", DbType:="NVarChar(MAX)")>  _
	Public Property Notes() As String
		Get
			Return Me._Notes
		End Get
		Set
			If (String.Equals(Me._Notes, value) = false) Then
				Me.OnNotesChanging(value)
				Me.SendPropertyChanging
				Me._Notes = value
				Me.SendPropertyChanged("Notes")
				Me.OnNotesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecCreatedDt", DbType:="DateTime NOT NULL")>  _
	Public Property RecCreatedDt() As Date
		Get
			Return Me._RecCreatedDt
		End Get
		Set
			If ((Me._RecCreatedDt = value)  _
						= false) Then
				Me.OnRecCreatedDtChanging(value)
				Me.SendPropertyChanging
				Me._RecCreatedDt = value
				Me.SendPropertyChanged("RecCreatedDt")
				Me.OnRecCreatedDtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecCreatedUser", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property RecCreatedUser() As String
		Get
			Return Me._RecCreatedUser
		End Get
		Set
			If (String.Equals(Me._RecCreatedUser, value) = false) Then
				Me.OnRecCreatedUserChanging(value)
				Me.SendPropertyChanging
				Me._RecCreatedUser = value
				Me.SendPropertyChanged("RecCreatedUser")
				Me.OnRecCreatedUserChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdatedDt", DbType:="DateTime NOT NULL")>  _
	Public Property LastUpdatedDt() As Date
		Get
			Return Me._LastUpdatedDt
		End Get
		Set
			If ((Me._LastUpdatedDt = value)  _
						= false) Then
				Me.OnLastUpdatedDtChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdatedDt = value
				Me.SendPropertyChanged("LastUpdatedDt")
				Me.OnLastUpdatedDtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdatedUser", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property LastUpdatedUser() As String
		Get
			Return Me._LastUpdatedUser
		End Get
		Set
			If (String.Equals(Me._LastUpdatedUser, value) = false) Then
				Me.OnLastUpdatedUserChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdatedUser = value
				Me.SendPropertyChanged("LastUpdatedUser")
				Me.OnLastUpdatedUserChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tRating_tCategoryRating", Storage:="_tRating", ThisKey:="RatingId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property tRating() As tRating
		Get
			Return Me._tRating.Entity
		End Get
		Set
			Dim previousValue As tRating = Me._tRating.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tRating.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tRating.Entity = Nothing
					previousValue.tCategoryRatings.Remove(Me)
				End If
				Me._tRating.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tCategoryRatings.Add(Me)
					Me._RatingId = value.Id
				Else
					Me._RatingId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("tRating")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tCategory_tCategoryRating", Storage:="_tCategory", ThisKey:="CategoryId", OtherKey:="Id", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property tCategory() As tCategory
		Get
			Return Me._tCategory.Entity
		End Get
		Set
			Dim previousValue As tCategory = Me._tCategory.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tCategory.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tCategory.Entity = Nothing
					previousValue.tCategoryRatings.Remove(Me)
				End If
				Me._tCategory.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tCategoryRatings.Add(Me)
					Me._CategoryId = value.Id
				Else
					Me._CategoryId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("tCategory")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="SQLRunbook.tCategory")>  _
Partial Public Class tCategory
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Name As String
	
	Private _Notes As String
	
	Private _RecCreatedDt As Date
	
	Private _RecCreatedUser As String
	
	Private _tCategoryTopics As EntitySet(Of tCategoryTopic)
	
	Private _tCategoryRatings As EntitySet(Of tCategoryRating)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnNotesChanging(value As String)
    End Sub
    Partial Private Sub OnNotesChanged()
    End Sub
    Partial Private Sub OnRecCreatedDtChanging(value As Date)
    End Sub
    Partial Private Sub OnRecCreatedDtChanged()
    End Sub
    Partial Private Sub OnRecCreatedUserChanging(value As String)
    End Sub
    Partial Private Sub OnRecCreatedUserChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tCategoryTopics = New EntitySet(Of tCategoryTopic)(AddressOf Me.attach_tCategoryTopics, AddressOf Me.detach_tCategoryTopics)
		Me._tCategoryRatings = New EntitySet(Of tCategoryRating)(AddressOf Me.attach_tCategoryRatings, AddressOf Me.detach_tCategoryRatings)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Notes", DbType:="NVarChar(MAX)")>  _
	Public Property Notes() As String
		Get
			Return Me._Notes
		End Get
		Set
			If (String.Equals(Me._Notes, value) = false) Then
				Me.OnNotesChanging(value)
				Me.SendPropertyChanging
				Me._Notes = value
				Me.SendPropertyChanged("Notes")
				Me.OnNotesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecCreatedDt", DbType:="DateTime NOT NULL")>  _
	Public Property RecCreatedDt() As Date
		Get
			Return Me._RecCreatedDt
		End Get
		Set
			If ((Me._RecCreatedDt = value)  _
						= false) Then
				Me.OnRecCreatedDtChanging(value)
				Me.SendPropertyChanging
				Me._RecCreatedDt = value
				Me.SendPropertyChanged("RecCreatedDt")
				Me.OnRecCreatedDtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecCreatedUser", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property RecCreatedUser() As String
		Get
			Return Me._RecCreatedUser
		End Get
		Set
			If (String.Equals(Me._RecCreatedUser, value) = false) Then
				Me.OnRecCreatedUserChanging(value)
				Me.SendPropertyChanging
				Me._RecCreatedUser = value
				Me.SendPropertyChanged("RecCreatedUser")
				Me.OnRecCreatedUserChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tCategory_tCategoryTopic", Storage:="_tCategoryTopics", ThisKey:="Id", OtherKey:="CategoryId")>  _
	Public Property tCategoryTopics() As EntitySet(Of tCategoryTopic)
		Get
			Return Me._tCategoryTopics
		End Get
		Set
			Me._tCategoryTopics.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tCategory_tCategoryRating", Storage:="_tCategoryRatings", ThisKey:="Id", OtherKey:="CategoryId")>  _
	Public Property tCategoryRatings() As EntitySet(Of tCategoryRating)
		Get
			Return Me._tCategoryRatings
		End Get
		Set
			Me._tCategoryRatings.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tCategoryTopics(ByVal entity As tCategoryTopic)
		Me.SendPropertyChanging
		entity.tCategory = Me
	End Sub
	
	Private Sub detach_tCategoryTopics(ByVal entity As tCategoryTopic)
		Me.SendPropertyChanging
		entity.tCategory = Nothing
	End Sub
	
	Private Sub attach_tCategoryRatings(ByVal entity As tCategoryRating)
		Me.SendPropertyChanging
		entity.tCategory = Me
	End Sub
	
	Private Sub detach_tCategoryRatings(ByVal entity As tCategoryRating)
		Me.SendPropertyChanging
		entity.tCategory = Nothing
	End Sub
End Class
